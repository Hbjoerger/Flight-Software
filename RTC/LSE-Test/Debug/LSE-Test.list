
LSE-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fda8  0800fda8  0001fda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fdb0  0800fdb0  0001fdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fdb4  0800fdb4  0001fdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800fdb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  0800fe30  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800fe90  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a68  24000138  0800fef0  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005ba0  0800fef0  00025ba0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042029  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065af  00000000  00000000  0006218f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003070  00000000  00000000  00068740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e10  00000000  00000000  0006b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a5b4  00000000  00000000  0006e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cd0e  00000000  00000000  00078b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6260  00000000  00000000  000b5882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025bae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dbd8  00000000  00000000  0025bb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc50 	.word	0x0800fc50

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	0800fc50 	.word	0x0800fc50

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000692:	2201      	movs	r2, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <__io_putchar+0x20>)
 8000696:	f009 ff21 	bl	800a4dc <HAL_UART_Transmit>
  return ch;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	24000574 	.word	0x24000574

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f002 f8aa 	bl	8002804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f82e 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 fd6e 	bl	8001194 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b8:	f000 f8c2 	bl	8000840 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80006bc:	f000 f93a 	bl	8000934 <MX_DFSDM1_Init>
  MX_ETH_Init();
 80006c0:	f000 f970 	bl	80009a4 <MX_ETH_Init>
  MX_FMC_Init();
 80006c4:	f000 fc6a 	bl	8000f9c <MX_FMC_Init>
  MX_I2C1_Init();
 80006c8:	f000 f9b8 	bl	8000a3c <MX_I2C1_Init>
  MX_LTDC_Init();
 80006cc:	f000 f9f6 	bl	8000abc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006d0:	f000 faa6 	bl	8000c20 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80006d4:	f000 faf4 	bl	8000cc0 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 80006d8:	f000 fbb0 	bl	8000e3c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006dc:	f000 fbfa 	bl	8000ed4 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 80006e0:	f000 fc2a 	bl	8000f38 <MX_USB_OTG_HS_PCD_Init>
  MX_RTC_Init();
 80006e4:	f000 fac4 	bl	8000c70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e8:	f00b fd4e 	bl	800c188 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <main+0x5c>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <main+0x60>)
 80006f2:	f00b fd93 	bl	800c21c <osThreadNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <main+0x64>)
 80006fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006fc:	f00b fd68 	bl	800c1d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x58>
 8000702:	bf00      	nop
 8000704:	0800fcb4 	.word	0x0800fcb4
 8000708:	08001475 	.word	0x08001475
 800070c:	240010ec 	.word	0x240010ec

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	; 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00e fb8d 	bl	800ee3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00e fb87 	bl	800ee3e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000730:	2002      	movs	r0, #2
 8000732:	f004 ffc9 	bl	80056c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <SystemClock_Config+0x124>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	4a3d      	ldr	r2, [pc, #244]	; (8000834 <SystemClock_Config+0x124>)
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <SystemClock_Config+0x124>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <SystemClock_Config+0x128>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a38      	ldr	r2, [pc, #224]	; (8000838 <SystemClock_Config+0x128>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <SystemClock_Config+0x128>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000768:	bf00      	nop
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <SystemClock_Config+0x128>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000776:	d1f8      	bne.n	800076a <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000778:	f004 ff96 	bl	80056a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800077c:	f002 f8c2 	bl	8002904 <HAL_GetREVID>
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <SystemClock_Config+0x12c>)
 8000782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <SystemClock_Config+0x12c>)
 8000786:	f023 0318 	bic.w	r3, r3, #24
 800078a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <SystemClock_Config+0x12c>)
 800078e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000790:	4a2a      	ldr	r2, [pc, #168]	; (800083c <SystemClock_Config+0x12c>)
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000798:	2326      	movs	r3, #38	; 0x26
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80007b8:	2309      	movs	r3, #9
 80007ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c8:	230c      	movs	r3, #12
 80007ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007cc:	2302      	movs	r3, #2
 80007ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80007d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 f878 	bl	80058d0 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007e6:	f000 fe91 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	233f      	movs	r3, #63	; 0x3f
 80007ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000802:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f005 fcb7 	bl	8006184 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800081c:	f000 fe76 	bl	800150c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000820:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f005 fe62 	bl	80064f0 <HAL_RCC_MCOConfig>
}
 800082c:	bf00      	nop
 800082e:	3770      	adds	r7, #112	; 0x70
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58000400 	.word	0x58000400
 8000838:	58024800 	.word	0x58024800
 800083c:	58024400 	.word	0x58024400

08000840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_ADC1_Init+0xe4>)
 8000866:	4a30      	ldr	r2, [pc, #192]	; (8000928 <MX_ADC1_Init+0xe8>)
 8000868:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800086a:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_ADC1_Init+0xe4>)
 800086c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <MX_ADC1_Init+0xe4>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_ADC1_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_ADC1_Init+0xe4>)
 8000880:	2204      	movs	r2, #4
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_ADC1_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_ADC1_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <MX_ADC1_Init+0xe4>)
 8000892:	2201      	movs	r2, #1
 8000894:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_ADC1_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC1_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008c4:	f002 f9e0 	bl	8002c88 <HAL_ADC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008ce:	f000 fe1d 	bl	800150c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_ADC1_Init+0xe4>)
 80008de:	f002 fff7 	bl	80038d0 <HAL_ADCEx_MultiModeConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008e8:	f000 fe10 	bl	800150c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0xec>)
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f0:	2306      	movs	r3, #6
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_ADC1_Init+0xf0>)
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_ADC1_Init+0xe4>)
 800090e:	f002 fb5d 	bl	8002fcc <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000918:	f000 fdf8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400018c 	.word	0x2400018c
 8000928:	40022000 	.word	0x40022000
 800092c:	04300002 	.word	0x04300002
 8000930:	47ff0000 	.word	0x47ff0000

08000934 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_DFSDM1_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_DFSDM1_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000940:	2201      	movs	r2, #1
 8000942:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_DFSDM1_Init+0x68>)
 800094c:	2202      	movs	r2, #2
 800094e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_DFSDM1_Init+0x68>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_DFSDM1_Init+0x68>)
 800096a:	2204      	movs	r2, #4
 800096c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000976:	2201      	movs	r2, #1
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_DFSDM1_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_DFSDM1_Init+0x68>)
 8000988:	f003 f960 	bl	8003c4c <HAL_DFSDM_ChannelInit>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000992:	f000 fdbb 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	240001f0 	.word	0x240001f0
 80009a0:	40017020 	.word	0x40017020

080009a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_ETH_Init+0x80>)
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <MX_ETH_Init+0x84>)
 80009ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_ETH_Init+0x88>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ETH_Init+0x88>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_ETH_Init+0x88>)
 80009bc:	22e1      	movs	r2, #225	; 0xe1
 80009be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ETH_Init+0x88>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_ETH_Init+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_ETH_Init+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_ETH_Init+0x80>)
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_ETH_Init+0x88>)
 80009d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_ETH_Init+0x80>)
 80009da:	2201      	movs	r2, #1
 80009dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_ETH_Init+0x80>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_ETH_Init+0x8c>)
 80009e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_ETH_Init+0x80>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_ETH_Init+0x90>)
 80009e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_ETH_Init+0x80>)
 80009ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_ETH_Init+0x80>)
 80009f4:	f003 fa3e 	bl	8003e74 <HAL_ETH_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009fe:	f000 fd85 	bl	800150c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a02:	2238      	movs	r2, #56	; 0x38
 8000a04:	2100      	movs	r1, #0
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a08:	f00e fa19 	bl	800ee3e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a18:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000228 	.word	0x24000228
 8000a28:	40028000 	.word	0x40028000
 8000a2c:	240010f0 	.word	0x240010f0
 8000a30:	240000d8 	.word	0x240000d8
 8000a34:	24000078 	.word	0x24000078
 8000a38:	24000154 	.word	0x24000154

08000a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a78:	f003 ffea 	bl	8004a50 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 fd43 	bl	800150c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8a:	f004 f871 	bl	8004b70 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fd3a 	bl	800150c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9c:	f004 f8b3 	bl	8004c06 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 fd31 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	240002d8 	.word	0x240002d8
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	109093dc 	.word	0x109093dc

08000abc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09a      	sub	sp, #104	; 0x68
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac6:	2234      	movs	r2, #52	; 0x34
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00e f9b7 	bl	800ee3e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2234      	movs	r2, #52	; 0x34
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00e f9b1 	bl	800ee3e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000adc:	4b4e      	ldr	r3, [pc, #312]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000ade:	4a4f      	ldr	r2, [pc, #316]	; (8000c1c <MX_LTDC_Init+0x160>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ae2:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ae8:	4b4b      	ldr	r3, [pc, #300]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aee:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000af4:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b00:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b08:	220e      	movs	r2, #14
 8000b0a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b0c:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b0e:	2205      	movs	r2, #5
 8000b10:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b14:	f240 228e 	movw	r2, #654	; 0x28e
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b1c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b24:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b2c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b42:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b4a:	4833      	ldr	r0, [pc, #204]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b4c:	f004 f8a8 	bl	8004ca0 <HAL_LTDC_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b56:	f000 fcd9 	bl	800150c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481c      	ldr	r0, [pc, #112]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000ba8:	f004 f94a 	bl	8004e40 <HAL_LTDC_ConfigLayer>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000bb2:	f000 fcab 	bl	800150c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000c02:	f004 f91d 	bl	8004e40 <HAL_LTDC_ConfigLayer>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000c0c:	f000 fc7e 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3768      	adds	r7, #104	; 0x68
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2400032c 	.word	0x2400032c
 8000c1c:	50001000 	.word	0x50001000

08000c20 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c26:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <MX_QUADSPI_Init+0x4c>)
 8000c28:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c2c:	22ff      	movs	r2, #255	; 0xff
 8000c2e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c50:	2240      	movs	r2, #64	; 0x40
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_QUADSPI_Init+0x48>)
 8000c56:	f004 fd81 	bl	800575c <HAL_QSPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000c60:	f000 fc54 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	240003d4 	.word	0x240003d4
 8000c6c:	52005000 	.word	0x52005000

08000c70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <MX_RTC_Init+0x4c>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c82:	227f      	movs	r2, #127	; 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_RTC_Init+0x48>)
 8000ca6:	f008 fba3 	bl	80093f0 <HAL_RTC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000cb0:	f000 fc2c 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	24000420 	.word	0x24000420
 8000cbc:	58004000 	.word	0x58004000

08000cc0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000cc4:	4b58      	ldr	r3, [pc, #352]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cc6:	4a59      	ldr	r2, [pc, #356]	; (8000e2c <MX_SAI1_Init+0x16c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cca:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cd0:	4b55      	ldr	r3, [pc, #340]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cd8:	2240      	movs	r2, #64	; 0x40
 8000cda:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cdc:	4b52      	ldr	r3, [pc, #328]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ce8:	4b4f      	ldr	r3, [pc, #316]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cee:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cf4:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d00:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d02:	4a4b      	ldr	r2, [pc, #300]	; (8000e30 <MX_SAI1_Init+0x170>)
 8000d04:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d06:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d0c:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d12:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d18:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000d1e:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000d26:	4b40      	ldr	r3, [pc, #256]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d34:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d36:	2208      	movs	r2, #8
 8000d38:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d40:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d46:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000d5e:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d6a:	482f      	ldr	r0, [pc, #188]	; (8000e28 <MX_SAI1_Init+0x168>)
 8000d6c:	f008 fd1c 	bl	80097a8 <HAL_SAI_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000d76:	f000 fbc9 	bl	800150c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000d7c:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <MX_SAI1_Init+0x178>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000d8e:	2240      	movs	r2, #64	; 0x40
 8000d90:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_SAI1_Init+0x174>)
 8000e16:	f008 fcc7 	bl	80097a8 <HAL_SAI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000e20:	f000 fb74 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	24000444 	.word	0x24000444
 8000e2c:	40015804 	.word	0x40015804
 8000e30:	0002ee00 	.word	0x0002ee00
 8000e34:	240004dc 	.word	0x240004dc
 8000e38:	40015824 	.word	0x40015824

08000e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e86:	f009 fad9 	bl	800a43c <HAL_UART_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e90:	f000 fb3c 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000e98:	f00a fb69 	bl	800b56e <HAL_UARTEx_SetTxFifoThreshold>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea2:	f000 fb33 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000eaa:	f00a fb9e 	bl	800b5ea <HAL_UARTEx_SetRxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 fb2a 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_USART1_UART_Init+0x90>)
 8000eba:	f00a fb1f 	bl	800b4fc <HAL_UARTEx_DisableFifoMode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec4:	f000 fb22 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24000574 	.word	0x24000574
 8000ed0:	40011000 	.word	0x40011000

08000ed4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000edc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee0:	2209      	movs	r2, #9
 8000ee2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1c:	f004 fa7c 	bl	8005418 <HAL_PCD_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f26:	f000 faf1 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	24000608 	.word	0x24000608
 8000f34:	40080000 	.word	0x40080000

08000f38 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f44:	2209      	movs	r2, #9
 8000f46:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f80:	f004 fa4a 	bl	8005418 <HAL_PCD_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f8a:	f000 fabf 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	24000b14 	.word	0x24000b14
 8000f98:	40040000 	.word	0x40040000

08000f9c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000fc8:	4b6c      	ldr	r3, [pc, #432]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fca:	4a6d      	ldr	r2, [pc, #436]	; (8001180 <MX_FMC_Init+0x1e4>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fd0:	4a6c      	ldr	r2, [pc, #432]	; (8001184 <MX_FMC_Init+0x1e8>)
 8000fd2:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000fd4:	4b69      	ldr	r3, [pc, #420]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fda:	4b68      	ldr	r3, [pc, #416]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000fe0:	4b66      	ldr	r3, [pc, #408]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fe6:	4b65      	ldr	r3, [pc, #404]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fe8:	2210      	movs	r2, #16
 8000fea:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fec:	4b63      	ldr	r3, [pc, #396]	; (800117c <MX_FMC_Init+0x1e0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ff2:	4b62      	ldr	r3, [pc, #392]	; (800117c <MX_FMC_Init+0x1e0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ff8:	4b60      	ldr	r3, [pc, #384]	; (800117c <MX_FMC_Init+0x1e0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	; (800117c <MX_FMC_Init+0x1e0>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001004:	4b5d      	ldr	r3, [pc, #372]	; (800117c <MX_FMC_Init+0x1e0>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800100a:	4b5c      	ldr	r3, [pc, #368]	; (800117c <MX_FMC_Init+0x1e0>)
 800100c:	2200      	movs	r2, #0
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <MX_FMC_Init+0x1e0>)
 8001012:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001018:	4b58      	ldr	r3, [pc, #352]	; (800117c <MX_FMC_Init+0x1e0>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800101e:	4b57      	ldr	r3, [pc, #348]	; (800117c <MX_FMC_Init+0x1e0>)
 8001020:	2200      	movs	r2, #0
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001024:	4b55      	ldr	r3, [pc, #340]	; (800117c <MX_FMC_Init+0x1e0>)
 8001026:	2200      	movs	r2, #0
 8001028:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800102a:	4b54      	ldr	r3, [pc, #336]	; (800117c <MX_FMC_Init+0x1e0>)
 800102c:	2200      	movs	r2, #0
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001030:	230f      	movs	r3, #15
 8001032:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001034:	230f      	movs	r3, #15
 8001036:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001038:	23ff      	movs	r3, #255	; 0xff
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800103c:	230f      	movs	r3, #15
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001040:	2310      	movs	r3, #16
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001044:	2311      	movs	r3, #17
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4849      	ldr	r0, [pc, #292]	; (800117c <MX_FMC_Init+0x1e0>)
 8001056:	f004 f8cb 	bl	80051f0 <HAL_NOR_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8001060:	f000 fa54 	bl	800150c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001064:	4b48      	ldr	r3, [pc, #288]	; (8001188 <MX_FMC_Init+0x1ec>)
 8001066:	4a46      	ldr	r2, [pc, #280]	; (8001180 <MX_FMC_Init+0x1e4>)
 8001068:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <MX_FMC_Init+0x1ec>)
 800106c:	4a45      	ldr	r2, [pc, #276]	; (8001184 <MX_FMC_Init+0x1e8>)
 800106e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <MX_FMC_Init+0x1ec>)
 8001072:	2204      	movs	r2, #4
 8001074:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001076:	4b44      	ldr	r3, [pc, #272]	; (8001188 <MX_FMC_Init+0x1ec>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800107c:	4b42      	ldr	r3, [pc, #264]	; (8001188 <MX_FMC_Init+0x1ec>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001082:	4b41      	ldr	r3, [pc, #260]	; (8001188 <MX_FMC_Init+0x1ec>)
 8001084:	2210      	movs	r2, #16
 8001086:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001088:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <MX_FMC_Init+0x1ec>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <MX_FMC_Init+0x1ec>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001094:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <MX_FMC_Init+0x1ec>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <MX_FMC_Init+0x1ec>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010b4:	4b34      	ldr	r3, [pc, #208]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010cc:	230f      	movs	r3, #15
 80010ce:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010d0:	230f      	movs	r3, #15
 80010d2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80010d4:	23ff      	movs	r3, #255	; 0xff
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80010d8:	230f      	movs	r3, #15
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010dc:	2310      	movs	r3, #16
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010e0:	2311      	movs	r3, #17
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4825      	ldr	r0, [pc, #148]	; (8001188 <MX_FMC_Init+0x1ec>)
 80010f2:	f008 fe79 	bl	8009de8 <HAL_SRAM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_FMC_Init+0x164>
  {
    Error_Handler( );
 80010fc:	f000 fa06 	bl	800150c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_FMC_Init+0x1f0>)
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <MX_FMC_Init+0x1f4>)
 8001104:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_FMC_Init+0x1f0>)
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_FMC_Init+0x1f0>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_FMC_Init+0x1f0>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_FMC_Init+0x1f0>)
 800111a:	2220      	movs	r2, #32
 800111c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_FMC_Init+0x1f0>)
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_FMC_Init+0x1f0>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_FMC_Init+0x1f0>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_FMC_Init+0x1f0>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_FMC_Init+0x1f0>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_FMC_Init+0x1f0>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001142:	2310      	movs	r3, #16
 8001144:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001146:	2310      	movs	r3, #16
 8001148:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 800114a:	2310      	movs	r3, #16
 800114c:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 800114e:	2310      	movs	r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8001152:	2310      	movs	r3, #16
 8001154:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8001156:	2310      	movs	r3, #16
 8001158:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 800115a:	2310      	movs	r3, #16
 800115c:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <MX_FMC_Init+0x1f0>)
 8001164:	f008 fe04 	bl	8009d70 <HAL_SDRAM_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_FMC_Init+0x1d6>
  {
    Error_Handler( );
 800116e:	f000 f9cd 	bl	800150c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001172:	bf00      	nop
 8001174:	3738      	adds	r7, #56	; 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24001020 	.word	0x24001020
 8001180:	52004000 	.word	0x52004000
 8001184:	52004104 	.word	0x52004104
 8001188:	2400106c 	.word	0x2400106c
 800118c:	240010b8 	.word	0x240010b8
 8001190:	52004140 	.word	0x52004140

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	; 0x40
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011aa:	4baa      	ldr	r3, [pc, #680]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4aa8      	ldr	r2, [pc, #672]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4ba6      	ldr	r3, [pc, #664]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4ba2      	ldr	r3, [pc, #648]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	4aa1      	ldr	r2, [pc, #644]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d8:	4b9e      	ldr	r3, [pc, #632]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011e6:	4b9b      	ldr	r3, [pc, #620]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a99      	ldr	r2, [pc, #612]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b97      	ldr	r3, [pc, #604]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	623b      	str	r3, [r7, #32]
 8001202:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001204:	4b93      	ldr	r3, [pc, #588]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	4a92      	ldr	r2, [pc, #584]	; (8001454 <MX_GPIO_Init+0x2c0>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001214:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a8a      	ldr	r2, [pc, #552]	; (8001454 <MX_GPIO_Init+0x2c0>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b88      	ldr	r3, [pc, #544]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	4b84      	ldr	r3, [pc, #528]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a83      	ldr	r2, [pc, #524]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b80      	ldr	r3, [pc, #512]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b7d      	ldr	r3, [pc, #500]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a7b      	ldr	r2, [pc, #492]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b79      	ldr	r3, [pc, #484]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800127c:	4b75      	ldr	r3, [pc, #468]	; (8001454 <MX_GPIO_Init+0x2c0>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	4a74      	ldr	r2, [pc, #464]	; (8001454 <MX_GPIO_Init+0x2c0>)
 8001284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128c:	4b71      	ldr	r3, [pc, #452]	; (8001454 <MX_GPIO_Init+0x2c0>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <MX_GPIO_Init+0x2c0>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a6c      	ldr	r2, [pc, #432]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b66      	ldr	r3, [pc, #408]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a65      	ldr	r2, [pc, #404]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b62      	ldr	r3, [pc, #392]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a5d      	ldr	r2, [pc, #372]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <MX_GPIO_Init+0x2c0>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2108      	movs	r1, #8
 80012f8:	4857      	ldr	r0, [pc, #348]	; (8001458 <MX_GPIO_Init+0x2c4>)
 80012fa:	f003 fb8f 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	4855      	ldr	r0, [pc, #340]	; (800145c <MX_GPIO_Init+0x2c8>)
 8001306:	f003 fb89 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LED3_RGB_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2150      	movs	r1, #80	; 0x50
 800130e:	4854      	ldr	r0, [pc, #336]	; (8001460 <MX_GPIO_Init+0x2cc>)
 8001310:	f003 fb84 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CLK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8001314:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001326:	230c      	movs	r3, #12
 8001328:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132e:	4619      	mov	r1, r3
 8001330:	484c      	ldr	r0, [pc, #304]	; (8001464 <MX_GPIO_Init+0x2d0>)
 8001332:	f003 f9c3 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134a:	4619      	mov	r1, r3
 800134c:	4842      	ldr	r0, [pc, #264]	; (8001458 <MX_GPIO_Init+0x2c4>)
 800134e:	f003 f9b5 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 8001352:	2304      	movs	r3, #4
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001362:	230a      	movs	r3, #10
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136a:	4619      	mov	r1, r3
 800136c:	483e      	ldr	r0, [pc, #248]	; (8001468 <MX_GPIO_Init+0x2d4>)
 800136e:	f003 f9a5 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CDIR_Pin SDIO1_CKIN_Pin */
  GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001384:	2307      	movs	r3, #7
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138c:	4619      	mov	r1, r3
 800138e:	4837      	ldr	r0, [pc, #220]	; (800146c <MX_GPIO_Init+0x2d8>)
 8001390:	f003 f994 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001394:	2304      	movs	r3, #4
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013a4:	230c      	movs	r3, #12
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ac:	4619      	mov	r1, r3
 80013ae:	482a      	ldr	r0, [pc, #168]	; (8001458 <MX_GPIO_Init+0x2c4>)
 80013b0:	f003 f984 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c8:	4619      	mov	r1, r3
 80013ca:	4829      	ldr	r0, [pc, #164]	; (8001470 <MX_GPIO_Init+0x2dc>)
 80013cc:	f003 f976 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80013d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ea:	4619      	mov	r1, r3
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_GPIO_Init+0x2cc>)
 80013ee:	f003 f965 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D123DIR_Pin SDIO1_D0DIR_Pin */
  GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 80013f2:	23c0      	movs	r3, #192	; 0xc0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 8001402:	2308      	movs	r3, #8
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140a:	4619      	mov	r1, r3
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <MX_GPIO_Init+0x2d0>)
 800140e:	f003 f955 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_GPIO_Init+0x2c8>)
 800142c:	f003 f946 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LED3_RGB_Pin;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_GPIO_Init+0x2cc>)
 8001448:	f003 f938 	bl	80046bc <HAL_GPIO_Init>

}
 800144c:	bf00      	nop
 800144e:	3740      	adds	r7, #64	; 0x40
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400
 8001458:	58020c00 	.word	0x58020c00
 800145c:	58021400 	.word	0x58021400
 8001460:	58020000 	.word	0x58020000
 8001464:	58020800 	.word	0x58020800
 8001468:	58021000 	.word	0x58021000
 800146c:	58020400 	.word	0x58020400
 8001470:	58022000 	.word	0x58022000

08001474 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	RTC_TimeTypeDef sTime = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <StartDefaultTask+0x6c>)
 800149a:	f008 f82b 	bl	80094f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <StartDefaultTask+0x6c>)
 80014a8:	f008 f880 	bl	80095ac <HAL_RTC_GetDate>
	uint16_t milliSec = 1000 - (sTime.SubSeconds * 1000) / sTime.SecondFraction;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b2:	fb03 f202 	mul.w	r2, r3, r2
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80014c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	printf("-> Time Value: %.2d:%.2d:%.2d:%.3d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds, milliSec);
 80014c4:	7c3b      	ldrb	r3, [r7, #16]
 80014c6:	4619      	mov	r1, r3
 80014c8:	7c7b      	ldrb	r3, [r7, #17]
 80014ca:	461a      	mov	r2, r3
 80014cc:	7cbb      	ldrb	r3, [r7, #18]
 80014ce:	4618      	mov	r0, r3
 80014d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <StartDefaultTask+0x70>)
 80014d8:	f00d fd4e 	bl	800ef78 <iprintf>
  {
 80014dc:	e7d8      	b.n	8001490 <StartDefaultTask+0x1c>
 80014de:	bf00      	nop
 80014e0:	24000420 	.word	0x24000420
 80014e4:	0800fc74 	.word	0x0800fc74

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f001 f9bf 	bl	800287c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010000 	.word	0x40010000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_MspInit+0x38>)
 8001520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_MspInit+0x38>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_MspInit+0x38>)
 8001530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	210f      	movs	r1, #15
 8001540:	f06f 0001 	mvn.w	r0, #1
 8001544:	f002 fb5a 	bl	8003bfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	58024400 	.word	0x58024400

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0b4      	sub	sp, #208	; 0xd0
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	22c0      	movs	r2, #192	; 0xc0
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f00d fc6a 	bl	800ee3e <memset>
  if(hadc->Instance==ADC1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <HAL_ADC_MspInit+0xc4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d14d      	bne.n	8001610 <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001574:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001584:	2309      	movs	r3, #9
 8001586:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001594:	23c0      	movs	r3, #192	; 0xc0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001598:	2320      	movs	r3, #32
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800159c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 fa21 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 80015b8:	f7ff ffa8 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_ADC_MspInit+0xc8>)
 80015be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <HAL_ADC_MspInit+0xc8>)
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_ADC_MspInit+0xc8>)
 80015ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_ADC_MspInit+0xc8>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_ADC_MspInit+0xc8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_ADC_MspInit+0xc8>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80015f8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80015fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001600:	f001 f9a0 	bl	8002944 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001604:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001608:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800160c:	f001 f99a 	bl	8002944 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	37d0      	adds	r7, #208	; 0xd0
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40022000 	.word	0x40022000
 800161c:	58024400 	.word	0x58024400

08001620 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ba      	sub	sp, #232	; 0xe8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	22c0      	movs	r2, #192	; 0xc0
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00d fbfc 	bl	800ee3e <memset>
  if(DFSDM1_Init == 0)
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d15e      	bne.n	800170c <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800164e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800165a:	2300      	movs	r3, #0
 800165c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f005 f9c6 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_DFSDM_ChannelMspInit+0x52>
    {
      Error_Handler();
 800166e:	f7ff ff4d 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 80016ae:	2304      	movs	r3, #4
 80016b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016c6:	2306      	movs	r3, #6
 80016c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4812      	ldr	r0, [pc, #72]	; (800171c <HAL_DFSDM_ChannelMspInit+0xfc>)
 80016d4:	f002 fff2 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 80016d8:	2308      	movs	r3, #8
 80016da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80016f0:	2303      	movs	r3, #3
 80016f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <HAL_DFSDM_ChannelMspInit+0xfc>)
 80016fe:	f002 ffdd 	bl	80046bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <HAL_DFSDM_ChannelMspInit+0xf4>)
 800170a:	6013      	str	r3, [r2, #0]
  }

}
 800170c:	bf00      	nop
 800170e:	37e8      	adds	r7, #232	; 0xe8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	240010f8 	.word	0x240010f8
 8001718:	58024400 	.word	0x58024400
 800171c:	58020800 	.word	0x58020800

08001720 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_ETH_MspInit+0x144>)
 800173e:	4293      	cmp	r3, r2
 8001740:	f040 808b 	bne.w	800185a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001746:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800174a:	4a47      	ldr	r2, [pc, #284]	; (8001868 <HAL_ETH_MspInit+0x148>)
 800174c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001750:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001754:	4b44      	ldr	r3, [pc, #272]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800175a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175e:	623b      	str	r3, [r7, #32]
 8001760:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001768:	4a3f      	ldr	r2, [pc, #252]	; (8001868 <HAL_ETH_MspInit+0x148>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001782:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001786:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <HAL_ETH_MspInit+0x148>)
 8001792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800179e:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a4:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	4a29      	ldr	r2, [pc, #164]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_ETH_MspInit+0x148>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 80017f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800180a:	230b      	movs	r3, #11
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <HAL_ETH_MspInit+0x14c>)
 8001816:	f002 ff51 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800181a:	2332      	movs	r3, #50	; 0x32
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182a:	230b      	movs	r3, #11
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <HAL_ETH_MspInit+0x150>)
 8001836:	f002 ff41 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 800183a:	2386      	movs	r3, #134	; 0x86
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800184a:	230b      	movs	r3, #11
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <HAL_ETH_MspInit+0x154>)
 8001856:	f002 ff31 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	; 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40028000 	.word	0x40028000
 8001868:	58024400 	.word	0x58024400
 800186c:	58021800 	.word	0x58021800
 8001870:	58020800 	.word	0x58020800
 8001874:	58020000 	.word	0x58020000

08001878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0ba      	sub	sp, #232	; 0xe8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	22c0      	movs	r2, #192	; 0xc0
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f00d fad0 	bl	800ee3e <memset>
  if(hi2c->Instance==I2C1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_I2C_MspInit+0xc4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d145      	bne.n	8001934 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018a8:	f04f 0208 	mov.w	r2, #8
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 f898 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018ca:	f7ff fe1f 	bl	800150c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_I2C_MspInit+0xc8>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_I2C_MspInit+0xc8>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_I2C_MspInit+0xc8>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80018ec:	23c0      	movs	r3, #192	; 0xc0
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f2:	2312      	movs	r3, #18
 80018f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001904:	2304      	movs	r3, #4
 8001906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <HAL_I2C_MspInit+0xcc>)
 8001912:	f002 fed3 	bl	80046bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_I2C_MspInit+0xc8>)
 8001918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800191c:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_I2C_MspInit+0xc8>)
 800191e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001922:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_I2C_MspInit+0xc8>)
 8001928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	37e8      	adds	r7, #232	; 0xe8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40005400 	.word	0x40005400
 8001940:	58024400 	.word	0x58024400
 8001944:	58020400 	.word	0x58020400

08001948 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0bc      	sub	sp, #240	; 0xf0
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	22c0      	movs	r2, #192	; 0xc0
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00d fa68 	bl	800ee3e <memset>
  if(hltdc->Instance==LTDC)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a53      	ldr	r2, [pc, #332]	; (8001ac0 <HAL_LTDC_MspInit+0x178>)
 8001974:	4293      	cmp	r3, r2
 8001976:	f040 809e 	bne.w	8001ab6 <HAL_LTDC_MspInit+0x16e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800197a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 800198a:	2304      	movs	r3, #4
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800198e:	2302      	movs	r3, #2
 8001990:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001992:	2302      	movs	r3, #2
 8001994:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800199a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 f821 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80019b8:	f7ff fda8 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80019c2:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80019cc:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 8001a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_LTDC_MspInit+0x17c>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin
 8001a34:	23ff      	movs	r3, #255	; 0xff
 8001a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a52:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a56:	4619      	mov	r1, r3
 8001a58:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <HAL_LTDC_MspInit+0x180>)
 8001a5a:	f002 fe2f 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin
 8001a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a78:	230e      	movs	r3, #14
 8001a7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a82:	4619      	mov	r1, r3
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <HAL_LTDC_MspInit+0x184>)
 8001a86:	f002 fe19 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 8001a8a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aa4:	230e      	movs	r3, #14
 8001aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001aaa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <HAL_LTDC_MspInit+0x188>)
 8001ab2:	f002 fe03 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	37f0      	adds	r7, #240	; 0xf0
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	50001000 	.word	0x50001000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	58022800 	.word	0x58022800
 8001acc:	58022400 	.word	0x58022400
 8001ad0:	58022000 	.word	0x58022000

08001ad4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0be      	sub	sp, #248	; 0xf8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	22c0      	movs	r2, #192	; 0xc0
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00d f9a2 	bl	800ee3e <memset>
  if(hqspi->Instance==QUADSPI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a72      	ldr	r2, [pc, #456]	; (8001cc8 <HAL_QSPI_MspInit+0x1f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	f040 80dd 	bne.w	8001cc0 <HAL_QSPI_MspInit+0x1ec>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 ff6a 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001b26:	f7ff fcf1 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b2a:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b30:	4a66      	ldr	r2, [pc, #408]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001b3a:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b48:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b66:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a57      	ldr	r2, [pc, #348]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b84:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b94:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_QSPI_MspInit+0x1f8>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8001bc0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bda:	2309      	movs	r3, #9
 8001bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001be4:	4619      	mov	r1, r3
 8001be6:	483a      	ldr	r0, [pc, #232]	; (8001cd0 <HAL_QSPI_MspInit+0x1fc>)
 8001be8:	f002 fd68 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c04:	230a      	movs	r3, #10
 8001c06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	482f      	ldr	r0, [pc, #188]	; (8001cd0 <HAL_QSPI_MspInit+0x1fc>)
 8001c12:	f002 fd53 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c2e:	2309      	movs	r3, #9
 8001c30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4826      	ldr	r0, [pc, #152]	; (8001cd4 <HAL_QSPI_MspInit+0x200>)
 8001c3c:	f002 fd3e 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001c40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c64:	4619      	mov	r1, r3
 8001c66:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <HAL_QSPI_MspInit+0x200>)
 8001c68:	f002 fd28 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c84:	2309      	movs	r3, #9
 8001c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <HAL_QSPI_MspInit+0x204>)
 8001c92:	f002 fd13 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001c96:	2304      	movs	r3, #4
 8001c98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cae:	2309      	movs	r3, #9
 8001cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <HAL_QSPI_MspInit+0x208>)
 8001cbc:	f002 fcfe 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	37f8      	adds	r7, #248	; 0xf8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	52005000 	.word	0x52005000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58021800 	.word	0x58021800
 8001cd4:	58021400 	.word	0x58021400
 8001cd8:	58021c00 	.word	0x58021c00
 8001cdc:	58020400 	.word	0x58020400

08001ce0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0b2      	sub	sp, #200	; 0xc8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	22c0      	movs	r2, #192	; 0xc0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00d f8a4 	bl	800ee3e <memset>
  if(hrtc->Instance==RTC)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_RTC_MspInit+0x5c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d119      	bne.n	8001d34 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f004 fe6b 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001d24:	f7ff fbf2 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RTC_MspInit+0x60>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_RTC_MspInit+0x60>)
 8001d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	37c8      	adds	r7, #200	; 0xc8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	58004000 	.word	0x58004000
 8001d40:	58024400 	.word	0x58024400

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0ba      	sub	sp, #232	; 0xe8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	22c0      	movs	r2, #192	; 0xc0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00d f86a 	bl	800ee3e <memset>
  if(huart->Instance==USART1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_UART_MspInit+0xc8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d146      	bne.n	8001e02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d74:	f04f 0201 	mov.w	r2, #1
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fe32 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d96:	f7ff fbb9 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_UART_MspInit+0xcc>)
 8001d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0xcc>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_UART_MspInit+0xcc>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_UART_MspInit+0xcc>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0xcc>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_UART_MspInit+0xcc>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001dd6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001df0:	2304      	movs	r3, #4
 8001df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <HAL_UART_MspInit+0xd0>)
 8001dfe:	f002 fc5d 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	37e8      	adds	r7, #232	; 0xe8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58020400 	.word	0x58020400

08001e18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0c2      	sub	sp, #264	; 0x108
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e26:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3c:	22c0      	movs	r2, #192	; 0xc0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00c fffc 	bl	800ee3e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4aa3      	ldr	r2, [pc, #652]	; (80020e0 <HAL_PCD_MspInit+0x2c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d14a      	bne.n	8001eee <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001e64:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fdbf 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_PCD_MspInit+0x68>
    {
      Error_Handler();
 8001e7c:	f7ff fb46 	bl	800150c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e80:	f003 fc5c 	bl	800573c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b97      	ldr	r3, [pc, #604]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8a:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e94:	4b93      	ldr	r3, [pc, #588]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001ea2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ea6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4887      	ldr	r0, [pc, #540]	; (80020e8 <HAL_PCD_MspInit+0x2d0>)
 8001eca:	f002 fbf7 	bl	80046bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ece:	4b85      	ldr	r3, [pc, #532]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ed4:	4a83      	ldr	r2, [pc, #524]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001ed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ede:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001eec:	e0f3      	b.n	80020d6 <HAL_PCD_MspInit+0x2be>
  else if(hpcd->Instance==USB_OTG_HS)
 8001eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7c      	ldr	r2, [pc, #496]	; (80020ec <HAL_PCD_MspInit+0x2d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 80ea 	bne.w	80020d6 <HAL_PCD_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f0e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fd6a 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_PCD_MspInit+0x112>
      Error_Handler();
 8001f26:	f7ff faf1 	bl	800150c <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f2a:	f003 fc07 	bl	800573c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b6d      	ldr	r3, [pc, #436]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	4a6b      	ldr	r2, [pc, #428]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3e:	4b69      	ldr	r3, [pc, #420]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f4c:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	4a64      	ldr	r2, [pc, #400]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	4a5c      	ldr	r2, [pc, #368]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f88:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8e:	4a55      	ldr	r2, [pc, #340]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f98:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8001fc4:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001fde:	230a      	movs	r3, #10
 8001fe0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4841      	ldr	r0, [pc, #260]	; (80020f0 <HAL_PCD_MspInit+0x2d8>)
 8001fec:	f002 fb66 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800200a:	230a      	movs	r3, #10
 800200c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002014:	4619      	mov	r1, r3
 8002016:	4837      	ldr	r0, [pc, #220]	; (80020f4 <HAL_PCD_MspInit+0x2dc>)
 8002018:	f002 fb50 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800201c:	2301      	movs	r3, #1
 800201e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8002034:	230a      	movs	r3, #10
 8002036:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800203e:	4619      	mov	r1, r3
 8002040:	482d      	ldr	r0, [pc, #180]	; (80020f8 <HAL_PCD_MspInit+0x2e0>)
 8002042:	f002 fb3b 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002046:	2310      	movs	r3, #16
 8002048:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800205e:	230a      	movs	r3, #10
 8002060:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002068:	4619      	mov	r1, r3
 800206a:	4824      	ldr	r0, [pc, #144]	; (80020fc <HAL_PCD_MspInit+0x2e4>)
 800206c:	f002 fb26 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8002070:	2328      	movs	r3, #40	; 0x28
 8002072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8002088:	230a      	movs	r3, #10
 800208a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002092:	4619      	mov	r1, r3
 8002094:	4814      	ldr	r0, [pc, #80]	; (80020e8 <HAL_PCD_MspInit+0x2d0>)
 8002096:	f002 fb11 	bl	80046bc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 800209c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020a0:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 80020ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 80020ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 80020c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_PCD_MspInit+0x2cc>)
 80020ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	bf00      	nop
 80020d8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40080000 	.word	0x40080000
 80020e4:	58024400 	.word	0x58024400
 80020e8:	58020000 	.word	0x58020000
 80020ec:	40040000 	.word	0x40040000
 80020f0:	58020400 	.word	0x58020400
 80020f4:	58022000 	.word	0x58022000
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58021c00 	.word	0x58021c00

08002100 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002100:	b580      	push	{r7, lr}
 8002102:	b0b8      	sub	sp, #224	; 0xe0
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002106:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002116:	4b5c      	ldr	r3, [pc, #368]	; (8002288 <HAL_FMC_MspInit+0x188>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80b0 	bne.w	8002280 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_FMC_MspInit+0x188>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	22c0      	movs	r2, #192	; 0xc0
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f00c fe85 	bl	800ee3e <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002140:	2300      	movs	r3, #0
 8002142:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	4618      	mov	r0, r3
 800214a:	f004 fc53 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002154:	f7ff f9da 	bl	800150c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <HAL_FMC_MspInit+0x18c>)
 800215a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800215e:	4a4b      	ldr	r2, [pc, #300]	; (800228c <HAL_FMC_MspInit+0x18c>)
 8002160:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002164:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002168:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_FMC_MspInit+0x18c>)
 800216a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800216e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin
 8002176:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800217a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002190:	230c      	movs	r3, #12
 8002192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002196:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800219a:	4619      	mov	r1, r3
 800219c:	483c      	ldr	r0, [pc, #240]	; (8002290 <HAL_FMC_MspInit+0x190>)
 800219e:	f002 fa8d 	bl	80046bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5
 80021a2:	f248 533f 	movw	r3, #34111	; 0x853f
 80021a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021bc:	230c      	movs	r3, #12
 80021be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021c6:	4619      	mov	r1, r3
 80021c8:	4832      	ldr	r0, [pc, #200]	; (8002294 <HAL_FMC_MspInit+0x194>)
 80021ca:	f002 fa77 	bl	80046bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin
 80021ce:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80021d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e8:	230c      	movs	r3, #12
 80021ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021f2:	4619      	mov	r1, r3
 80021f4:	4828      	ldr	r0, [pc, #160]	; (8002298 <HAL_FMC_MspInit+0x198>)
 80021f6:	f002 fa61 	bl	80046bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 80021fa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002214:	230c      	movs	r3, #12
 8002216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800221e:	4619      	mov	r1, r3
 8002220:	481e      	ldr	r0, [pc, #120]	; (800229c <HAL_FMC_MspInit+0x19c>)
 8002222:	f002 fa4b 	bl	80046bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 8002226:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800222a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002240:	230c      	movs	r3, #12
 8002242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002246:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800224a:	4619      	mov	r1, r3
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <HAL_FMC_MspInit+0x1a0>)
 800224e:	f002 fa35 	bl	80046bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 8002252:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800226c:	230c      	movs	r3, #12
 800226e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002272:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002276:	4619      	mov	r1, r3
 8002278:	480a      	ldr	r0, [pc, #40]	; (80022a4 <HAL_FMC_MspInit+0x1a4>)
 800227a:	f002 fa1f 	bl	80046bc <HAL_GPIO_Init>
 800227e:	e000      	b.n	8002282 <HAL_FMC_MspInit+0x182>
    return;
 8002280:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002282:	37e0      	adds	r7, #224	; 0xe0
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	240010fc 	.word	0x240010fc
 800228c:	58024400 	.word	0x58024400
 8002290:	58022000 	.word	0x58022000
 8002294:	58021800 	.word	0x58021800
 8002298:	58020c00 	.word	0x58020c00
 800229c:	58021000 	.word	0x58021000
 80022a0:	58021c00 	.word	0x58021c00
 80022a4:	58021400 	.word	0x58021400

080022a8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 80022b0:	f7ff ff26 	bl	8002100 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80022c4:	f7ff ff1c 	bl	8002100 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80022d8:	f7ff ff12 	bl	8002100 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0ba      	sub	sp, #232	; 0xe8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	22c0      	movs	r2, #192	; 0xc0
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00c fda2 	bl	800ee3e <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_SAI_MspInit+0x158>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d153      	bne.n	80023ac <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002310:	2300      	movs	r3, #0
 8002312:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4618      	mov	r0, r3
 800231a:	f004 fb6b 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002324:	f7ff f8f2 	bl	800150c <Error_Handler>
    }

    if (SAI1_client == 0)
 8002328:	4b45      	ldr	r3, [pc, #276]	; (8002440 <HAL_SAI_MspInit+0x15c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10e      	bne.n	800234e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002330:	4b44      	ldr	r3, [pc, #272]	; (8002444 <HAL_SAI_MspInit+0x160>)
 8002332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002336:	4a43      	ldr	r2, [pc, #268]	; (8002444 <HAL_SAI_MspInit+0x160>)
 8002338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800233c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <HAL_SAI_MspInit+0x160>)
 8002342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800234e:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <HAL_SAI_MspInit+0x15c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <HAL_SAI_MspInit+0x15c>)
 8002356:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 8002358:	2370      	movs	r3, #112	; 0x70
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002370:	2306      	movs	r3, #6
 8002372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002376:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800237a:	4619      	mov	r1, r3
 800237c:	4832      	ldr	r0, [pc, #200]	; (8002448 <HAL_SAI_MspInit+0x164>)
 800237e:	f002 f99d 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800239a:	2306      	movs	r3, #6
 800239c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4829      	ldr	r0, [pc, #164]	; (800244c <HAL_SAI_MspInit+0x168>)
 80023a8:	f002 f988 	bl	80046bc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_SAI_MspInit+0x16c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d13e      	bne.n	8002434 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fb12 	bl	80069f4 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 80023d6:	f7ff f899 	bl	800150c <Error_Handler>
    }

      if (SAI1_client == 0)
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_SAI_MspInit+0x15c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_SAI_MspInit+0x160>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e8:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_SAI_MspInit+0x160>)
 80023ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_SAI_MspInit+0x160>)
 80023f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_SAI_MspInit+0x15c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_SAI_MspInit+0x15c>)
 8002408:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800240a:	2308      	movs	r3, #8
 800240c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002422:	2306      	movs	r3, #6
 8002424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002428:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800242c:	4619      	mov	r1, r3
 800242e:	4806      	ldr	r0, [pc, #24]	; (8002448 <HAL_SAI_MspInit+0x164>)
 8002430:	f002 f944 	bl	80046bc <HAL_GPIO_Init>

    }
}
 8002434:	bf00      	nop
 8002436:	37e8      	adds	r7, #232	; 0xe8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40015804 	.word	0x40015804
 8002440:	24001100 	.word	0x24001100
 8002444:	58024400 	.word	0x58024400
 8002448:	58021000 	.word	0x58021000
 800244c:	58021800 	.word	0x58021800
 8002450:	40015824 	.word	0x40015824

08002454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	d844      	bhi.n	80024ec <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8002462:	2200      	movs	r2, #0
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	2019      	movs	r0, #25
 8002468:	f001 fbc8 	bl	8003bfc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800246c:	2019      	movs	r0, #25
 800246e:	f001 fbdf 	bl	8003c30 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <HAL_InitTick+0xb0>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002478:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_InitTick+0xb4>)
 800247a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_InitTick+0xb4>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_InitTick+0xb4>)
 800248a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002496:	f107 020c 	add.w	r2, r7, #12
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fa65 	bl	8006970 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80024a6:	f004 fa4d 	bl	8006944 <HAL_RCC_GetPCLK2Freq>
 80024aa:	4603      	mov	r3, r0
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_InitTick+0xb8>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	0c9b      	lsrs	r3, r3, #18
 80024ba:	3b01      	subs	r3, #1
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_InitTick+0xbc>)
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <HAL_InitTick+0xc0>)
 80024c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0xbc>)
 80024c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024cc:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_InitTick+0xbc>)
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_InitTick+0xbc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_InitTick+0xbc>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <HAL_InitTick+0xbc>)
 80024e0:	f007 fcd2 	bl	8009e88 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_InitTick+0xa6>
 80024ea:	e001      	b.n	80024f0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e005      	b.n	80024fc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80024f0:	4807      	ldr	r0, [pc, #28]	; (8002510 <HAL_InitTick+0xbc>)
 80024f2:	f007 fd2b 	bl	8009f4c <HAL_TIM_Base_Start_IT>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3738      	adds	r7, #56	; 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	24000008 	.word	0x24000008
 8002508:	58024400 	.word	0x58024400
 800250c:	431bde83 	.word	0x431bde83
 8002510:	24001104 	.word	0x24001104
 8002514:	40010000 	.word	0x40010000

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800251c:	e7fe      	b.n	800251c <NMI_Handler+0x4>

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <MemManage_Handler+0x4>

0800252a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler+0x4>

08002536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <TIM1_UP_IRQHandler+0x10>)
 800254a:	f007 fd77 	bl	800a03c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	24001104 	.word	0x24001104

08002558 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e00a      	b.n	8002580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800256a:	f3af 8000 	nop.w
 800256e:	4601      	mov	r1, r0
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf0      	blt.n	800256a <_read+0x12>
  }

  return len;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe f869 	bl	8000684 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x12>
  }
  return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_close>:

int _close(int file)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
  return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_isatty>:

int _isatty(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f00c faba 	bl	800ebdc <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	24080000 	.word	0x24080000
 8002694:	00000400 	.word	0x00000400
 8002698:	24001150 	.word	0x24001150
 800269c:	24005ba0 	.word	0x24005ba0

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <SystemInit+0xe4>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a36      	ldr	r2, [pc, #216]	; (8002784 <SystemInit+0xe4>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <SystemInit+0xe8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	2b06      	cmp	r3, #6
 80026be:	d807      	bhi.n	80026d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <SystemInit+0xe8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 030f 	bic.w	r3, r3, #15
 80026c8:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <SystemInit+0xe8>)
 80026ca:	f043 0307 	orr.w	r3, r3, #7
 80026ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <SystemInit+0xec>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2d      	ldr	r2, [pc, #180]	; (800278c <SystemInit+0xec>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <SystemInit+0xec>)
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <SystemInit+0xec>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4929      	ldr	r1, [pc, #164]	; (800278c <SystemInit+0xec>)
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <SystemInit+0xf0>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <SystemInit+0xe8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <SystemInit+0xe8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 030f 	bic.w	r3, r3, #15
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <SystemInit+0xe8>)
 8002704:	f043 0307 	orr.w	r3, r3, #7
 8002708:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <SystemInit+0xec>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <SystemInit+0xec>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <SystemInit+0xec>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <SystemInit+0xec>)
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <SystemInit+0xf4>)
 8002720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <SystemInit+0xec>)
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <SystemInit+0xf8>)
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <SystemInit+0xec>)
 800272a:	4a1c      	ldr	r2, [pc, #112]	; (800279c <SystemInit+0xfc>)
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <SystemInit+0xec>)
 8002730:	2200      	movs	r2, #0
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <SystemInit+0xec>)
 8002736:	4a19      	ldr	r2, [pc, #100]	; (800279c <SystemInit+0xfc>)
 8002738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <SystemInit+0xec>)
 800273c:	2200      	movs	r2, #0
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <SystemInit+0xec>)
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <SystemInit+0xfc>)
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <SystemInit+0xec>)
 8002748:	2200      	movs	r2, #0
 800274a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <SystemInit+0xec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <SystemInit+0xec>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <SystemInit+0xec>)
 800275a:	2200      	movs	r2, #0
 800275c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <SystemInit+0x100>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <SystemInit+0x104>)
 8002764:	4013      	ands	r3, r2
 8002766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800276a:	d202      	bcs.n	8002772 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <SystemInit+0x108>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <SystemInit+0x10c>)
 8002774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002778:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00
 8002788:	52002000 	.word	0x52002000
 800278c:	58024400 	.word	0x58024400
 8002790:	eaf6ed7f 	.word	0xeaf6ed7f
 8002794:	02020200 	.word	0x02020200
 8002798:	01ff0000 	.word	0x01ff0000
 800279c:	01010280 	.word	0x01010280
 80027a0:	5c001000 	.word	0x5c001000
 80027a4:	ffff0000 	.word	0xffff0000
 80027a8:	51008108 	.word	0x51008108
 80027ac:	52004000 	.word	0x52004000

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027b4:	f7ff ff74 	bl	80026a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027de:	f00c faf9 	bl	800edd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7fd ff61 	bl	80006a8 <main>
  bx  lr
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80027ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027f0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80027f4:	0800fdb8 	.word	0x0800fdb8
  ldr r2, =_sbss
 80027f8:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80027fc:	24005ba0 	.word	0x24005ba0

08002800 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC3_IRQHandler>
	...

08002804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280a:	2003      	movs	r0, #3
 800280c:	f001 f9eb 	bl	8003be6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002810:	f003 fed8 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_Init+0x68>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	4913      	ldr	r1, [pc, #76]	; (8002870 <HAL_Init+0x6c>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_Init+0x68>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_Init+0x6c>)
 8002838:	5cd3      	ldrb	r3, [r2, r3]
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_Init+0x70>)
 8002846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_Init+0x74>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800284e:	200f      	movs	r0, #15
 8002850:	f7ff fe00 	bl	8002454 <HAL_InitTick>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e002      	b.n	8002864 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800285e:	f7fe fe5b 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	58024400 	.word	0x58024400
 8002870:	0800fcd8 	.word	0x0800fcd8
 8002874:	24000004 	.word	0x24000004
 8002878:	24000000 	.word	0x24000000

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	2400000c 	.word	0x2400000c
 80028a0:	24001154 	.word	0x24001154

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	24001154 	.word	0x24001154

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2400000c 	.word	0x2400000c

08002904 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_GetREVID+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0c1b      	lsrs	r3, r3, #16
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	5c001000 	.word	0x5c001000

0800291c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800292c:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	58000400 	.word	0x58000400

08002944 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	4904      	ldr	r1, [pc, #16]	; (800296c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	58000400 	.word	0x58000400

08002970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3360      	adds	r3, #96	; 0x60
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	611a      	str	r2, [r3, #16]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	601a      	str	r2, [r3, #0]
  }
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3330      	adds	r3, #48	; 0x30
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	4413      	add	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	211f      	movs	r1, #31
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 011f 	and.w	r1, r3, #31
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0e5b      	lsrs	r3, r3, #25
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	0d1b      	lsrs	r3, r3, #20
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2107      	movs	r1, #7
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	0d1b      	lsrs	r3, r3, #20
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0318 	and.w	r3, r3, #24
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b54:	40d9      	lsrs	r1, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	400b      	ands	r3, r1
 8002b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	000fffff 	.word	0x000fffff

08002b78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6093      	str	r3, [r2, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	5fffffc0 	.word	0x5fffffc0

08002b9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	6fffffc0 	.word	0x6fffffc0

08002bec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c00:	d101      	bne.n	8002c06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <LL_ADC_IsEnabled+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_ADC_IsEnabled+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d101      	bne.n	8002c78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e18f      	b.n	8002fc2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7fe fc4f 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff67 	bl	8002b9c <LL_ADC_IsDeepPowerDownEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff4d 	bl	8002b78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff82 	bl	8002bec <LL_ADC_IsInternalRegulatorEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d114      	bne.n	8002d18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff66 	bl	8002bc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf8:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <HAL_ADC_Init+0x290>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	4a87      	ldr	r2, [pc, #540]	; (8002f1c <HAL_ADC_Init+0x294>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	3301      	adds	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d0a:	e002      	b.n	8002d12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f9      	bne.n	8002d0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff65 	bl	8002bec <LL_ADC_IsInternalRegulatorEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f043 0210 	orr.w	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff76 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8002d4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 8129 	bne.w	8002fb0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 8125 	bne.w	8002fb0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff4a 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d136      	bne.n	8002df4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a65      	ldr	r2, [pc, #404]	; (8002f20 <HAL_ADC_Init+0x298>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_ADC_Init+0x112>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a63      	ldr	r2, [pc, #396]	; (8002f24 <HAL_ADC_Init+0x29c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10e      	bne.n	8002db8 <HAL_ADC_Init+0x130>
 8002d9a:	4861      	ldr	r0, [pc, #388]	; (8002f20 <HAL_ADC_Init+0x298>)
 8002d9c:	f7ff ff3a 	bl	8002c14 <LL_ADC_IsEnabled>
 8002da0:	4604      	mov	r4, r0
 8002da2:	4860      	ldr	r0, [pc, #384]	; (8002f24 <HAL_ADC_Init+0x29c>)
 8002da4:	f7ff ff36 	bl	8002c14 <LL_ADC_IsEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4323      	orrs	r3, r4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e008      	b.n	8002dca <HAL_ADC_Init+0x142>
 8002db8:	485b      	ldr	r0, [pc, #364]	; (8002f28 <HAL_ADC_Init+0x2a0>)
 8002dba:	f7ff ff2b 	bl	8002c14 <LL_ADC_IsEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_ADC_Init+0x298>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Init+0x15a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a51      	ldr	r2, [pc, #324]	; (8002f24 <HAL_ADC_Init+0x29c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x15e>
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_ADC_Init+0x2a4>)
 8002de4:	e000      	b.n	8002de8 <HAL_ADC_Init+0x160>
 8002de6:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_ADC_Init+0x2a8>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f7ff fdbe 	bl	8002970 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002df4:	f7ff fd86 	bl	8002904 <HAL_GetREVID>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d914      	bls.n	8002e2c <HAL_ADC_Init+0x1a4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d110      	bne.n	8002e2c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7d5b      	ldrb	r3, [r3, #21]
 8002e0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7f1b      	ldrb	r3, [r3, #28]
 8002e20:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e22:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e24:	f043 030c 	orr.w	r3, r3, #12
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e00d      	b.n	8002e48 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7d5b      	ldrb	r3, [r3, #21]
 8002e30:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e36:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e3c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7f1b      	ldrb	r3, [r3, #28]
 8002e42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7f1b      	ldrb	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	045b      	lsls	r3, r3, #17
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <HAL_ADC_Init+0x2ac>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	69b9      	ldr	r1, [r7, #24]
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fed1 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8002e98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fede 	bl	8002c60 <LL_ADC_INJ_IsConversionOngoing>
 8002ea4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d15f      	bne.n	8002f6c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d15c      	bne.n	8002f6c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7d1b      	ldrb	r3, [r3, #20]
 8002eb6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <HAL_ADC_Init+0x2b0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d130      	bne.n	8002f40 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_ADC_Init+0x2b4>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ef2:	3a01      	subs	r2, #1
 8002ef4:	0411      	lsls	r1, r2, #16
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002efa:	4311      	orrs	r1, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f06:	430a      	orrs	r2, r1
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	e01c      	b.n	8002f50 <HAL_ADC_Init+0x2c8>
 8002f16:	bf00      	nop
 8002f18:	24000000 	.word	0x24000000
 8002f1c:	053e2d63 	.word	0x053e2d63
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40022100 	.word	0x40022100
 8002f28:	58026000 	.word	0x58026000
 8002f2c:	40022300 	.word	0x40022300
 8002f30:	58026300 	.word	0x58026300
 8002f34:	fff0c003 	.word	0xfff0c003
 8002f38:	ffffbffc 	.word	0xffffbffc
 8002f3c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fb80 	bl	800366c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f023 010f 	bic.w	r1, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8c:	e007      	b.n	8002f9e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 020f 	bic.w	r2, r2, #15
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
 8002fae:	e007      	b.n	8002fc0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop

08002fcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b0a1      	sub	sp, #132	; 0x84
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a9d      	ldr	r2, [pc, #628]	; (800325c <HAL_ADC_ConfigChannel+0x290>)
 8002fe6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x2a>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e321      	b.n	800363a <HAL_ADC_ConfigChannel+0x66e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fe19 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 8306 	bne.w	800361c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003018:	2b00      	cmp	r3, #0
 800301a:	d108      	bne.n	800302e <HAL_ADC_ConfigChannel+0x62>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2201      	movs	r2, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	e016      	b.n	800305c <HAL_ADC_ConfigChannel+0x90>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800303c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800303e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e003      	b.n	8003052 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800304a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2201      	movs	r2, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	69d1      	ldr	r1, [r2, #28]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	430b      	orrs	r3, r1
 8003068:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f7ff fd02 	bl	8002a80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fdda 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8003086:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fde7 	bl	8002c60 <LL_ADC_INJ_IsConversionOngoing>
 8003092:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80b3 	bne.w	8003202 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800309c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80af 	bne.w	8003202 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	f7ff fd11 	bl	8002ad8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030b6:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_ADC_ConfigChannel+0x294>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c2:	d10b      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x110>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	e01d      	b.n	8003118 <HAL_ADC_ConfigChannel+0x14c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x136>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	e00a      	b.n	8003118 <HAL_ADC_ConfigChannel+0x14c>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d027      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003130:	f7ff fc52 	bl	80029d8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6919      	ldr	r1, [r3, #16]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	7e5b      	ldrb	r3, [r3, #25]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_ADC_ConfigChannel+0x17e>
 8003144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003148:	e000      	b.n	800314c <HAL_ADC_ConfigChannel+0x180>
 800314a:	2300      	movs	r3, #0
 800314c:	461a      	mov	r2, r3
 800314e:	f7ff fc7c 	bl	8002a4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6919      	ldr	r1, [r3, #16]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	7e1b      	ldrb	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x19c>
 8003162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003166:	e000      	b.n	800316a <HAL_ADC_ConfigChannel+0x19e>
 8003168:	2300      	movs	r3, #0
 800316a:	461a      	mov	r2, r3
 800316c:	f7ff fc54 	bl	8002a18 <LL_ADC_SetDataRightShift>
 8003170:	e047      	b.n	8003202 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	069b      	lsls	r3, r3, #26
 8003182:	429a      	cmp	r2, r3
 8003184:	d107      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003194:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	069b      	lsls	r3, r3, #26
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d107      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031b8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	069b      	lsls	r3, r3, #26
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d107      	bne.n	80031de <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031dc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d107      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003200:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fd04 	bl	8002c14 <LL_ADC_IsEnabled>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 820d 	bne.w	800362e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	461a      	mov	r2, r3
 8003222:	f7ff fc85 	bl	8002b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a0c      	ldr	r2, [pc, #48]	; (800325c <HAL_ADC_ConfigChannel+0x290>)
 800322c:	4293      	cmp	r3, r2
 800322e:	f040 8133 	bne.w	8003498 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800323e:	2b00      	cmp	r3, #0
 8003240:	d110      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x298>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	3301      	adds	r3, #1
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2b09      	cmp	r3, #9
 8003250:	bf94      	ite	ls
 8003252:	2301      	movls	r3, #1
 8003254:	2300      	movhi	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e01e      	b.n	8003298 <HAL_ADC_ConfigChannel+0x2cc>
 800325a:	bf00      	nop
 800325c:	47ff0000 	.word	0x47ff0000
 8003260:	5c001000 	.word	0x5c001000
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e003      	b.n	8003288 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2b09      	cmp	r3, #9
 8003290:	bf94      	ite	ls
 8003292:	2301      	movls	r3, #1
 8003294:	2300      	movhi	r3, #0
 8003296:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003298:	2b00      	cmp	r3, #0
 800329a:	d079      	beq.n	8003390 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x2ec>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0e9b      	lsrs	r3, r3, #26
 80032ae:	3301      	adds	r3, #1
 80032b0:	069b      	lsls	r3, r3, #26
 80032b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b6:	e015      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x318>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80032d0:	2320      	movs	r3, #32
 80032d2:	e003      	b.n	80032dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	069b      	lsls	r3, r3, #26
 80032e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x338>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	3301      	adds	r3, #1
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	e017      	b.n	8003334 <HAL_ADC_ConfigChannel+0x368>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_ADC_ConfigChannel+0x38e>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	3301      	adds	r3, #1
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	051b      	lsls	r3, r3, #20
 8003358:	e018      	b.n	800338c <HAL_ADC_ConfigChannel+0x3c0>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003372:	2320      	movs	r3, #32
 8003374:	e003      	b.n	800337e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338c:	430b      	orrs	r3, r1
 800338e:	e07e      	b.n	800348e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x3e0>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	3301      	adds	r3, #1
 80033a4:	069b      	lsls	r3, r3, #26
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033aa:	e015      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x40c>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x42c>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	e017      	b.n	8003428 <HAL_ADC_ConfigChannel+0x45c>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	61bb      	str	r3, [r7, #24]
  return result;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e003      	b.n	800341c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x488>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	3301      	adds	r3, #1
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	3b1e      	subs	r3, #30
 800344c:	051b      	lsls	r3, r3, #20
 800344e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003452:	e01b      	b.n	800348c <HAL_ADC_ConfigChannel+0x4c0>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
  return result;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f003 021f 	and.w	r2, r3, #31
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	3b1e      	subs	r3, #30
 8003486:	051b      	lsls	r3, r3, #20
 8003488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800348c:	430b      	orrs	r3, r1
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	4619      	mov	r1, r3
 8003494:	f7ff fb20 	bl	8002ad8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f280 80c6 	bge.w	800362e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a67      	ldr	r2, [pc, #412]	; (8003644 <HAL_ADC_ConfigChannel+0x678>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_ADC_ConfigChannel+0x4ea>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a65      	ldr	r2, [pc, #404]	; (8003648 <HAL_ADC_ConfigChannel+0x67c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x4ee>
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_ADC_ConfigChannel+0x680>)
 80034b8:	e000      	b.n	80034bc <HAL_ADC_ConfigChannel+0x4f0>
 80034ba:	4b65      	ldr	r3, [pc, #404]	; (8003650 <HAL_ADC_ConfigChannel+0x684>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fa7d 	bl	80029bc <LL_ADC_GetCommonPathInternalCh>
 80034c2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5e      	ldr	r2, [pc, #376]	; (8003644 <HAL_ADC_ConfigChannel+0x678>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_ADC_ConfigChannel+0x50c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5d      	ldr	r2, [pc, #372]	; (8003648 <HAL_ADC_ConfigChannel+0x67c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10e      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x52a>
 80034d8:	485a      	ldr	r0, [pc, #360]	; (8003644 <HAL_ADC_ConfigChannel+0x678>)
 80034da:	f7ff fb9b 	bl	8002c14 <LL_ADC_IsEnabled>
 80034de:	4604      	mov	r4, r0
 80034e0:	4859      	ldr	r0, [pc, #356]	; (8003648 <HAL_ADC_ConfigChannel+0x67c>)
 80034e2:	f7ff fb97 	bl	8002c14 <LL_ADC_IsEnabled>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4323      	orrs	r3, r4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e008      	b.n	8003508 <HAL_ADC_ConfigChannel+0x53c>
 80034f6:	4857      	ldr	r0, [pc, #348]	; (8003654 <HAL_ADC_ConfigChannel+0x688>)
 80034f8:	f7ff fb8c 	bl	8002c14 <LL_ADC_IsEnabled>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d07d      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a51      	ldr	r2, [pc, #324]	; (8003658 <HAL_ADC_ConfigChannel+0x68c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d130      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x5ac>
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d12b      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4b      	ldr	r2, [pc, #300]	; (8003654 <HAL_ADC_ConfigChannel+0x688>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f040 8081 	bne.w	800362e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a44      	ldr	r2, [pc, #272]	; (8003644 <HAL_ADC_ConfigChannel+0x678>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_ADC_ConfigChannel+0x574>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a43      	ldr	r2, [pc, #268]	; (8003648 <HAL_ADC_ConfigChannel+0x67c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x578>
 8003540:	4a42      	ldr	r2, [pc, #264]	; (800364c <HAL_ADC_ConfigChannel+0x680>)
 8003542:	e000      	b.n	8003546 <HAL_ADC_ConfigChannel+0x57a>
 8003544:	4a42      	ldr	r2, [pc, #264]	; (8003650 <HAL_ADC_ConfigChannel+0x684>)
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7ff fa21 	bl	8002996 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_ADC_ConfigChannel+0x690>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	4a41      	ldr	r2, [pc, #260]	; (8003660 <HAL_ADC_ConfigChannel+0x694>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003568:	e002      	b.n	8003570 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003576:	e05a      	b.n	800362e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a39      	ldr	r2, [pc, #228]	; (8003664 <HAL_ADC_ConfigChannel+0x698>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11e      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x5f4>
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d119      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a30      	ldr	r2, [pc, #192]	; (8003654 <HAL_ADC_ConfigChannel+0x688>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d14b      	bne.n	800362e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <HAL_ADC_ConfigChannel+0x678>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x5de>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_ADC_ConfigChannel+0x67c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x5e2>
 80035aa:	4a28      	ldr	r2, [pc, #160]	; (800364c <HAL_ADC_ConfigChannel+0x680>)
 80035ac:	e000      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x5e4>
 80035ae:	4a28      	ldr	r2, [pc, #160]	; (8003650 <HAL_ADC_ConfigChannel+0x684>)
 80035b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7ff f9ec 	bl	8002996 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035be:	e036      	b.n	800362e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_ADC_ConfigChannel+0x69c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d131      	bne.n	800362e <HAL_ADC_ConfigChannel+0x662>
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d12c      	bne.n	800362e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <HAL_ADC_ConfigChannel+0x688>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d127      	bne.n	800362e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_ADC_ConfigChannel+0x678>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x626>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_ADC_ConfigChannel+0x67c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x62a>
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <HAL_ADC_ConfigChannel+0x680>)
 80035f4:	e000      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x62c>
 80035f6:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_ADC_ConfigChannel+0x684>)
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7ff f9c8 	bl	8002996 <LL_ADC_SetCommonPathInternalCh>
 8003606:	e012      	b.n	800362e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800361a:	e008      	b.n	800362e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003636:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800363a:	4618      	mov	r0, r3
 800363c:	3784      	adds	r7, #132	; 0x84
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}
 8003642:	bf00      	nop
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300
 8003654:	58026000 	.word	0x58026000
 8003658:	cb840000 	.word	0xcb840000
 800365c:	24000000 	.word	0x24000000
 8003660:	053e2d63 	.word	0x053e2d63
 8003664:	c7520000 	.word	0xc7520000
 8003668:	cfb80000 	.word	0xcfb80000

0800366c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7a      	ldr	r2, [pc, #488]	; (8003864 <ADC_ConfigureBoostMode+0x1f8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <ADC_ConfigureBoostMode+0x1c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a79      	ldr	r2, [pc, #484]	; (8003868 <ADC_ConfigureBoostMode+0x1fc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d109      	bne.n	800369c <ADC_ConfigureBoostMode+0x30>
 8003688:	4b78      	ldr	r3, [pc, #480]	; (800386c <ADC_ConfigureBoostMode+0x200>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e008      	b.n	80036ae <ADC_ConfigureBoostMode+0x42>
 800369c:	4b74      	ldr	r3, [pc, #464]	; (8003870 <ADC_ConfigureBoostMode+0x204>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01c      	beq.n	80036ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036b2:	f003 f901 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 80036b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036c0:	d010      	beq.n	80036e4 <ADC_ConfigureBoostMode+0x78>
 80036c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036c6:	d873      	bhi.n	80037b0 <ADC_ConfigureBoostMode+0x144>
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d002      	beq.n	80036d4 <ADC_ConfigureBoostMode+0x68>
 80036ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d2:	d16d      	bne.n	80037b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e068      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	60fb      	str	r3, [r7, #12]
        break;
 80036ea:	e064      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f004 fb88 	bl	8007e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80036f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003702:	d051      	beq.n	80037a8 <ADC_ConfigureBoostMode+0x13c>
 8003704:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003708:	d854      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 800370a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800370e:	d047      	beq.n	80037a0 <ADC_ConfigureBoostMode+0x134>
 8003710:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003714:	d84e      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 8003716:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800371a:	d03d      	beq.n	8003798 <ADC_ConfigureBoostMode+0x12c>
 800371c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003720:	d848      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 8003722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003726:	d033      	beq.n	8003790 <ADC_ConfigureBoostMode+0x124>
 8003728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372c:	d842      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 800372e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003732:	d029      	beq.n	8003788 <ADC_ConfigureBoostMode+0x11c>
 8003734:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003738:	d83c      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 800373a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800373e:	d01a      	beq.n	8003776 <ADC_ConfigureBoostMode+0x10a>
 8003740:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003744:	d836      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 8003746:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800374a:	d014      	beq.n	8003776 <ADC_ConfigureBoostMode+0x10a>
 800374c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003750:	d830      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003756:	d00e      	beq.n	8003776 <ADC_ConfigureBoostMode+0x10a>
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d82a      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 800375e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003762:	d008      	beq.n	8003776 <ADC_ConfigureBoostMode+0x10a>
 8003764:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003768:	d824      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0x148>
 800376a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800376e:	d002      	beq.n	8003776 <ADC_ConfigureBoostMode+0x10a>
 8003770:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003774:	d11e      	bne.n	80037b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0c9b      	lsrs	r3, r3, #18
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	60fb      	str	r3, [r7, #12]
        break;
 8003786:	e016      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
        break;
 800378e:	e012      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	60fb      	str	r3, [r7, #12]
        break;
 8003796:	e00e      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	60fb      	str	r3, [r7, #12]
        break;
 800379e:	e00a      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	09db      	lsrs	r3, r3, #7
 80037a4:	60fb      	str	r3, [r7, #12]
        break;
 80037a6:	e006      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	60fb      	str	r3, [r7, #12]
        break;
 80037ae:	e002      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80037b4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80037b6:	f7ff f8a5 	bl	8002904 <HAL_GetREVID>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d815      	bhi.n	80037f0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <ADC_ConfigureBoostMode+0x208>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d908      	bls.n	80037de <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80037dc:	e03e      	b.n	800385c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ec:	609a      	str	r2, [r3, #8]
}
 80037ee:	e035      	b.n	800385c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <ADC_ConfigureBoostMode+0x20c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d808      	bhi.n	8003810 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800380c:	609a      	str	r2, [r3, #8]
}
 800380e:	e025      	b.n	800385c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a1a      	ldr	r2, [pc, #104]	; (800387c <ADC_ConfigureBoostMode+0x210>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d80a      	bhi.n	800382e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	e016      	b.n	800385c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <ADC_ConfigureBoostMode+0x214>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d80a      	bhi.n	800384c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003848:	609a      	str	r2, [r3, #8]
}
 800384a:	e007      	b.n	800385c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40022000 	.word	0x40022000
 8003868:	40022100 	.word	0x40022100
 800386c:	40022300 	.word	0x40022300
 8003870:	58026300 	.word	0x58026300
 8003874:	01312d00 	.word	0x01312d00
 8003878:	005f5e10 	.word	0x005f5e10
 800387c:	00bebc20 	.word	0x00bebc20
 8003880:	017d7840 	.word	0x017d7840

08003884 <LL_ADC_IsEnabled>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <LL_ADC_IsEnabled+0x18>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <LL_ADC_IsEnabled+0x1a>
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_ADC_REG_IsConversionOngoing>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d101      	bne.n	80038c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b09f      	sub	sp, #124	; 0x7c
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0be      	b.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d102      	bne.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003908:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	e001      	b.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e09d      	b.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ffb9 	bl	80038aa <LL_ADC_REG_IsConversionOngoing>
 8003938:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ffb3 	bl	80038aa <LL_ADC_REG_IsConversionOngoing>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d17f      	bne.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800394a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800394c:	2b00      	cmp	r3, #0
 800394e:	d17c      	bne.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a47      	ldr	r2, [pc, #284]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a46      	ldr	r2, [pc, #280]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003964:	4b45      	ldr	r3, [pc, #276]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003966:	e000      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003968:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800396a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d039      	beq.n	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	431a      	orrs	r2, r3
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10e      	bne.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800399a:	4836      	ldr	r0, [pc, #216]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800399c:	f7ff ff72 	bl	8003884 <LL_ADC_IsEnabled>
 80039a0:	4604      	mov	r4, r0
 80039a2:	4835      	ldr	r0, [pc, #212]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039a4:	f7ff ff6e 	bl	8003884 <LL_ADC_IsEnabled>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4323      	orrs	r3, r4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e008      	b.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80039b8:	4832      	ldr	r0, [pc, #200]	; (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80039ba:	f7ff ff63 	bl	8003884 <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d047      	beq.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	6811      	ldr	r1, [r2, #0]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	430a      	orrs	r2, r1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039e6:	e03a      	b.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10e      	bne.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003a08:	481a      	ldr	r0, [pc, #104]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a0a:	f7ff ff3b 	bl	8003884 <LL_ADC_IsEnabled>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4819      	ldr	r0, [pc, #100]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a12:	f7ff ff37 	bl	8003884 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4323      	orrs	r3, r4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e008      	b.n	8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a26:	4817      	ldr	r0, [pc, #92]	; (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a28:	f7ff ff2c 	bl	8003884 <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a48:	e009      	b.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a5c:	e000      	b.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	377c      	adds	r7, #124	; 0x7c
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd90      	pop	{r4, r7, pc}
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40022100 	.word	0x40022100
 8003a7c:	40022300 	.word	0x40022300
 8003a80:	58026300 	.word	0x58026300
 8003a84:	58026000 	.word	0x58026000
 8003a88:	fffff0e0 	.word	0xfffff0e0

08003a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <__NVIC_SetPriorityGrouping+0x40>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aba:	4a04      	ldr	r2, [pc, #16]	; (8003acc <__NVIC_SetPriorityGrouping+0x40>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	60d3      	str	r3, [r2, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000ed00 	.word	0xe000ed00
 8003ad0:	05fa0000 	.word	0x05fa0000

08003ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <__NVIC_GetPriorityGrouping+0x18>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	f003 0307 	and.w	r3, r3, #7
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db0b      	blt.n	8003b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	4907      	ldr	r1, [pc, #28]	; (8003b28 <__NVIC_EnableIRQ+0x38>)
 8003b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f202 	lsl.w	r2, r0, r2
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db0a      	blt.n	8003b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	490c      	ldr	r1, [pc, #48]	; (8003b78 <__NVIC_SetPriority+0x4c>)
 8003b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b54:	e00a      	b.n	8003b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4908      	ldr	r1, [pc, #32]	; (8003b7c <__NVIC_SetPriority+0x50>)
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3b04      	subs	r3, #4
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	440b      	add	r3, r1
 8003b6a:	761a      	strb	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf28      	it	cs
 8003b9e:	2304      	movcs	r3, #4
 8003ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d902      	bls.n	8003bb0 <NVIC_EncodePriority+0x30>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	e000      	b.n	8003bb2 <NVIC_EncodePriority+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd8:	4313      	orrs	r3, r2
         );
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff4c 	bl	8003a8c <__NVIC_SetPriorityGrouping>
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c0a:	f7ff ff63 	bl	8003ad4 <__NVIC_GetPriorityGrouping>
 8003c0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	6978      	ldr	r0, [r7, #20]
 8003c16:	f7ff ffb3 	bl	8003b80 <NVIC_EncodePriority>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff82 	bl	8003b2c <__NVIC_SetPriority>
}
 8003c28:	bf00      	nop
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff56 	bl	8003af0 <__NVIC_EnableIRQ>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0b4      	b.n	8003dc8 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <HAL_DFSDM_ChannelInit+0x184>)
 8003c60:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8003c62:	4b5c      	ldr	r3, [pc, #368]	; (8003dd4 <HAL_DFSDM_ChannelInit+0x188>)
 8003c64:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8003c66:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <HAL_DFSDM_ChannelInit+0x18c>)
 8003c68:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f8b4 	bl	8003ddc <DFSDM_GetChannelFromInstance>
 8003c74:	4603      	mov	r3, r0
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0a0      	b.n	8003dc8 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fcca 	bl	8001620 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d125      	bne.n	8003cea <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d108      	bne.n	8003cde <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003cf8:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d08:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003d0e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020f 	bic.w	r2, r2, #15
 8003d26:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003d4e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f002 0207 	and.w	r2, r2, #7
 8003d7a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f811 	bl	8003ddc <DFSDM_GetChannelFromInstance>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	24001158 	.word	0x24001158
 8003dd4:	2400115c 	.word	0x2400115c
 8003dd8:	40017000 	.word	0x40017000

08003ddc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <DFSDM_GetChannelFromInstance+0x7c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d102      	bne.n	8003df2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e02b      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <DFSDM_GetChannelFromInstance+0x80>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d102      	bne.n	8003e00 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e024      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <DFSDM_GetChannelFromInstance+0x84>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d102      	bne.n	8003e0e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e01d      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <DFSDM_GetChannelFromInstance+0x88>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d102      	bne.n	8003e1c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003e16:	2303      	movs	r3, #3
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e016      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <DFSDM_GetChannelFromInstance+0x8c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d102      	bne.n	8003e2a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003e24:	2304      	movs	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e00f      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <DFSDM_GetChannelFromInstance+0x90>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d102      	bne.n	8003e38 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8003e32:	2305      	movs	r3, #5
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e008      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <DFSDM_GetChannelFromInstance+0x94>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d102      	bne.n	8003e46 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003e40:	2306      	movs	r3, #6
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e001      	b.n	8003e4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8003e46:	2307      	movs	r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40017000 	.word	0x40017000
 8003e5c:	40017020 	.word	0x40017020
 8003e60:	40017040 	.word	0x40017040
 8003e64:	40017060 	.word	0x40017060
 8003e68:	40017080 	.word	0x40017080
 8003e6c:	400170a0 	.word	0x400170a0
 8003e70:	400170c0 	.word	0x400170c0

08003e74 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0cf      	b.n	8004026 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2223      	movs	r2, #35	; 0x23
 8003e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7fd fc41 	bl	8001720 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	4b64      	ldr	r3, [pc, #400]	; (8004030 <HAL_ETH_Init+0x1bc>)
 8003ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ea4:	4a62      	ldr	r2, [pc, #392]	; (8004030 <HAL_ETH_Init+0x1bc>)
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003eae:	4b60      	ldr	r3, [pc, #384]	; (8004030 <HAL_ETH_Init+0x1bc>)
 8003eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7a1b      	ldrb	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fe fd29 	bl	800291c <HAL_SYSCFG_ETHInterfaceSelect>
 8003eca:	e003      	b.n	8003ed4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ecc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003ed0:	f7fe fd24 	bl	800291c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003ed4:	4b57      	ldr	r3, [pc, #348]	; (8004034 <HAL_ETH_Init+0x1c0>)
 8003ed6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef0:	f7fe fcd8 	bl	80028a4 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ef6:	e011      	b.n	8003f1c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ef8:	f7fe fcd4 	bl	80028a4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f06:	d909      	bls.n	8003f1c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	22e0      	movs	r2, #224	; 0xe0
 8003f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e084      	b.n	8004026 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e4      	bne.n	8003ef8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f886 	bl	8004040 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f34:	f002 fcc0 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_ETH_Init+0x1c4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	0c9a      	lsrs	r2, r3, #18
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3a01      	subs	r2, #1
 8003f48:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fa71 	bl	8004434 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f5e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f6e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	22e0      	movs	r2, #224	; 0xe0
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e049      	b.n	8004026 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003f9e:	4b27      	ldr	r3, [pc, #156]	; (800403c <HAL_ETH_Init+0x1c8>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6952      	ldr	r2, [r2, #20]
 8003fa6:	0051      	lsls	r1, r2, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fb2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fad9 	bl	800456e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb1f 	bl	8004600 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	3305      	adds	r3, #5
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	061a      	lsls	r2, r3, #24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	3302      	adds	r3, #2
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004000:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800400e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004010:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2210      	movs	r2, #16
 8004020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
 8004034:	58000400 	.word	0x58000400
 8004038:	431bde83 	.word	0x431bde83
 800403c:	ffff8001 	.word	0xffff8001

08004040 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004050:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004058:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800405a:	f002 fc2d 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 800405e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d908      	bls.n	800407a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d804      	bhi.n	800407a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e027      	b.n	80040ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d908      	bls.n	8004094 <HAL_ETH_SetMDIOClockRange+0x54>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d204      	bcs.n	8004094 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e01a      	b.n	80040ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d303      	bcc.n	80040a4 <HAL_ETH_SetMDIOClockRange+0x64>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d911      	bls.n	80040c8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d908      	bls.n	80040be <HAL_ETH_SetMDIOClockRange+0x7e>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_ETH_SetMDIOClockRange+0xac>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d804      	bhi.n	80040be <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e005      	b.n	80040ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e000      	b.n	80040ca <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80040c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	01312cff 	.word	0x01312cff
 80040e0:	02160ebf 	.word	0x02160ebf
 80040e4:	03938700 	.word	0x03938700
 80040e8:	05f5e0ff 	.word	0x05f5e0ff
 80040ec:	08f0d17f 	.word	0x08f0d17f

080040f0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004102:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	791b      	ldrb	r3, [r3, #4]
 8004108:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800410a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	7b1b      	ldrb	r3, [r3, #12]
 8004110:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004112:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	7b5b      	ldrb	r3, [r3, #13]
 8004118:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800411a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	7b9b      	ldrb	r3, [r3, #14]
 8004120:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	7bdb      	ldrb	r3, [r3, #15]
 8004128:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800412a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	7c12      	ldrb	r2, [r2, #16]
 8004130:	2a00      	cmp	r2, #0
 8004132:	d102      	bne.n	800413a <ETH_SetMACConfig+0x4a>
 8004134:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004138:	e000      	b.n	800413c <ETH_SetMACConfig+0x4c>
 800413a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800413c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	7c52      	ldrb	r2, [r2, #17]
 8004142:	2a00      	cmp	r2, #0
 8004144:	d102      	bne.n	800414c <ETH_SetMACConfig+0x5c>
 8004146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800414a:	e000      	b.n	800414e <ETH_SetMACConfig+0x5e>
 800414c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800414e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	7c9b      	ldrb	r3, [r3, #18]
 8004154:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004156:	431a      	orrs	r2, r3
               macconf->Speed |
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800415c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	7f1b      	ldrb	r3, [r3, #28]
 8004168:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800416a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	7f5b      	ldrb	r3, [r3, #29]
 8004170:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004172:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	7f92      	ldrb	r2, [r2, #30]
 8004178:	2a00      	cmp	r2, #0
 800417a:	d102      	bne.n	8004182 <ETH_SetMACConfig+0x92>
 800417c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004180:	e000      	b.n	8004184 <ETH_SetMACConfig+0x94>
 8004182:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004184:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	7fdb      	ldrb	r3, [r3, #31]
 800418a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800418c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004194:	2a00      	cmp	r2, #0
 8004196:	d102      	bne.n	800419e <ETH_SetMACConfig+0xae>
 8004198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419c:	e000      	b.n	80041a0 <ETH_SetMACConfig+0xb0>
 800419e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80041a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80041a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80041b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b56      	ldr	r3, [pc, #344]	; (800431c <ETH_SetMACConfig+0x22c>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80041e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	d102      	bne.n	8004202 <ETH_SetMACConfig+0x112>
 80041fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004200:	e000      	b.n	8004204 <ETH_SetMACConfig+0x114>
 8004202:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004204:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4b42      	ldr	r3, [pc, #264]	; (8004320 <ETH_SetMACConfig+0x230>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	68f9      	ldr	r1, [r7, #12]
 800421e:	430b      	orrs	r3, r1
 8004220:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004228:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <ETH_SetMACConfig+0x234>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800424c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004252:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800425a:	2a00      	cmp	r2, #0
 800425c:	d101      	bne.n	8004262 <ETH_SetMACConfig+0x172>
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	e000      	b.n	8004264 <ETH_SetMACConfig+0x174>
 8004262:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004264:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004276:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800427a:	4013      	ands	r3, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	430b      	orrs	r3, r1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800428c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004294:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f023 0103 	bic.w	r1, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80042ba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d101      	bne.n	80042de <ETH_SetMACConfig+0x1ee>
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	e000      	b.n	80042e0 <ETH_SetMACConfig+0x1f0>
 80042de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80042e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80042e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80042ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80042f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004300:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	430a      	orrs	r2, r1
 800430c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	00048083 	.word	0x00048083
 8004320:	c0f88000 	.word	0xc0f88000
 8004324:	fffffef0 	.word	0xfffffef0

08004328 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <ETH_SetDMAConfig+0xf8>)
 800433e:	4013      	ands	r3, r2
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	6811      	ldr	r1, [r2, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	430b      	orrs	r3, r1
 800434a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800434e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	791b      	ldrb	r3, [r3, #4]
 8004354:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800435a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	7b1b      	ldrb	r3, [r3, #12]
 8004360:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <ETH_SetDMAConfig+0xfc>)
 8004372:	4013      	ands	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	430b      	orrs	r3, r1
 800437c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004380:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	7b5b      	ldrb	r3, [r3, #13]
 8004386:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004398:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <ETH_SetDMAConfig+0x100>)
 800439e:	4013      	ands	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	68f9      	ldr	r1, [r7, #12]
 80043a6:	430b      	orrs	r3, r1
 80043a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7d1b      	ldrb	r3, [r3, #20]
 80043b8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80043ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	7f5b      	ldrb	r3, [r3, #29]
 80043c0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <ETH_SetDMAConfig+0x104>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	430b      	orrs	r3, r1
 80043de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	7f1b      	ldrb	r3, [r3, #28]
 80043ea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <ETH_SetDMAConfig+0x108>)
 8004402:	4013      	ands	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	68f9      	ldr	r1, [r7, #12]
 800440a:	430b      	orrs	r3, r1
 800440c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004410:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	ffff87fd 	.word	0xffff87fd
 8004424:	ffff2ffe 	.word	0xffff2ffe
 8004428:	fffec000 	.word	0xfffec000
 800442c:	ffc0efef 	.word	0xffc0efef
 8004430:	7fc0ffff 	.word	0x7fc0ffff

08004434 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0a4      	sub	sp, #144	; 0x90
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004442:	2300      	movs	r3, #0
 8004444:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800445e:	2301      	movs	r3, #1
 8004460:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800447c:	2300      	movs	r3, #0
 800447e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004480:	2300      	movs	r3, #0
 8004482:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004486:	2300      	movs	r3, #0
 8004488:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800448c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004490:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004498:	2300      	movs	r3, #0
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80044ae:	2300      	movs	r3, #0
 80044b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80044b6:	2300      	movs	r3, #0
 80044b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80044cc:	2320      	movs	r3, #32
 80044ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80044de:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80044e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80044f0:	2302      	movs	r3, #2
 80044f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800450e:	2300      	movs	r3, #0
 8004510:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fde6 	bl	80040f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004524:	2301      	movs	r3, #1
 8004526:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004528:	2301      	movs	r3, #1
 800452a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004536:	2300      	movs	r3, #0
 8004538:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800453a:	2300      	movs	r3, #0
 800453c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800453e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004542:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004548:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800454c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004554:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fee1 	bl	8004328 <ETH_SetDMAConfig>
}
 8004566:	bf00      	nop
 8004568:	3790      	adds	r7, #144	; 0x90
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e01d      	b.n	80045b8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68d9      	ldr	r1, [r3, #12]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	3206      	adds	r2, #6
 80045ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d9de      	bls.n	800457c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045cc:	461a      	mov	r2, r3
 80045ce:	2303      	movs	r3, #3
 80045d0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e023      	b.n	8004656 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6919      	ldr	r1, [r3, #16]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	440b      	add	r3, r1
 800461e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	3212      	adds	r2, #18
 800464c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d9d8      	bls.n	800460e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004682:	461a      	mov	r2, r3
 8004684:	2303      	movs	r3, #3
 8004686:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004696:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046aa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046ca:	4b89      	ldr	r3, [pc, #548]	; (80048f0 <HAL_GPIO_Init+0x234>)
 80046cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046ce:	e194      	b.n	80049fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8186 	beq.w	80049f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d005      	beq.n	8004700 <HAL_GPIO_Init+0x44>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d130      	bne.n	8004762 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004736:	2201      	movs	r2, #1
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 0201 	and.w	r2, r3, #1
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b03      	cmp	r3, #3
 800476c:	d017      	beq.n	800479e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d123      	bne.n	80047f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	08da      	lsrs	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3208      	adds	r2, #8
 80047b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	220f      	movs	r2, #15
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	08da      	lsrs	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3208      	adds	r2, #8
 80047ec:	69b9      	ldr	r1, [r7, #24]
 80047ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2203      	movs	r2, #3
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0203 	and.w	r2, r3, #3
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80e0 	beq.w	80049f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004834:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_GPIO_Init+0x238>)
 8004836:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800483a:	4a2e      	ldr	r2, [pc, #184]	; (80048f4 <HAL_GPIO_Init+0x238>)
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004844:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_GPIO_Init+0x238>)
 8004846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004852:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_GPIO_Init+0x23c>)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3302      	adds	r3, #2
 800485a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	220f      	movs	r2, #15
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a20      	ldr	r2, [pc, #128]	; (80048fc <HAL_GPIO_Init+0x240>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d052      	beq.n	8004924 <HAL_GPIO_Init+0x268>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <HAL_GPIO_Init+0x244>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d031      	beq.n	80048ea <HAL_GPIO_Init+0x22e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <HAL_GPIO_Init+0x248>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02b      	beq.n	80048e6 <HAL_GPIO_Init+0x22a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <HAL_GPIO_Init+0x24c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d025      	beq.n	80048e2 <HAL_GPIO_Init+0x226>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_GPIO_Init+0x250>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <HAL_GPIO_Init+0x222>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_GPIO_Init+0x254>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0x21e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_GPIO_Init+0x258>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_GPIO_Init+0x21a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_GPIO_Init+0x25c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <HAL_GPIO_Init+0x216>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_GPIO_Init+0x260>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x212>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <HAL_GPIO_Init+0x264>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_GPIO_Init+0x20e>
 80048c6:	2309      	movs	r3, #9
 80048c8:	e02d      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048ca:	230a      	movs	r3, #10
 80048cc:	e02b      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048ce:	2308      	movs	r3, #8
 80048d0:	e029      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048d2:	2307      	movs	r3, #7
 80048d4:	e027      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048d6:	2306      	movs	r3, #6
 80048d8:	e025      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048da:	2305      	movs	r3, #5
 80048dc:	e023      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048de:	2304      	movs	r3, #4
 80048e0:	e021      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048e2:	2303      	movs	r3, #3
 80048e4:	e01f      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e01d      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e01b      	b.n	8004926 <HAL_GPIO_Init+0x26a>
 80048ee:	bf00      	nop
 80048f0:	58000080 	.word	0x58000080
 80048f4:	58024400 	.word	0x58024400
 80048f8:	58000400 	.word	0x58000400
 80048fc:	58020000 	.word	0x58020000
 8004900:	58020400 	.word	0x58020400
 8004904:	58020800 	.word	0x58020800
 8004908:	58020c00 	.word	0x58020c00
 800490c:	58021000 	.word	0x58021000
 8004910:	58021400 	.word	0x58021400
 8004914:	58021800 	.word	0x58021800
 8004918:	58021c00 	.word	0x58021c00
 800491c:	58022000 	.word	0x58022000
 8004920:	58022400 	.word	0x58022400
 8004924:	2300      	movs	r3, #0
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	f002 0203 	and.w	r2, r2, #3
 800492c:	0092      	lsls	r2, r2, #2
 800492e:	4093      	lsls	r3, r2
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004936:	4938      	ldr	r1, [pc, #224]	; (8004a18 <HAL_GPIO_Init+0x35c>)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	3302      	adds	r3, #2
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800496a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f47f ae63 	bne.w	80046d0 <HAL_GPIO_Init+0x14>
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	3724      	adds	r7, #36	; 0x24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	58000400 	.word	0x58000400

08004a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a2c:	787b      	ldrb	r3, [r7, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e07f      	b.n	8004b62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fefe 	bl	8001878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	e006      	b.n	8004ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d104      	bne.n	8004aea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_I2C_Init+0x11c>)
 8004af6:	430b      	orrs	r3, r1
 8004af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69d9      	ldr	r1, [r3, #28]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	02008000 	.word	0x02008000

08004b70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d138      	bne.n	8004bf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e032      	b.n	8004bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	; 0x24
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d139      	bne.n	8004c90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e033      	b.n	8004c92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	; 0x24
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e0bf      	b.n	8004e32 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc fe3e 	bl	8001948 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004ce2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6999      	ldr	r1, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cf8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6899      	ldr	r1, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <HAL_LTDC_Init+0x19c>)
 8004d14:	400b      	ands	r3, r1
 8004d16:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68d9      	ldr	r1, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <HAL_LTDC_Init+0x19c>)
 8004d42:	400b      	ands	r3, r1
 8004d44:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68d9      	ldr	r1, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6919      	ldr	r1, [r3, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <HAL_LTDC_Init+0x19c>)
 8004d70:	400b      	ands	r3, r1
 8004d72:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6919      	ldr	r1, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6959      	ldr	r1, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <HAL_LTDC_Init+0x19c>)
 8004d9e:	400b      	ands	r3, r1
 8004da0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6959      	ldr	r1, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0206 	orr.w	r2, r2, #6
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	f000f800 	.word	0xf000f800

08004e40 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_LTDC_ConfigLayer+0x1a>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e02c      	b.n	8004eb4 <HAL_LTDC_ConfigLayer+0x74>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2134      	movs	r1, #52	; 0x34
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f811 	bl	8004ebc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bdb0      	pop	{r4, r5, r7, pc}

08004ebc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	; 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed8:	4413      	add	r3, r2
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	01db      	lsls	r3, r3, #7
 8004ee8:	4413      	add	r3, r2
 8004eea:	3384      	adds	r3, #132	; 0x84
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	01d2      	lsls	r2, r2, #7
 8004ef8:	440a      	add	r2, r1
 8004efa:	3284      	adds	r2, #132	; 0x84
 8004efc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	01db      	lsls	r3, r3, #7
 8004f20:	440b      	add	r3, r1
 8004f22:	3384      	adds	r3, #132	; 0x84
 8004f24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f3a:	4413      	add	r3, r2
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	01db      	lsls	r3, r3, #7
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3384      	adds	r3, #132	; 0x84
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	4611      	mov	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	01d2      	lsls	r2, r2, #7
 8004f5a:	440a      	add	r2, r1
 8004f5c:	3284      	adds	r2, #132	; 0x84
 8004f5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f72:	4413      	add	r3, r2
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	01db      	lsls	r3, r3, #7
 8004f80:	440b      	add	r3, r1
 8004f82:	3384      	adds	r3, #132	; 0x84
 8004f84:	4619      	mov	r1, r3
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	01db      	lsls	r3, r3, #7
 8004f96:	4413      	add	r3, r2
 8004f98:	3384      	adds	r3, #132	; 0x84
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	01d2      	lsls	r2, r2, #7
 8004fa6:	440a      	add	r2, r1
 8004fa8:	3284      	adds	r2, #132	; 0x84
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	01db      	lsls	r3, r3, #7
 8004fba:	4413      	add	r3, r2
 8004fbc:	3384      	adds	r3, #132	; 0x84
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	01db      	lsls	r3, r3, #7
 8004fec:	4413      	add	r3, r2
 8004fee:	3384      	adds	r3, #132	; 0x84
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	01db      	lsls	r3, r3, #7
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3384      	adds	r3, #132	; 0x84
 8005000:	461a      	mov	r2, r3
 8005002:	2300      	movs	r3, #0
 8005004:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800500c:	461a      	mov	r2, r3
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	431a      	orrs	r2, r3
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4619      	mov	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	01db      	lsls	r3, r3, #7
 8005020:	440b      	add	r3, r1
 8005022:	3384      	adds	r3, #132	; 0x84
 8005024:	4619      	mov	r1, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	01db      	lsls	r3, r3, #7
 8005036:	4413      	add	r3, r2
 8005038:	3384      	adds	r3, #132	; 0x84
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	4611      	mov	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	01d2      	lsls	r2, r2, #7
 8005046:	440a      	add	r2, r1
 8005048:	3284      	adds	r2, #132	; 0x84
 800504a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800504e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	01db      	lsls	r3, r3, #7
 800505a:	4413      	add	r3, r2
 800505c:	3384      	adds	r3, #132	; 0x84
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	01db      	lsls	r3, r3, #7
 8005070:	4413      	add	r3, r2
 8005072:	3384      	adds	r3, #132	; 0x84
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	01db      	lsls	r3, r3, #7
 8005080:	440b      	add	r3, r1
 8005082:	3384      	adds	r3, #132	; 0x84
 8005084:	4619      	mov	r1, r3
 8005086:	4b58      	ldr	r3, [pc, #352]	; (80051e8 <LTDC_SetConfig+0x32c>)
 8005088:	4013      	ands	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	6809      	ldr	r1, [r1, #0]
 8005098:	4608      	mov	r0, r1
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	01c9      	lsls	r1, r1, #7
 800509e:	4401      	add	r1, r0
 80050a0:	3184      	adds	r1, #132	; 0x84
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	01db      	lsls	r3, r3, #7
 80050b0:	4413      	add	r3, r2
 80050b2:	3384      	adds	r3, #132	; 0x84
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	01db      	lsls	r3, r3, #7
 80050c0:	4413      	add	r3, r2
 80050c2:	3384      	adds	r3, #132	; 0x84
 80050c4:	461a      	mov	r2, r3
 80050c6:	2300      	movs	r3, #0
 80050c8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	01db      	lsls	r3, r3, #7
 80050d4:	4413      	add	r3, r2
 80050d6:	3384      	adds	r3, #132	; 0x84
 80050d8:	461a      	mov	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80050e8:	2304      	movs	r3, #4
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e01b      	b.n	8005126 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d102      	bne.n	80050fc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80050f6:	2303      	movs	r3, #3
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e014      	b.n	8005126 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d00b      	beq.n	800511c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005108:	2b02      	cmp	r3, #2
 800510a:	d007      	beq.n	800511c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005110:	2b03      	cmp	r3, #3
 8005112:	d003      	beq.n	800511c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005118:	2b07      	cmp	r3, #7
 800511a:	d102      	bne.n	8005122 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800511c:	2302      	movs	r3, #2
 800511e:	61fb      	str	r3, [r7, #28]
 8005120:	e001      	b.n	8005126 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005122:	2301      	movs	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	01db      	lsls	r3, r3, #7
 8005130:	4413      	add	r3, r2
 8005132:	3384      	adds	r3, #132	; 0x84
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4611      	mov	r1, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	01d2      	lsls	r2, r2, #7
 8005140:	440a      	add	r2, r1
 8005142:	3284      	adds	r2, #132	; 0x84
 8005144:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005148:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	041a      	lsls	r2, r3, #16
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1acb      	subs	r3, r1, r3
 8005160:	69f9      	ldr	r1, [r7, #28]
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	3307      	adds	r3, #7
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	6809      	ldr	r1, [r1, #0]
 800516c:	4608      	mov	r0, r1
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	01c9      	lsls	r1, r1, #7
 8005172:	4401      	add	r1, r0
 8005174:	3184      	adds	r1, #132	; 0x84
 8005176:	4313      	orrs	r3, r2
 8005178:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	01db      	lsls	r3, r3, #7
 8005184:	4413      	add	r3, r2
 8005186:	3384      	adds	r3, #132	; 0x84
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4619      	mov	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	01db      	lsls	r3, r3, #7
 8005194:	440b      	add	r3, r1
 8005196:	3384      	adds	r3, #132	; 0x84
 8005198:	4619      	mov	r1, r3
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <LTDC_SetConfig+0x330>)
 800519c:	4013      	ands	r3, r2
 800519e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	01db      	lsls	r3, r3, #7
 80051aa:	4413      	add	r3, r2
 80051ac:	3384      	adds	r3, #132	; 0x84
 80051ae:	461a      	mov	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	01db      	lsls	r3, r3, #7
 80051c0:	4413      	add	r3, r2
 80051c2:	3384      	adds	r3, #132	; 0x84
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	4611      	mov	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	01d2      	lsls	r2, r2, #7
 80051d0:	440a      	add	r2, r1
 80051d2:	3284      	adds	r2, #132	; 0x84
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6013      	str	r3, [r2, #0]
}
 80051da:	bf00      	nop
 80051dc:	3724      	adds	r7, #36	; 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	fffff8f8 	.word	0xfffff8f8
 80051ec:	fffff800 	.word	0xfffff800

080051f0 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e096      	b.n	8005338 <HAL_NOR_Init+0x148>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7fd f842 	bl	80022a8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3308      	adds	r3, #8
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f006 fa68 	bl	800b704 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	461a      	mov	r2, r3
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	f006 faf0 	bl	800b824 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6858      	ldr	r0, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	f006 fb37 	bl	800b8c4 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	6892      	ldr	r2, [r2, #8]
 800526a:	f041 0101 	orr.w	r1, r1, #1
 800526e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <HAL_NOR_Init+0x150>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e002      	b.n	8005288 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8005282:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_NOR_Init+0x150>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005288:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <HAL_NOR_Init+0x154>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <HAL_NOR_Init+0x154>)
 800528e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005292:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <HAL_NOR_Init+0xbc>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 80052a4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e012      	b.n	80052d2 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d103      	bne.n	80052bc <HAL_NOR_Init+0xcc>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 80052b4:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e00a      	b.n	80052d2 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d103      	bne.n	80052cc <HAL_NOR_Init+0xdc>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 80052c4:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e002      	b.n	80052d2 <HAL_NOR_Init+0xe2>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 80052cc:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80052d0:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10c      	bne.n	80052f4 <HAL_NOR_Init+0x104>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f006 fb25 	bl	800b934 <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2204      	movs	r2, #4
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f2:	e020      	b.n	8005336 <HAL_NOR_Init+0x146>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_NOR_Init+0x150>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d102      	bne.n	8005302 <HAL_NOR_Init+0x112>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	33aa      	adds	r3, #170	; 0xaa
 8005300:	e001      	b.n	8005306 <HAL_NOR_Init+0x116>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3355      	adds	r3, #85	; 0x55
 8005306:	2298      	movs	r2, #152	; 0x98
 8005308:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800530a:	f3bf 8f4f 	dsb	sy
}
 800530e:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_NOR_Init+0x150>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <HAL_NOR_Init+0x12e>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3326      	adds	r3, #38	; 0x26
 800531c:	e001      	b.n	8005322 <HAL_NOR_Init+0x132>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3313      	adds	r3, #19
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f80b 	bl	8005348 <HAL_NOR_ReturnToReadMode>
 8005332:	4603      	mov	r3, r0
 8005334:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8005336:	7cfb      	ldrb	r3, [r7, #19]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	2400117c 	.word	0x2400117c
 8005344:	52004000 	.word	0x52004000

08005348 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535a:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 800535c:	7abb      	ldrb	r3, [r7, #10]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d101      	bne.n	8005366 <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
 8005364:	e052      	b.n	800540c <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 8005366:	7abb      	ldrb	r3, [r7, #10]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d101      	bne.n	8005370 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e04d      	b.n	800540c <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8005370:	7abb      	ldrb	r3, [r7, #10]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d149      	bne.n	800540a <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_NOR_ReturnToReadMode+0x3c>
 8005380:	2302      	movs	r3, #2
 8005382:	e043      	b.n	800540c <HAL_NOR_ReturnToReadMode+0xc4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 800539c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e012      	b.n	80053ca <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d103      	bne.n	80053b4 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 80053ac:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e00a      	b.n	80053ca <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d103      	bne.n	80053c4 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 80053bc:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e002      	b.n	80053ca <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 80053c4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80053c8:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d105      	bne.n	80053de <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22f0      	movs	r2, #240	; 0xf0
 80053d6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053d8:	f3bf 8f4f 	dsb	sy
}
 80053dc:	e00b      	b.n	80053f6 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053ec:	f3bf 8f4f 	dsb	sy
}
 80053f0:	e001      	b.n	80053f6 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	7aba      	ldrb	r2, [r7, #10]
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	e000      	b.n	800540c <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541a:	b08f      	sub	sp, #60	; 0x3c
 800541c:	af0a      	add	r7, sp, #40	; 0x28
 800541e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e116      	b.n	8005658 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fc fce7 	bl	8001e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2203      	movs	r2, #3
 800544e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f006 fbad 	bl	800bbc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	687e      	ldr	r6, [r7, #4]
 8005476:	466d      	mov	r5, sp
 8005478:	f106 0410 	add.w	r4, r6, #16
 800547c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800547e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005488:	e885 0003 	stmia.w	r5, {r0, r1}
 800548c:	1d33      	adds	r3, r6, #4
 800548e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005490:	6838      	ldr	r0, [r7, #0]
 8005492:	f006 fb2b 	bl	800baec <USB_CoreInit>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0d7      	b.n	8005658 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f006 fb9b 	bl	800bbea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e04a      	b.n	8005550 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	333d      	adds	r3, #61	; 0x3d
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	333c      	adds	r3, #60	; 0x3c
 80054de:	7bfa      	ldrb	r2, [r7, #15]
 80054e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	b298      	uxth	r0, r3
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3356      	adds	r3, #86	; 0x56
 80054f6:	4602      	mov	r2, r0
 80054f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054fa:	7bfa      	ldrb	r2, [r7, #15]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	3340      	adds	r3, #64	; 0x40
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3344      	adds	r3, #68	; 0x44
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3348      	adds	r3, #72	; 0x48
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005536:	7bfa      	ldrb	r2, [r7, #15]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	334c      	adds	r3, #76	; 0x4c
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	3301      	adds	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	7bfa      	ldrb	r2, [r7, #15]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d3af      	bcc.n	80054ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
 800555e:	e044      	b.n	80055ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005560:	7bfa      	ldrb	r2, [r7, #15]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055a2:	7bfa      	ldrb	r2, [r7, #15]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055ce:	7bfa      	ldrb	r2, [r7, #15]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	3301      	adds	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3b5      	bcc.n	8005560 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	687e      	ldr	r6, [r7, #4]
 80055fc:	466d      	mov	r5, sp
 80055fe:	f106 0410 	add.w	r4, r6, #16
 8005602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800560a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800560e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005612:	1d33      	adds	r3, r6, #4
 8005614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005616:	6838      	ldr	r0, [r7, #0]
 8005618:	f006 fb34 	bl	800bc84 <USB_DevInit>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e014      	b.n	8005658 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b01      	cmp	r3, #1
 8005644:	d102      	bne.n	800564c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f80a 	bl	8005660 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f006 fcf2 	bl	800c03a <USB_DevDisconnect>

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005690:	4313      	orrs	r3, r2
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	10000003 	.word	0x10000003

080056a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	58024800 	.word	0x58024800

080056c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <HAL_PWREx_ConfigSupply+0x70>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d00a      	beq.n	80056f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_PWREx_ConfigSupply+0x70>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d001      	beq.n	80056ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e01f      	b.n	800572e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e01d      	b.n	800572e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <HAL_PWREx_ConfigSupply+0x70>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 0207 	bic.w	r2, r3, #7
 80056fa:	490f      	ldr	r1, [pc, #60]	; (8005738 <HAL_PWREx_ConfigSupply+0x70>)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005702:	f7fd f8cf 	bl	80028a4 <HAL_GetTick>
 8005706:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005708:	e009      	b.n	800571e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800570a:	f7fd f8cb 	bl	80028a4 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005718:	d901      	bls.n	800571e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e007      	b.n	800572e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_PWREx_ConfigSupply+0x70>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	d1ee      	bne.n	800570a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	58024800 	.word	0x58024800

0800573c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574a:	60d3      	str	r3, [r2, #12]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	58024800 	.word	0x58024800

0800575c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af02      	add	r7, sp, #8
 8005762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005764:	f7fd f89e 	bl	80028a4 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e05f      	b.n	8005834 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fc f9a7 	bl	8001ad4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005786:	f241 3188 	movw	r1, #5000	; 0x1388
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f85a 	bl	8005844 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	3b01      	subs	r3, #1
 80057a0:	021a      	lsls	r2, r3, #8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	2120      	movs	r1, #32
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f852 	bl	8005860 <QSPI_WaitFlagStateUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d135      	bne.n	8005832 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b1b      	ldr	r3, [pc, #108]	; (800583c <HAL_QSPI_Init+0xe0>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6852      	ldr	r2, [r2, #4]
 80057d4:	0611      	lsls	r1, r2, #24
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68d2      	ldr	r2, [r2, #12]
 80057da:	4311      	orrs	r1, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	69d2      	ldr	r2, [r2, #28]
 80057e0:	4311      	orrs	r1, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6a12      	ldr	r2, [r2, #32]
 80057e6:	4311      	orrs	r1, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_QSPI_Init+0xe4>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6912      	ldr	r2, [r2, #16]
 80057fe:	0411      	lsls	r1, r2, #16
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6952      	ldr	r2, [r2, #20]
 8005804:	4311      	orrs	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6992      	ldr	r2, [r2, #24]
 800580a:	4311      	orrs	r1, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	430b      	orrs	r3, r1
 8005812:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005832:	7afb      	ldrb	r3, [r7, #11]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00ffff2f 	.word	0x00ffff2f
 8005840:	ffe0f8fe 	.word	0xffe0f8fe

08005844 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005870:	e01a      	b.n	80058a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005878:	d016      	beq.n	80058a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fd f813 	bl	80028a4 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2204      	movs	r2, #4
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589c:	f043 0201 	orr.w	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e00e      	b.n	80058c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1d6      	bne.n	8005872 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	; 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f000 bc48 	b.w	8006174 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8088 	beq.w	8005a02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058fc:	4b96      	ldr	r3, [pc, #600]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2b10      	cmp	r3, #16
 8005906:	d007      	beq.n	8005918 <HAL_RCC_OscConfig+0x48>
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	2b18      	cmp	r3, #24
 800590c:	d111      	bne.n	8005932 <HAL_RCC_OscConfig+0x62>
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	4b8f      	ldr	r3, [pc, #572]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d06d      	beq.n	8005a00 <HAL_RCC_OscConfig+0x130>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d169      	bne.n	8005a00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f000 bc21 	b.w	8006174 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x7a>
 800593c:	4b86      	ldr	r3, [pc, #536]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a85      	ldr	r2, [pc, #532]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e02e      	b.n	80059a8 <HAL_RCC_OscConfig+0xd8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x9c>
 8005952:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a80      	ldr	r2, [pc, #512]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b7e      	ldr	r3, [pc, #504]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a7d      	ldr	r2, [pc, #500]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e01d      	b.n	80059a8 <HAL_RCC_OscConfig+0xd8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0xc0>
 8005976:	4b78      	ldr	r3, [pc, #480]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a77      	ldr	r2, [pc, #476]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b75      	ldr	r3, [pc, #468]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a74      	ldr	r2, [pc, #464]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0xd8>
 8005990:	4b71      	ldr	r3, [pc, #452]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a70      	ldr	r2, [pc, #448]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b6e      	ldr	r3, [pc, #440]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a6d      	ldr	r2, [pc, #436]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 80059a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fc ff78 	bl	80028a4 <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fc ff74 	bl	80028a4 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	; 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e3d4      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ca:	4b63      	ldr	r3, [pc, #396]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0xe8>
 80059d6:	e014      	b.n	8005a02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fc ff64 	bl	80028a4 <HAL_GetTick>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fc ff60 	bl	80028a4 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e3c0      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059f2:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x110>
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80ca 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a10:	4b51      	ldr	r3, [pc, #324]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_RCC_OscConfig+0x166>
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	2b18      	cmp	r3, #24
 8005a2a:	d156      	bne.n	8005ada <HAL_RCC_OscConfig+0x20a>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d151      	bne.n	8005ada <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a36:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCC_OscConfig+0x17e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e392      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 0219 	bic.w	r2, r3, #25
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	493f      	ldr	r1, [pc, #252]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fc ff20 	bl	80028a4 <HAL_GetTick>
 8005a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a68:	f7fc ff1c 	bl	80028a4 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e37c      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a86:	f7fc ff3d 	bl	8002904 <HAL_GetREVID>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d817      	bhi.n	8005ac4 <HAL_RCC_OscConfig+0x1f4>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d108      	bne.n	8005aae <HAL_RCC_OscConfig+0x1de>
 8005a9c:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005aa4:	4a2c      	ldr	r2, [pc, #176]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aaa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aac:	e07a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aae:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	4926      	ldr	r1, [pc, #152]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac2:	e06f      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	4921      	ldr	r1, [pc, #132]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad8:	e064      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d047      	beq.n	8005b72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 0219 	bic.w	r2, r3, #25
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	491a      	ldr	r1, [pc, #104]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fc fed6 	bl	80028a4 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afc:	f7fc fed2 	bl	80028a4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e332      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1a:	f7fc fef3 	bl	8002904 <HAL_GetREVID>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d819      	bhi.n	8005b5c <HAL_RCC_OscConfig+0x28c>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d108      	bne.n	8005b42 <HAL_RCC_OscConfig+0x272>
 8005b30:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b38:	4a07      	ldr	r2, [pc, #28]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e030      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2d4>
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	031b      	lsls	r3, r3, #12
 8005b50:	4901      	ldr	r1, [pc, #4]	; (8005b58 <HAL_RCC_OscConfig+0x288>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	604b      	str	r3, [r1, #4]
 8005b56:	e025      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2d4>
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	4b9a      	ldr	r3, [pc, #616]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	061b      	lsls	r3, r3, #24
 8005b6a:	4997      	ldr	r1, [pc, #604]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	604b      	str	r3, [r1, #4]
 8005b70:	e018      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b72:	4b95      	ldr	r3, [pc, #596]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a94      	ldr	r2, [pc, #592]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fc fe91 	bl	80028a4 <HAL_GetTick>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b86:	f7fc fe8d 	bl	80028a4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e2ed      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b98:	4b8b      	ldr	r3, [pc, #556]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80a9 	beq.w	8005d04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb2:	4b85      	ldr	r3, [pc, #532]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bbc:	4b82      	ldr	r3, [pc, #520]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d007      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x308>
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b18      	cmp	r3, #24
 8005bcc:	d13a      	bne.n	8005c44 <HAL_RCC_OscConfig+0x374>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d135      	bne.n	8005c44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bd8:	4b7b      	ldr	r3, [pc, #492]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x320>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e2c1      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bf0:	f7fc fe88 	bl	8002904 <HAL_GetREVID>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d817      	bhi.n	8005c2e <HAL_RCC_OscConfig+0x35e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d108      	bne.n	8005c18 <HAL_RCC_OscConfig+0x348>
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c0e:	4a6e      	ldr	r2, [pc, #440]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c16:	e075      	b.n	8005d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c18:	4b6b      	ldr	r3, [pc, #428]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	069b      	lsls	r3, r3, #26
 8005c26:	4968      	ldr	r1, [pc, #416]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c2c:	e06a      	b.n	8005d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c2e:	4b66      	ldr	r3, [pc, #408]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	4962      	ldr	r1, [pc, #392]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c42:	e05f      	b.n	8005d04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d042      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c4c:	4b5e      	ldr	r3, [pc, #376]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5d      	ldr	r2, [pc, #372]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fc fe24 	bl	80028a4 <HAL_GetTick>
 8005c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c60:	f7fc fe20 	bl	80028a4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e280      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c72:	4b55      	ldr	r3, [pc, #340]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c7e:	f7fc fe41 	bl	8002904 <HAL_GetREVID>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d817      	bhi.n	8005cbc <HAL_RCC_OscConfig+0x3ec>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d108      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3d6>
 8005c94:	4b4c      	ldr	r3, [pc, #304]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c9c:	4a4a      	ldr	r2, [pc, #296]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca2:	6053      	str	r3, [r2, #4]
 8005ca4:	e02e      	b.n	8005d04 <HAL_RCC_OscConfig+0x434>
 8005ca6:	4b48      	ldr	r3, [pc, #288]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	069b      	lsls	r3, r3, #26
 8005cb4:	4944      	ldr	r1, [pc, #272]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]
 8005cba:	e023      	b.n	8005d04 <HAL_RCC_OscConfig+0x434>
 8005cbc:	4b42      	ldr	r3, [pc, #264]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	493f      	ldr	r1, [pc, #252]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60cb      	str	r3, [r1, #12]
 8005cd0:	e018      	b.n	8005d04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005cd2:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3c      	ldr	r2, [pc, #240]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fc fde1 	bl	80028a4 <HAL_GetTick>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ce6:	f7fc fddd 	bl	80028a4 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e23d      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cf8:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d036      	beq.n	8005d7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d019      	beq.n	8005d4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d18:	4b2b      	ldr	r3, [pc, #172]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fc fdbe 	bl	80028a4 <HAL_GetTick>
 8005d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fc fdba 	bl	80028a4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e21a      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d3e:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x45c>
 8005d4a:	e018      	b.n	8005d7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4c:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d50:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fc fda4 	bl	80028a4 <HAL_GetTick>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d60:	f7fc fda0 	bl	80028a4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e200      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d039      	beq.n	8005dfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01c      	beq.n	8005dcc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d92:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a0c      	ldr	r2, [pc, #48]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d9e:	f7fc fd81 	bl	80028a4 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005da6:	f7fc fd7d 	bl	80028a4 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e1dd      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005db8:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f0      	beq.n	8005da6 <HAL_RCC_OscConfig+0x4d6>
 8005dc4:	e01b      	b.n	8005dfe <HAL_RCC_OscConfig+0x52e>
 8005dc6:	bf00      	nop
 8005dc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dcc:	4b9b      	ldr	r3, [pc, #620]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a9a      	ldr	r2, [pc, #616]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dd8:	f7fc fd64 	bl	80028a4 <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005de0:	f7fc fd60 	bl	80028a4 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e1c0      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005df2:	4b92      	ldr	r3, [pc, #584]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8081 	beq.w	8005f0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e0c:	4b8c      	ldr	r3, [pc, #560]	; (8006040 <HAL_RCC_OscConfig+0x770>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a8b      	ldr	r2, [pc, #556]	; (8006040 <HAL_RCC_OscConfig+0x770>)
 8005e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e18:	f7fc fd44 	bl	80028a4 <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e20:	f7fc fd40 	bl	80028a4 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	; 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e1a0      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e32:	4b83      	ldr	r3, [pc, #524]	; (8006040 <HAL_RCC_OscConfig+0x770>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_OscConfig+0x584>
 8005e46:	4b7d      	ldr	r3, [pc, #500]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a7c      	ldr	r2, [pc, #496]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
 8005e52:	e02d      	b.n	8005eb0 <HAL_RCC_OscConfig+0x5e0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCC_OscConfig+0x5a6>
 8005e5c:	4b77      	ldr	r3, [pc, #476]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	4a76      	ldr	r2, [pc, #472]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	6713      	str	r3, [r2, #112]	; 0x70
 8005e68:	4b74      	ldr	r3, [pc, #464]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a73      	ldr	r2, [pc, #460]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	e01c      	b.n	8005eb0 <HAL_RCC_OscConfig+0x5e0>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x5c8>
 8005e7e:	4b6f      	ldr	r3, [pc, #444]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a6e      	ldr	r2, [pc, #440]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8a:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	4a6b      	ldr	r2, [pc, #428]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	6713      	str	r3, [r2, #112]	; 0x70
 8005e96:	e00b      	b.n	8005eb0 <HAL_RCC_OscConfig+0x5e0>
 8005e98:	4b68      	ldr	r3, [pc, #416]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9c:	4a67      	ldr	r2, [pc, #412]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea4:	4b65      	ldr	r3, [pc, #404]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	4a64      	ldr	r2, [pc, #400]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005eaa:	f023 0304 	bic.w	r3, r3, #4
 8005eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fc fcf4 	bl	80028a4 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ebe:	e00a      	b.n	8005ed6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec0:	f7fc fcf0 	bl	80028a4 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e14e      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0ee      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x5f0>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fc fcde 	bl	80028a4 <HAL_GetTick>
 8005ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f7fc fcda 	bl	80028a4 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e138      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f02:	4b4e      	ldr	r3, [pc, #312]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ee      	bne.n	8005eec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 812d 	beq.w	8006172 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f18:	4b48      	ldr	r3, [pc, #288]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f20:	2b18      	cmp	r3, #24
 8005f22:	f000 80bd 	beq.w	80060a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	f040 809e 	bne.w	800606c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a41      	ldr	r2, [pc, #260]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fc fcb2 	bl	80028a4 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f44:	f7fc fcae 	bl	80028a4 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e10e      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f56:	4b39      	ldr	r3, [pc, #228]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f62:	4b36      	ldr	r3, [pc, #216]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f66:	4b37      	ldr	r3, [pc, #220]	; (8006044 <HAL_RCC_OscConfig+0x774>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f72:	0112      	lsls	r2, r2, #4
 8005f74:	430a      	orrs	r2, r1
 8005f76:	4931      	ldr	r1, [pc, #196]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	3b01      	subs	r3, #1
 8005f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	025b      	lsls	r3, r3, #9
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	3b01      	subs	r3, #1
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	061b      	lsls	r3, r3, #24
 8005fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fac:	4923      	ldr	r1, [pc, #140]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005fb2:	4b22      	ldr	r3, [pc, #136]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc2:	4b21      	ldr	r3, [pc, #132]	; (8006048 <HAL_RCC_OscConfig+0x778>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fca:	00d2      	lsls	r2, r2, #3
 8005fcc:	491b      	ldr	r1, [pc, #108]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fd2:	4b1a      	ldr	r3, [pc, #104]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f023 020c 	bic.w	r2, r3, #12
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4917      	ldr	r1, [pc, #92]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f023 0202 	bic.w	r2, r3, #2
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff0:	4912      	ldr	r1, [pc, #72]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ff6:	4b11      	ldr	r3, [pc, #68]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a10      	ldr	r2, [pc, #64]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	4a0d      	ldr	r2, [pc, #52]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8006008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800600c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a0a      	ldr	r2, [pc, #40]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8006014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a04      	ldr	r2, [pc, #16]	; (800603c <HAL_RCC_OscConfig+0x76c>)
 800602c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fc fc37 	bl	80028a4 <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006038:	e011      	b.n	800605e <HAL_RCC_OscConfig+0x78e>
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
 8006040:	58024800 	.word	0x58024800
 8006044:	fffffc0c 	.word	0xfffffc0c
 8006048:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800604c:	f7fc fc2a 	bl	80028a4 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e08a      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800605e:	4b47      	ldr	r3, [pc, #284]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x77c>
 800606a:	e082      	b.n	8006172 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606c:	4b43      	ldr	r3, [pc, #268]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc fc14 	bl	80028a4 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006080:	f7fc fc10 	bl	80028a4 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e070      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006092:	4b3a      	ldr	r3, [pc, #232]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x7b0>
 800609e:	e068      	b.n	8006172 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060a0:	4b36      	ldr	r3, [pc, #216]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060a6:	4b35      	ldr	r3, [pc, #212]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d031      	beq.n	8006118 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f003 0203 	and.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060be:	429a      	cmp	r2, r3
 80060c0:	d12a      	bne.n	8006118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d122      	bne.n	8006118 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060de:	429a      	cmp	r2, r3
 80060e0:	d11a      	bne.n	8006118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	0a5b      	lsrs	r3, r3, #9
 80060e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d111      	bne.n	8006118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d108      	bne.n	8006118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	0e1b      	lsrs	r3, r3, #24
 800610a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e02b      	b.n	8006174 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800611c:	4b17      	ldr	r3, [pc, #92]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006126:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d01f      	beq.n	8006172 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	4a11      	ldr	r2, [pc, #68]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800613e:	f7fc fbb1 	bl	80028a4 <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006144:	bf00      	nop
 8006146:	f7fc fbad 	bl	80028a4 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	4293      	cmp	r3, r2
 8006150:	d0f9      	beq.n	8006146 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_RCC_OscConfig+0x8b0>)
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800615e:	00d2      	lsls	r2, r2, #3
 8006160:	4906      	ldr	r1, [pc, #24]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006162:	4313      	orrs	r3, r2
 8006164:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4a04      	ldr	r2, [pc, #16]	; (800617c <HAL_RCC_OscConfig+0x8ac>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3730      	adds	r7, #48	; 0x30
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	ffff0007 	.word	0xffff0007

08006184 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e19c      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006198:	4b8a      	ldr	r3, [pc, #552]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d910      	bls.n	80061c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b87      	ldr	r3, [pc, #540]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 020f 	bic.w	r2, r3, #15
 80061ae:	4985      	ldr	r1, [pc, #532]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b6:	4b83      	ldr	r3, [pc, #524]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d001      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e184      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d010      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	4b7b      	ldr	r3, [pc, #492]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d908      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061e4:	4b78      	ldr	r3, [pc, #480]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	4975      	ldr	r1, [pc, #468]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	4b70      	ldr	r3, [pc, #448]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800620e:	429a      	cmp	r2, r3
 8006210:	d908      	bls.n	8006224 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006212:	4b6d      	ldr	r3, [pc, #436]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	496a      	ldr	r1, [pc, #424]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006220:	4313      	orrs	r3, r2
 8006222:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	4b64      	ldr	r3, [pc, #400]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800623c:	429a      	cmp	r2, r3
 800623e:	d908      	bls.n	8006252 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006240:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	495e      	ldr	r1, [pc, #376]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800624e:	4313      	orrs	r3, r2
 8006250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	4b59      	ldr	r3, [pc, #356]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626a:	429a      	cmp	r2, r3
 800626c:	d908      	bls.n	8006280 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800626e:	4b56      	ldr	r3, [pc, #344]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4953      	ldr	r1, [pc, #332]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800627c:	4313      	orrs	r3, r2
 800627e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d010      	beq.n	80062ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	4b4d      	ldr	r3, [pc, #308]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	429a      	cmp	r2, r3
 800629a:	d908      	bls.n	80062ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629c:	4b4a      	ldr	r3, [pc, #296]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f023 020f 	bic.w	r2, r3, #15
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4947      	ldr	r1, [pc, #284]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d055      	beq.n	8006366 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062ba:	4b43      	ldr	r3, [pc, #268]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4940      	ldr	r1, [pc, #256]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d107      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062d4:	4b3c      	ldr	r3, [pc, #240]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d121      	bne.n	8006324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0f6      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d107      	bne.n	80062fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062ec:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d115      	bne.n	8006324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0ea      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d107      	bne.n	8006314 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006304:	4b30      	ldr	r3, [pc, #192]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0de      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006314:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0d6      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006324:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f023 0207 	bic.w	r2, r3, #7
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4925      	ldr	r1, [pc, #148]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006332:	4313      	orrs	r3, r2
 8006334:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006336:	f7fc fab5 	bl	80028a4 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633c:	e00a      	b.n	8006354 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800633e:	f7fc fab1 	bl	80028a4 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f241 3288 	movw	r2, #5000	; 0x1388
 800634c:	4293      	cmp	r3, r2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e0be      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006354:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	429a      	cmp	r2, r3
 8006364:	d1eb      	bne.n	800633e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d010      	beq.n	8006394 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	429a      	cmp	r2, r3
 8006380:	d208      	bcs.n	8006394 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f023 020f 	bic.w	r2, r3, #15
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	490e      	ldr	r1, [pc, #56]	; (80063c8 <HAL_RCC_ClockConfig+0x244>)
 8006390:	4313      	orrs	r3, r2
 8006392:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d214      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 020f 	bic.w	r2, r3, #15
 80063aa:	4906      	ldr	r1, [pc, #24]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b2:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_RCC_ClockConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d005      	beq.n	80063cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e086      	b.n	80064d2 <HAL_RCC_ClockConfig+0x34e>
 80063c4:	52002000 	.word	0x52002000
 80063c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d010      	beq.n	80063fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	4b3f      	ldr	r3, [pc, #252]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d208      	bcs.n	80063fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063e8:	4b3c      	ldr	r3, [pc, #240]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	4939      	ldr	r1, [pc, #228]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d010      	beq.n	8006428 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	4b34      	ldr	r3, [pc, #208]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006412:	429a      	cmp	r2, r3
 8006414:	d208      	bcs.n	8006428 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006416:	4b31      	ldr	r3, [pc, #196]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	492e      	ldr	r1, [pc, #184]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006424:	4313      	orrs	r3, r2
 8006426:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d010      	beq.n	8006456 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	4b28      	ldr	r3, [pc, #160]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006440:	429a      	cmp	r2, r3
 8006442:	d208      	bcs.n	8006456 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	4922      	ldr	r1, [pc, #136]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006452:	4313      	orrs	r3, r2
 8006454:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d010      	beq.n	8006484 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800646e:	429a      	cmp	r2, r3
 8006470:	d208      	bcs.n	8006484 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006472:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	4917      	ldr	r1, [pc, #92]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 8006480:	4313      	orrs	r3, r2
 8006482:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006484:	f000 f89e 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	4912      	ldr	r1, [pc, #72]	; (80064e0 <HAL_RCC_ClockConfig+0x35c>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
 80064a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064a2:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <HAL_RCC_ClockConfig+0x358>)
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <HAL_RCC_ClockConfig+0x35c>)
 80064ac:	5cd3      	ldrb	r3, [r2, r3]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <HAL_RCC_ClockConfig+0x360>)
 80064ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064bc:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <HAL_RCC_ClockConfig+0x364>)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80064c2:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <HAL_RCC_ClockConfig+0x368>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fb ffc4 	bl	8002454 <HAL_InitTick>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	58024400 	.word	0x58024400
 80064e0:	0800fcd8 	.word	0x0800fcd8
 80064e4:	24000004 	.word	0x24000004
 80064e8:	24000000 	.word	0x24000000
 80064ec:	24000008 	.word	0x24000008

080064f0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d12a      	bne.n	8006558 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006502:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 8006504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006508:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006512:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 8006514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006526:	2302      	movs	r3, #2
 8006528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652a:	2303      	movs	r3, #3
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652e:	2300      	movs	r3, #0
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006536:	f107 031c 	add.w	r3, r7, #28
 800653a:	4619      	mov	r1, r3
 800653c:	481f      	ldr	r0, [pc, #124]	; (80065bc <HAL_RCC_MCOConfig+0xcc>)
 800653e:	f7fe f8bd 	bl	80046bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	430b      	orrs	r3, r1
 8006550:	4919      	ldr	r1, [pc, #100]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 8006552:	4313      	orrs	r3, r2
 8006554:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006556:	e02a      	b.n	80065ae <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655e:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 8006560:	f043 0304 	orr.w	r3, r3, #4
 8006564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 800656a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800657a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657c:	2302      	movs	r3, #2
 800657e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006580:	2303      	movs	r3, #3
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006584:	2300      	movs	r3, #0
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006588:	2300      	movs	r3, #0
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800658c:	f107 031c 	add.w	r3, r7, #28
 8006590:	4619      	mov	r1, r3
 8006592:	480b      	ldr	r0, [pc, #44]	; (80065c0 <HAL_RCC_MCOConfig+0xd0>)
 8006594:	f7fe f892 	bl	80046bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	01d9      	lsls	r1, r3, #7
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	430b      	orrs	r3, r1
 80065a8:	4903      	ldr	r1, [pc, #12]	; (80065b8 <HAL_RCC_MCOConfig+0xc8>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	610b      	str	r3, [r1, #16]
}
 80065ae:	bf00      	nop
 80065b0:	3730      	adds	r7, #48	; 0x30
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	58024400 	.word	0x58024400
 80065bc:	58020000 	.word	0x58020000
 80065c0:	58020800 	.word	0x58020800

080065c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b089      	sub	sp, #36	; 0x24
 80065c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065ca:	4bb3      	ldr	r3, [pc, #716]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065d2:	2b18      	cmp	r3, #24
 80065d4:	f200 8155 	bhi.w	8006882 <HAL_RCC_GetSysClockFreq+0x2be>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	08006645 	.word	0x08006645
 80065e4:	08006883 	.word	0x08006883
 80065e8:	08006883 	.word	0x08006883
 80065ec:	08006883 	.word	0x08006883
 80065f0:	08006883 	.word	0x08006883
 80065f4:	08006883 	.word	0x08006883
 80065f8:	08006883 	.word	0x08006883
 80065fc:	08006883 	.word	0x08006883
 8006600:	0800666b 	.word	0x0800666b
 8006604:	08006883 	.word	0x08006883
 8006608:	08006883 	.word	0x08006883
 800660c:	08006883 	.word	0x08006883
 8006610:	08006883 	.word	0x08006883
 8006614:	08006883 	.word	0x08006883
 8006618:	08006883 	.word	0x08006883
 800661c:	08006883 	.word	0x08006883
 8006620:	08006671 	.word	0x08006671
 8006624:	08006883 	.word	0x08006883
 8006628:	08006883 	.word	0x08006883
 800662c:	08006883 	.word	0x08006883
 8006630:	08006883 	.word	0x08006883
 8006634:	08006883 	.word	0x08006883
 8006638:	08006883 	.word	0x08006883
 800663c:	08006883 	.word	0x08006883
 8006640:	08006677 	.word	0x08006677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006644:	4b94      	ldr	r3, [pc, #592]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006650:	4b91      	ldr	r3, [pc, #580]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	08db      	lsrs	r3, r3, #3
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	4a90      	ldr	r2, [pc, #576]	; (800689c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
 8006660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006662:	e111      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006664:	4b8d      	ldr	r3, [pc, #564]	; (800689c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006666:	61bb      	str	r3, [r7, #24]
      break;
 8006668:	e10e      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800666a:	4b8d      	ldr	r3, [pc, #564]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800666c:	61bb      	str	r3, [r7, #24]
      break;
 800666e:	e10b      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006670:	4b8c      	ldr	r3, [pc, #560]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006672:	61bb      	str	r3, [r7, #24]
      break;
 8006674:	e108      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006676:	4b88      	ldr	r3, [pc, #544]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006680:	4b85      	ldr	r3, [pc, #532]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800668a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800668c:	4b82      	ldr	r3, [pc, #520]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006696:	4b80      	ldr	r3, [pc, #512]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	08db      	lsrs	r3, r3, #3
 800669c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80e1 	beq.w	800687c <HAL_RCC_GetSysClockFreq+0x2b8>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	f000 8083 	beq.w	80067c8 <HAL_RCC_GetSysClockFreq+0x204>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	f200 80a1 	bhi.w	800680c <HAL_RCC_GetSysClockFreq+0x248>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_RCC_GetSysClockFreq+0x114>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d056      	beq.n	8006784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066d6:	e099      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d8:	4b6f      	ldr	r3, [pc, #444]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02d      	beq.n	8006740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e4:	4b6c      	ldr	r3, [pc, #432]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	08db      	lsrs	r3, r3, #3
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	4a6b      	ldr	r2, [pc, #428]	; (800689c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
 80066f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670e:	4b62      	ldr	r3, [pc, #392]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006722:	eddf 5a61 	vldr	s11, [pc, #388]	; 80068a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800673e:	e087      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80068ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800674e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006752:	4b51      	ldr	r3, [pc, #324]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006762:	ed97 6a02 	vldr	s12, [r7, #8]
 8006766:	eddf 5a50 	vldr	s11, [pc, #320]	; 80068a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800676a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006782:	e065      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006796:	4b40      	ldr	r3, [pc, #256]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80068a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067c6:	e043      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80068b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067da:	4b2f      	ldr	r3, [pc, #188]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80068a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800680a:	e021      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80068a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800684e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	0a5b      	lsrs	r3, r3, #9
 8006856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685a:	3301      	adds	r3, #1
 800685c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006868:	edd7 6a07 	vldr	s13, [r7, #28]
 800686c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006874:	ee17 3a90 	vmov	r3, s15
 8006878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800687a:	e005      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
      break;
 8006880:	e002      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006882:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006884:	61bb      	str	r3, [r7, #24]
      break;
 8006886:	bf00      	nop
  }

  return sysclockfreq;
 8006888:	69bb      	ldr	r3, [r7, #24]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3724      	adds	r7, #36	; 0x24
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	58024400 	.word	0x58024400
 800689c:	03d09000 	.word	0x03d09000
 80068a0:	003d0900 	.word	0x003d0900
 80068a4:	017d7840 	.word	0x017d7840
 80068a8:	46000000 	.word	0x46000000
 80068ac:	4c742400 	.word	0x4c742400
 80068b0:	4a742400 	.word	0x4a742400
 80068b4:	4bbebc20 	.word	0x4bbebc20

080068b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80068be:	f7ff fe81 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <HAL_RCC_GetHCLKFreq+0x50>)
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	490f      	ldr	r1, [pc, #60]	; (800690c <HAL_RCC_GetHCLKFreq+0x54>)
 80068d0:	5ccb      	ldrb	r3, [r1, r3]
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	fa22 f303 	lsr.w	r3, r2, r3
 80068da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <HAL_RCC_GetHCLKFreq+0x50>)
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	4a09      	ldr	r2, [pc, #36]	; (800690c <HAL_RCC_GetHCLKFreq+0x54>)
 80068e6:	5cd3      	ldrb	r3, [r2, r3]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	fa22 f303 	lsr.w	r3, r2, r3
 80068f2:	4a07      	ldr	r2, [pc, #28]	; (8006910 <HAL_RCC_GetHCLKFreq+0x58>)
 80068f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068f6:	4a07      	ldr	r2, [pc, #28]	; (8006914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <HAL_RCC_GetHCLKFreq+0x58>)
 80068fe:	681b      	ldr	r3, [r3, #0]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	58024400 	.word	0x58024400
 800690c:	0800fcd8 	.word	0x0800fcd8
 8006910:	24000004 	.word	0x24000004
 8006914:	24000000 	.word	0x24000000

08006918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800691c:	f7ff ffcc 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 8006920:	4602      	mov	r2, r0
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	4904      	ldr	r1, [pc, #16]	; (8006940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800692e:	5ccb      	ldrb	r3, [r1, r3]
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006938:	4618      	mov	r0, r3
 800693a:	bd80      	pop	{r7, pc}
 800693c:	58024400 	.word	0x58024400
 8006940:	0800fcd8 	.word	0x0800fcd8

08006944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006948:	f7ff ffb6 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 800694c:	4602      	mov	r2, r0
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	4904      	ldr	r1, [pc, #16]	; (800696c <HAL_RCC_GetPCLK2Freq+0x28>)
 800695a:	5ccb      	ldrb	r3, [r1, r3]
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	58024400 	.word	0x58024400
 800696c:	0800fcd8 	.word	0x0800fcd8

08006970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	223f      	movs	r2, #63	; 0x3f
 800697e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0207 	and.w	r2, r3, #7
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800698c:	4b17      	ldr	r3, [pc, #92]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006998:	4b14      	ldr	r3, [pc, #80]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80069a4:	4b11      	ldr	r3, [pc, #68]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80069b0:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80069c8:	4b08      	ldr	r3, [pc, #32]	; (80069ec <HAL_RCC_GetClockConfig+0x7c>)
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_RCC_GetClockConfig+0x80>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	601a      	str	r2, [r3, #0]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	58024400 	.word	0x58024400
 80069f0:	52002000 	.word	0x52002000

080069f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f8:	b0ca      	sub	sp, #296	; 0x128
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a06:	2300      	movs	r3, #0
 8006a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006a18:	2500      	movs	r5, #0
 8006a1a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a1e:	d049      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a2a:	d02f      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a30:	d828      	bhi.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a36:	d01a      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a3c:	d822      	bhi.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a46:	d007      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a48:	e01c      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4a:	4bb8      	ldr	r3, [pc, #736]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4ab7      	ldr	r2, [pc, #732]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a56:	e01a      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	2102      	movs	r1, #2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f002 fb61 	bl	8009128 <RCCEx_PLL2_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a6c:	e00f      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a72:	3328      	adds	r3, #40	; 0x28
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 fc08 	bl	800928c <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a82:	e004      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a8a:	e000      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a96:	4ba5      	ldr	r3, [pc, #660]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa4:	4aa1      	ldr	r2, [pc, #644]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	6513      	str	r3, [r2, #80]	; 0x50
 8006aaa:	e003      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006ac0:	f04f 0900 	mov.w	r9, #0
 8006ac4:	ea58 0309 	orrs.w	r3, r8, r9
 8006ac8:	d047      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d82a      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006af1 	.word	0x08006af1
 8006ae0:	08006aff 	.word	0x08006aff
 8006ae4:	08006b15 	.word	0x08006b15
 8006ae8:	08006b33 	.word	0x08006b33
 8006aec:	08006b33 	.word	0x08006b33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af0:	4b8e      	ldr	r3, [pc, #568]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	4a8d      	ldr	r2, [pc, #564]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006afc:	e01a      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b02:	3308      	adds	r3, #8
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 fb0e 	bl	8009128 <RCCEx_PLL2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b12:	e00f      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b18:	3328      	adds	r3, #40	; 0x28
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f002 fbb5 	bl	800928c <RCCEx_PLL3_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b28:	e004      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b30:	e000      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b3c:	4b7b      	ldr	r3, [pc, #492]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b40:	f023 0107 	bic.w	r1, r3, #7
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4a:	4a78      	ldr	r2, [pc, #480]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8006b50:	e003      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006b66:	f04f 0b00 	mov.w	fp, #0
 8006b6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b6e:	d04c      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7a:	d030      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b80:	d829      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d02d      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006b86:	2bc0      	cmp	r3, #192	; 0xc0
 8006b88:	d825      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d018      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d821      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d007      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b9a:	e01c      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9c:	4b63      	ldr	r3, [pc, #396]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	4a62      	ldr	r2, [pc, #392]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e01c      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bae:	3308      	adds	r3, #8
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 fab8 	bl	8009128 <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bbe:	e011      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc4:	3328      	adds	r3, #40	; 0x28
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f002 fb5f 	bl	800928c <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bdc:	e002      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006bec:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfa:	4a4c      	ldr	r2, [pc, #304]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6513      	str	r3, [r2, #80]	; 0x50
 8006c00:	e003      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006c16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	d053      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c36:	d035      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c3c:	d82e      	bhi.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c42:	d031      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006c44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c48:	d828      	bhi.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c4e:	d01a      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c54:	d822      	bhi.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c5e:	d007      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c60:	e01c      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c62:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	4a31      	ldr	r2, [pc, #196]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c6e:	e01c      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c74:	3308      	adds	r3, #8
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f002 fa55 	bl	8009128 <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c84:	e011      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8a:	3328      	adds	r3, #40	; 0x28
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f002 fafc 	bl	800928c <RCCEx_PLL3_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c9a:	e006      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ca2:	e002      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006cb2:	4b1e      	ldr	r3, [pc, #120]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cc2:	4a1a      	ldr	r2, [pc, #104]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cc8:	e003      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006cde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006cec:	460b      	mov	r3, r1
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	d056      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cfe:	d038      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d04:	d831      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d0a:	d034      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d10:	d82b      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d16:	d01d      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d1c:	d825      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d26:	d00a      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006d28:	e01f      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d2a:	bf00      	nop
 8006d2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4ba2      	ldr	r3, [pc, #648]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4aa1      	ldr	r2, [pc, #644]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d3c:	e01c      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d42:	3308      	adds	r3, #8
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 f9ee 	bl	8009128 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d52:	e011      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	3328      	adds	r3, #40	; 0x28
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fa95 	bl	800928c <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d68:	e006      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d70:	e002      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d80:	4b8e      	ldr	r3, [pc, #568]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d90:	4a8a      	ldr	r2, [pc, #552]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d92:	430b      	orrs	r3, r1
 8006d94:	6593      	str	r3, [r2, #88]	; 0x58
 8006d96:	e003      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006db6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d03a      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	2b30      	cmp	r3, #48	; 0x30
 8006dc8:	d01f      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006dca:	2b30      	cmp	r3, #48	; 0x30
 8006dcc:	d819      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d00c      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d815      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d019      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d111      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dde:	4b77      	ldr	r3, [pc, #476]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	4a76      	ldr	r2, [pc, #472]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006dea:	e011      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df0:	3308      	adds	r3, #8
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f002 f997 	bl	8009128 <RCCEx_PLL2_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e00:	e006      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e08:	e002      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e0a:	bf00      	nop
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e18:	4b68      	ldr	r3, [pc, #416]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e26:	4a65      	ldr	r2, [pc, #404]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006e42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d051      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e60:	d035      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e66:	d82e      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e6c:	d031      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e72:	d828      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e78:	d01a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7e:	d822      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d007      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006e8a:	e01c      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	4a4a      	ldr	r2, [pc, #296]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e98:	e01c      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f002 f940 	bl	8009128 <RCCEx_PLL2_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006eae:	e011      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb4:	3328      	adds	r3, #40	; 0x28
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f002 f9e7 	bl	800928c <RCCEx_PLL3_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ec4:	e006      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006edc:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eea:	4a34      	ldr	r2, [pc, #208]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6513      	str	r3, [r2, #80]	; 0x50
 8006ef0:	e003      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006f14:	460b      	mov	r3, r1
 8006f16:	4313      	orrs	r3, r2
 8006f18:	d056      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f24:	d033      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f2a:	d82c      	bhi.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f30:	d02f      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f36:	d826      	bhi.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f3c:	d02b      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f42:	d820      	bhi.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f48:	d012      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4e:	d81a      	bhi.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d022      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f58:	d115      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5e:	3308      	adds	r3, #8
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f002 f8e0 	bl	8009128 <RCCEx_PLL2_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f6e:	e015      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f74:	3328      	adds	r3, #40	; 0x28
 8006f76:	2101      	movs	r1, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f002 f987 	bl	800928c <RCCEx_PLL3_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f84:	e00a      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f8c:	e006      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f8e:	bf00      	nop
 8006f90:	e004      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f92:	bf00      	nop
 8006f94:	e002      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f96:	bf00      	nop
 8006f98:	e000      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10d      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb2:	4a02      	ldr	r2, [pc, #8]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6513      	str	r3, [r2, #80]	; 0x50
 8006fb8:	e006      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fba:	bf00      	nop
 8006fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	d055      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff4:	d033      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ffa:	d82c      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d02f      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d826      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007008:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800700c:	d02b      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800700e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007012:	d820      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007018:	d012      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800701a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701e:	d81a      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d022      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007028:	d115      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702e:	3308      	adds	r3, #8
 8007030:	2101      	movs	r1, #1
 8007032:	4618      	mov	r0, r3
 8007034:	f002 f878 	bl	8009128 <RCCEx_PLL2_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800703e:	e015      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007044:	3328      	adds	r3, #40	; 0x28
 8007046:	2101      	movs	r1, #1
 8007048:	4618      	mov	r0, r3
 800704a:	f002 f91f 	bl	800928c <RCCEx_PLL3_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007054:	e00a      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800705c:	e006      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800705e:	bf00      	nop
 8007060:	e004      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800706a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10b      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007074:	4ba3      	ldr	r3, [pc, #652]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007084:	4a9f      	ldr	r2, [pc, #636]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007086:	430b      	orrs	r3, r1
 8007088:	6593      	str	r3, [r2, #88]	; 0x58
 800708a:	e003      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80070a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070a4:	2300      	movs	r3, #0
 80070a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ae:	460b      	mov	r3, r1
 80070b0:	4313      	orrs	r3, r2
 80070b2:	d037      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070be:	d00e      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80070c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c4:	d816      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d018      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80070ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ce:	d111      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d0:	4b8c      	ldr	r3, [pc, #560]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4a8b      	ldr	r2, [pc, #556]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070dc:	e00f      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e2:	3308      	adds	r3, #8
 80070e4:	2101      	movs	r1, #1
 80070e6:	4618      	mov	r0, r3
 80070e8:	f002 f81e 	bl	8009128 <RCCEx_PLL2_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070f2:	e004      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070fa:	e000      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80070fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007106:	4b7f      	ldr	r3, [pc, #508]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007114:	4a7b      	ldr	r2, [pc, #492]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007116:	430b      	orrs	r3, r1
 8007118:	6513      	str	r3, [r2, #80]	; 0x50
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007134:	2300      	movs	r3, #0
 8007136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800713a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800713e:	460b      	mov	r3, r1
 8007140:	4313      	orrs	r3, r2
 8007142:	d039      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714a:	2b03      	cmp	r3, #3
 800714c:	d81c      	bhi.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007191 	.word	0x08007191
 8007158:	08007165 	.word	0x08007165
 800715c:	08007173 	.word	0x08007173
 8007160:	08007191 	.word	0x08007191
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007164:	4b67      	ldr	r3, [pc, #412]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	4a66      	ldr	r2, [pc, #408]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800716a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007170:	e00f      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007176:	3308      	adds	r3, #8
 8007178:	2102      	movs	r1, #2
 800717a:	4618      	mov	r0, r3
 800717c:	f001 ffd4 	bl	8009128 <RCCEx_PLL2_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007186:	e004      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800718e:	e000      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800719a:	4b5a      	ldr	r3, [pc, #360]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800719c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719e:	f023 0103 	bic.w	r1, r3, #3
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a8:	4a56      	ldr	r2, [pc, #344]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071aa:	430b      	orrs	r3, r1
 80071ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071ae:	e003      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80071c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071c8:	2300      	movs	r3, #0
 80071ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80071d2:	460b      	mov	r3, r1
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f000 809f 	beq.w	8007318 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071da:	4b4b      	ldr	r3, [pc, #300]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a4a      	ldr	r2, [pc, #296]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071e6:	f7fb fb5d 	bl	80028a4 <HAL_GetTick>
 80071ea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ee:	e00b      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f0:	f7fb fb58 	bl	80028a4 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b64      	cmp	r3, #100	; 0x64
 80071fe:	d903      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007206:	e005      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007208:	4b3f      	ldr	r3, [pc, #252]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0ed      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007218:	2b00      	cmp	r3, #0
 800721a:	d179      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800721c:	4b39      	ldr	r3, [pc, #228]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800721e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007228:	4053      	eors	r3, r2
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d015      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007232:	4b34      	ldr	r3, [pc, #208]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800723e:	4b31      	ldr	r3, [pc, #196]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a30      	ldr	r2, [pc, #192]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a2d      	ldr	r2, [pc, #180]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007254:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007256:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007258:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800725c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726a:	d118      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fb fb1a 	bl	80028a4 <HAL_GetTick>
 8007270:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007274:	e00d      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007276:	f7fb fb15 	bl	80028a4 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007280:	1ad2      	subs	r2, r2, r3
 8007282:	f241 3388 	movw	r3, #5000	; 0x1388
 8007286:	429a      	cmp	r2, r3
 8007288:	d903      	bls.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007290:	e005      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0eb      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800729e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d129      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b6:	d10e      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80072b8:	4b12      	ldr	r3, [pc, #72]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072c8:	091a      	lsrs	r2, r3, #4
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6113      	str	r3, [r2, #16]
 80072d4:	e005      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	4a0a      	ldr	r2, [pc, #40]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072e0:	6113      	str	r3, [r2, #16]
 80072e2:	4b08      	ldr	r3, [pc, #32]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f2:	4a04      	ldr	r2, [pc, #16]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
 80072f8:	e00e      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007302:	e009      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007304:	58024400 	.word	0x58024400
 8007308:	58024800 	.word	0x58024800
 800730c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f002 0301 	and.w	r3, r2, #1
 8007324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800732e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	f000 8089 	beq.w	800744c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007340:	2b28      	cmp	r3, #40	; 0x28
 8007342:	d86b      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007425 	.word	0x08007425
 8007350:	0800741d 	.word	0x0800741d
 8007354:	0800741d 	.word	0x0800741d
 8007358:	0800741d 	.word	0x0800741d
 800735c:	0800741d 	.word	0x0800741d
 8007360:	0800741d 	.word	0x0800741d
 8007364:	0800741d 	.word	0x0800741d
 8007368:	0800741d 	.word	0x0800741d
 800736c:	080073f1 	.word	0x080073f1
 8007370:	0800741d 	.word	0x0800741d
 8007374:	0800741d 	.word	0x0800741d
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800741d 	.word	0x0800741d
 8007380:	0800741d 	.word	0x0800741d
 8007384:	0800741d 	.word	0x0800741d
 8007388:	0800741d 	.word	0x0800741d
 800738c:	08007407 	.word	0x08007407
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	0800741d 	.word	0x0800741d
 80073ac:	08007425 	.word	0x08007425
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	0800741d 	.word	0x0800741d
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007425 	.word	0x08007425
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	08007425 	.word	0x08007425
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f4:	3308      	adds	r3, #8
 80073f6:	2101      	movs	r1, #1
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 fe95 	bl	8009128 <RCCEx_PLL2_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007404:	e00f      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740a:	3328      	adds	r3, #40	; 0x28
 800740c:	2101      	movs	r1, #1
 800740e:	4618      	mov	r0, r3
 8007410:	f001 ff3c 	bl	800928c <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800741a:	e004      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007422:	e000      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800742e:	4bbf      	ldr	r3, [pc, #764]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743c:	4abb      	ldr	r2, [pc, #748]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800743e:	430b      	orrs	r3, r1
 8007440:	6553      	str	r3, [r2, #84]	; 0x54
 8007442:	e003      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f002 0302 	and.w	r3, r2, #2
 8007458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800745c:	2300      	movs	r3, #0
 800745e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007462:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d041      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007472:	2b05      	cmp	r3, #5
 8007474:	d824      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074c9 	.word	0x080074c9
 8007480:	08007495 	.word	0x08007495
 8007484:	080074ab 	.word	0x080074ab
 8007488:	080074c9 	.word	0x080074c9
 800748c:	080074c9 	.word	0x080074c9
 8007490:	080074c9 	.word	0x080074c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007498:	3308      	adds	r3, #8
 800749a:	2101      	movs	r1, #1
 800749c:	4618      	mov	r0, r3
 800749e:	f001 fe43 	bl	8009128 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074a8:	e00f      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ae:	3328      	adds	r3, #40	; 0x28
 80074b0:	2101      	movs	r1, #1
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 feea 	bl	800928c <RCCEx_PLL3_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074be:	e004      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80074c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074d2:	4b96      	ldr	r3, [pc, #600]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f023 0107 	bic.w	r1, r3, #7
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074e0:	4a92      	ldr	r2, [pc, #584]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e2:	430b      	orrs	r3, r1
 80074e4:	6553      	str	r3, [r2, #84]	; 0x54
 80074e6:	e003      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f002 0304 	and.w	r3, r2, #4
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007506:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800750a:	460b      	mov	r3, r1
 800750c:	4313      	orrs	r3, r2
 800750e:	d044      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007518:	2b05      	cmp	r3, #5
 800751a:	d825      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007571 	.word	0x08007571
 8007528:	0800753d 	.word	0x0800753d
 800752c:	08007553 	.word	0x08007553
 8007530:	08007571 	.word	0x08007571
 8007534:	08007571 	.word	0x08007571
 8007538:	08007571 	.word	0x08007571
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007540:	3308      	adds	r3, #8
 8007542:	2101      	movs	r1, #1
 8007544:	4618      	mov	r0, r3
 8007546:	f001 fdef 	bl	8009128 <RCCEx_PLL2_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007550:	e00f      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007556:	3328      	adds	r3, #40	; 0x28
 8007558:	2101      	movs	r1, #1
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fe96 	bl	800928c <RCCEx_PLL3_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007566:	e004      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800757a:	4b6c      	ldr	r3, [pc, #432]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800757c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757e:	f023 0107 	bic.w	r1, r3, #7
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800758a:	4a68      	ldr	r2, [pc, #416]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800758c:	430b      	orrs	r3, r1
 800758e:	6593      	str	r3, [r2, #88]	; 0x58
 8007590:	e003      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f002 0320 	and.w	r3, r2, #32
 80075a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075aa:	2300      	movs	r3, #0
 80075ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075b4:	460b      	mov	r3, r1
 80075b6:	4313      	orrs	r3, r2
 80075b8:	d055      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c6:	d033      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80075c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075cc:	d82c      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d2:	d02f      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d8:	d826      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075de:	d02b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80075e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075e4:	d820      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ea:	d012      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80075ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f0:	d81a      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d022      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80075f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075fa:	d115      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007600:	3308      	adds	r3, #8
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f001 fd8f 	bl	8009128 <RCCEx_PLL2_Config>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007610:	e015      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007616:	3328      	adds	r3, #40	; 0x28
 8007618:	2102      	movs	r1, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f001 fe36 	bl	800928c <RCCEx_PLL3_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007626:	e00a      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800762e:	e006      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007630:	bf00      	nop
 8007632:	e004      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007634:	bf00      	nop
 8007636:	e002      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007638:	bf00      	nop
 800763a:	e000      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800763c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10b      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007646:	4b39      	ldr	r3, [pc, #228]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007656:	4a35      	ldr	r2, [pc, #212]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007658:	430b      	orrs	r3, r1
 800765a:	6553      	str	r3, [r2, #84]	; 0x54
 800765c:	e003      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007676:	2300      	movs	r3, #0
 8007678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800767c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007680:	460b      	mov	r3, r1
 8007682:	4313      	orrs	r3, r2
 8007684:	d058      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800768e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007692:	d033      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007694:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007698:	d82c      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769e:	d02f      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a4:	d826      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076aa:	d02b      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80076ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076b0:	d820      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b6:	d012      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80076b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076bc:	d81a      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d022      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80076c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c6:	d115      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076cc:	3308      	adds	r3, #8
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fd29 	bl	8009128 <RCCEx_PLL2_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076dc:	e015      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e2:	3328      	adds	r3, #40	; 0x28
 80076e4:	2102      	movs	r1, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fdd0 	bl	800928c <RCCEx_PLL3_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076f2:	e00a      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076fa:	e006      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076fc:	bf00      	nop
 80076fe:	e004      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007700:	bf00      	nop
 8007702:	e002      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007704:	bf00      	nop
 8007706:	e000      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10e      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007722:	4a02      	ldr	r2, [pc, #8]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007724:	430b      	orrs	r3, r1
 8007726:	6593      	str	r3, [r2, #88]	; 0x58
 8007728:	e006      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800774e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007752:	460b      	mov	r3, r1
 8007754:	4313      	orrs	r3, r2
 8007756:	d055      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007760:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007764:	d033      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007766:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800776a:	d82c      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007770:	d02f      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007776:	d826      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007778:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800777c:	d02b      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800777e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007782:	d820      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007788:	d012      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800778a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800778e:	d81a      	bhi.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d022      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007798:	d115      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779e:	3308      	adds	r3, #8
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 fcc0 	bl	8009128 <RCCEx_PLL2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077ae:	e015      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b4:	3328      	adds	r3, #40	; 0x28
 80077b6:	2102      	movs	r1, #2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 fd67 	bl	800928c <RCCEx_PLL3_Config>
 80077be:	4603      	mov	r3, r0
 80077c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077c4:	e00a      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077cc:	e006      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077ce:	bf00      	nop
 80077d0:	e004      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077d2:	bf00      	nop
 80077d4:	e002      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077e4:	4ba1      	ldr	r3, [pc, #644]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077f4:	4a9d      	ldr	r2, [pc, #628]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f6:	430b      	orrs	r3, r1
 80077f8:	6593      	str	r3, [r2, #88]	; 0x58
 80077fa:	e003      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007800:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f002 0308 	and.w	r3, r2, #8
 8007810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007814:	2300      	movs	r3, #0
 8007816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800781a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800781e:	460b      	mov	r3, r1
 8007820:	4313      	orrs	r3, r2
 8007822:	d01e      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800782c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007830:	d10c      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007836:	3328      	adds	r3, #40	; 0x28
 8007838:	2102      	movs	r1, #2
 800783a:	4618      	mov	r0, r3
 800783c:	f001 fd26 	bl	800928c <RCCEx_PLL3_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800784c:	4b87      	ldr	r3, [pc, #540]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800784e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785c:	4a83      	ldr	r2, [pc, #524]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800785e:	430b      	orrs	r3, r1
 8007860:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f002 0310 	and.w	r3, r2, #16
 800786e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007872:	2300      	movs	r3, #0
 8007874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007878:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800787c:	460b      	mov	r3, r1
 800787e:	4313      	orrs	r3, r2
 8007880:	d01e      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800788a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788e:	d10c      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007894:	3328      	adds	r3, #40	; 0x28
 8007896:	2102      	movs	r1, #2
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fcf7 	bl	800928c <RCCEx_PLL3_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078aa:	4b70      	ldr	r3, [pc, #448]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ba:	4a6c      	ldr	r2, [pc, #432]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078bc:	430b      	orrs	r3, r1
 80078be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80078cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d03e      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ec:	d022      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f2:	d81b      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fc:	d00b      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80078fe:	e015      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007904:	3308      	adds	r3, #8
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fc0d 	bl	8009128 <RCCEx_PLL2_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007914:	e00f      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791a:	3328      	adds	r3, #40	; 0x28
 800791c:	2102      	movs	r1, #2
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fcb4 	bl	800928c <RCCEx_PLL3_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800792a:	e004      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007932:	e000      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800793e:	4b4b      	ldr	r3, [pc, #300]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007942:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800794e:	4a47      	ldr	r2, [pc, #284]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007950:	430b      	orrs	r3, r1
 8007952:	6593      	str	r3, [r2, #88]	; 0x58
 8007954:	e003      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800795a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800796a:	67bb      	str	r3, [r7, #120]	; 0x78
 800796c:	2300      	movs	r3, #0
 800796e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007970:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d03b      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007986:	d01f      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800798c:	d818      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800798e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007992:	d003      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007998:	d007      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800799a:	e011      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799c:	4b33      	ldr	r3, [pc, #204]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a32      	ldr	r2, [pc, #200]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079a8:	e00f      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ae:	3328      	adds	r3, #40	; 0x28
 80079b0:	2101      	movs	r1, #1
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fc6a 	bl	800928c <RCCEx_PLL3_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80079be:	e004      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079c6:	e000      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80079c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e2:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079e4:	430b      	orrs	r3, r1
 80079e6:	6553      	str	r3, [r2, #84]	; 0x54
 80079e8:	e003      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80079fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007a00:	2300      	movs	r3, #0
 8007a02:	677b      	str	r3, [r7, #116]	; 0x74
 8007a04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	d034      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	d007      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007a1e:	e011      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a20:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a2c:	e00e      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	3308      	adds	r3, #8
 8007a34:	2102      	movs	r1, #2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 fb76 	bl	8009128 <RCCEx_PLL2_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a42:	e003      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10d      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a62:	4a02      	ldr	r2, [pc, #8]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a64:	430b      	orrs	r3, r1
 8007a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a68:	e006      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a86:	2300      	movs	r3, #0
 8007a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4313      	orrs	r3, r2
 8007a92:	d00c      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a98:	3328      	adds	r3, #40	; 0x28
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 fbf5 	bl	800928c <RCCEx_PLL3_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007aba:	663b      	str	r3, [r7, #96]	; 0x60
 8007abc:	2300      	movs	r3, #0
 8007abe:	667b      	str	r3, [r7, #100]	; 0x64
 8007ac0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	d038      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad6:	d018      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007adc:	d811      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae2:	d014      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae8:	d80b      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d011      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af2:	d106      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af4:	4bc3      	ldr	r3, [pc, #780]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	4ac2      	ldr	r2, [pc, #776]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b00:	e008      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b08:	e004      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b0a:	bf00      	nop
 8007b0c:	e002      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b0e:	bf00      	nop
 8007b10:	e000      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10b      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b1c:	4bb9      	ldr	r3, [pc, #740]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b2c:	4ab5      	ldr	r2, [pc, #724]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	6553      	str	r3, [r2, #84]	; 0x54
 8007b32:	e003      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007b52:	460b      	mov	r3, r1
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d009      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b58:	4baa      	ldr	r3, [pc, #680]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b66:	4aa7      	ldr	r2, [pc, #668]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007b78:	653b      	str	r3, [r7, #80]	; 0x50
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	657b      	str	r3, [r7, #84]	; 0x54
 8007b7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d00a      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b88:	4b9e      	ldr	r3, [pc, #632]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b98:	4a9a      	ldr	r2, [pc, #616]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bac:	2300      	movs	r3, #0
 8007bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d009      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bba:	4b92      	ldr	r3, [pc, #584]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc8:	4a8e      	ldr	r2, [pc, #568]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007bda:	643b      	str	r3, [r7, #64]	; 0x40
 8007bdc:	2300      	movs	r3, #0
 8007bde:	647b      	str	r3, [r7, #68]	; 0x44
 8007be0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007be4:	460b      	mov	r3, r1
 8007be6:	4313      	orrs	r3, r2
 8007be8:	d00e      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bea:	4b86      	ldr	r3, [pc, #536]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	4a85      	ldr	r2, [pc, #532]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bf4:	6113      	str	r3, [r2, #16]
 8007bf6:	4b83      	ldr	r3, [pc, #524]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bf8:	6919      	ldr	r1, [r3, #16]
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c02:	4a80      	ldr	r2, [pc, #512]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d009      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c24:	4b77      	ldr	r3, [pc, #476]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c28:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	4a74      	ldr	r2, [pc, #464]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	d00a      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c54:	4b6b      	ldr	r3, [pc, #428]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c64:	4a67      	ldr	r2, [pc, #412]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c66:	430b      	orrs	r3, r1
 8007c68:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	2100      	movs	r1, #0
 8007c74:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007c80:	460b      	mov	r3, r1
 8007c82:	4313      	orrs	r3, r2
 8007c84:	d011      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fa4a 	bl	8009128 <RCCEx_PLL2_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ca6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6239      	str	r1, [r7, #32]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	d011      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cca:	3308      	adds	r3, #8
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 fa2a 	bl	8009128 <RCCEx_PLL2_Config>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	61b9      	str	r1, [r7, #24]
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	61fb      	str	r3, [r7, #28]
 8007cfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d00:	460b      	mov	r3, r1
 8007d02:	4313      	orrs	r3, r2
 8007d04:	d011      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	2102      	movs	r1, #2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fa0a 	bl	8009128 <RCCEx_PLL2_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	2100      	movs	r1, #0
 8007d34:	6139      	str	r1, [r7, #16]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d40:	460b      	mov	r3, r1
 8007d42:	4313      	orrs	r3, r2
 8007d44:	d011      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4a:	3328      	adds	r3, #40	; 0x28
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 fa9c 	bl	800928c <RCCEx_PLL3_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	2100      	movs	r1, #0
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d80:	460b      	mov	r3, r1
 8007d82:	4313      	orrs	r3, r2
 8007d84:	d011      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8a:	3328      	adds	r3, #40	; 0x28
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 fa7c 	bl	800928c <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	2100      	movs	r1, #0
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d011      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dca:	3328      	adds	r3, #40	; 0x28
 8007dcc:	2102      	movs	r1, #2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 fa5c 	bl	800928c <RCCEx_PLL3_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007dea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e000      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e04:	58024400 	.word	0x58024400

08007e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b090      	sub	sp, #64	; 0x40
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	f040 8094 	bne.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e20:	4b9e      	ldr	r3, [pc, #632]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	f200 8087 	bhi.w	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e4d 	.word	0x08007e4d
 8007e3c:	08007e75 	.word	0x08007e75
 8007e40:	08007e9d 	.word	0x08007e9d
 8007e44:	08007f39 	.word	0x08007f39
 8007e48:	08007ec5 	.word	0x08007ec5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e4c:	4b93      	ldr	r3, [pc, #588]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e58:	d108      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 f810 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e68:	f000 bd45 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e70:	f000 bd41 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e74:	4b89      	ldr	r3, [pc, #548]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e80:	d108      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0318 	add.w	r3, r7, #24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fd54 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e90:	f000 bd31 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e98:	f000 bd2d 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e9c:	4b7f      	ldr	r3, [pc, #508]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea8:	d108      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eaa:	f107 030c 	add.w	r3, r7, #12
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fe94 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb8:	f000 bd1d 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec0:	f000 bd19 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ec4:	4b75      	ldr	r3, [pc, #468]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ece:	4b73      	ldr	r3, [pc, #460]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d10c      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee0:	4b6e      	ldr	r3, [pc, #440]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	08db      	lsrs	r3, r3, #3
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	4a6d      	ldr	r2, [pc, #436]	; (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef2:	e01f      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ef4:	4b69      	ldr	r3, [pc, #420]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f00:	d106      	bne.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f08:	d102      	bne.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f0a:	4b66      	ldr	r3, [pc, #408]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f0e:	e011      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f10:	4b62      	ldr	r3, [pc, #392]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f1c:	d106      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f24:	d102      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f26:	4b60      	ldr	r3, [pc, #384]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f30:	f000 bce1 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f34:	f000 bcdf 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f38:	4b5c      	ldr	r3, [pc, #368]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f3c:	f000 bcdb 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f44:	f000 bcd7 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007f50:	430b      	orrs	r3, r1
 8007f52:	f040 80ad 	bne.w	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f56:	4b51      	ldr	r3, [pc, #324]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f66:	d056      	beq.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6e:	f200 8090 	bhi.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	2bc0      	cmp	r3, #192	; 0xc0
 8007f76:	f000 8088 	beq.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	2bc0      	cmp	r3, #192	; 0xc0
 8007f7e:	f200 8088 	bhi.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b80      	cmp	r3, #128	; 0x80
 8007f86:	d032      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	f200 8081 	bhi.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d014      	beq.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007f9c:	e079      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f9e:	4b3f      	ldr	r3, [pc, #252]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007faa:	d108      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 ff67 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fba:	f000 bc9c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc2:	f000 bc98 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc6:	4b35      	ldr	r3, [pc, #212]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd2:	d108      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd4:	f107 0318 	add.w	r3, r7, #24
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fcab 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe2:	f000 bc88 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fea:	f000 bc84 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fee:	4b2b      	ldr	r3, [pc, #172]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffa:	d108      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ffc:	f107 030c 	add.w	r3, r7, #12
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fdeb 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800800a:	f000 bc74 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008012:	f000 bc70 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800801e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008020:	4b1e      	ldr	r3, [pc, #120]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b04      	cmp	r3, #4
 800802a:	d10c      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	2b00      	cmp	r3, #0
 8008030:	d109      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	08db      	lsrs	r3, r3, #3
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	4a18      	ldr	r2, [pc, #96]	; (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800803e:	fa22 f303 	lsr.w	r3, r2, r3
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008044:	e01f      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008052:	d106      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800805a:	d102      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800805c:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008060:	e011      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008062:	4b0e      	ldr	r3, [pc, #56]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806e:	d106      	bne.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008076:	d102      	bne.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008082:	f000 bc38 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008086:	f000 bc36 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800808e:	f000 bc32 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008096:	f000 bc2e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800809a:	bf00      	nop
 800809c:	58024400 	.word	0x58024400
 80080a0:	03d09000 	.word	0x03d09000
 80080a4:	003d0900 	.word	0x003d0900
 80080a8:	017d7840 	.word	0x017d7840
 80080ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80080b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80080b8:	430b      	orrs	r3, r1
 80080ba:	f040 809c 	bne.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80080be:	4b9e      	ldr	r3, [pc, #632]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ce:	d054      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080d6:	f200 808b 	bhi.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080e0:	f000 8083 	beq.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080ea:	f200 8081 	bhi.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f4:	d02f      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080fc:	d878      	bhi.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800810a:	d012      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800810c:	e070      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800810e:	4b8a      	ldr	r3, [pc, #552]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800811a:	d107      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800811c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008120:	4618      	mov	r0, r3
 8008122:	f000 feaf 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812a:	e3e4      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008130:	e3e1      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008132:	4b81      	ldr	r3, [pc, #516]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800813a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800813e:	d107      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008140:	f107 0318 	add.w	r3, r7, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fbf5 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814e:	e3d2      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008154:	e3cf      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008156:	4b78      	ldr	r3, [pc, #480]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800815e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008162:	d107      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008164:	f107 030c 	add.w	r3, r7, #12
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fd37 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008172:	e3c0      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008178:	e3bd      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800817a:	4b6f      	ldr	r3, [pc, #444]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800817c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008182:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008184:	4b6c      	ldr	r3, [pc, #432]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d10c      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008196:	4b68      	ldr	r3, [pc, #416]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	08db      	lsrs	r3, r3, #3
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	4a66      	ldr	r2, [pc, #408]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081a2:	fa22 f303 	lsr.w	r3, r2, r3
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a8:	e01e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081aa:	4b63      	ldr	r3, [pc, #396]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b6:	d106      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081c0:	4b5f      	ldr	r3, [pc, #380]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c4:	e010      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081c6:	4b5c      	ldr	r3, [pc, #368]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d2:	d106      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80081d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081da:	d102      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081dc:	4b59      	ldr	r3, [pc, #356]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e0:	e002      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081e6:	e386      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081e8:	e385      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081ea:	4b57      	ldr	r3, [pc, #348]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ee:	e382      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f4:	e37f      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80081fe:	430b      	orrs	r3, r1
 8008200:	f040 80a7 	bne.w	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008204:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800820c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008214:	d055      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800821c:	f200 8096 	bhi.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008226:	f000 8084 	beq.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008230:	f200 808c 	bhi.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800823a:	d030      	beq.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008242:	f200 8083 	bhi.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008252:	d012      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008254:	e07a      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008256:	4b38      	ldr	r3, [pc, #224]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008262:	d107      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fe0b 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008272:	e340      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008278:	e33d      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827a:	4b2f      	ldr	r3, [pc, #188]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008286:	d107      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008288:	f107 0318 	add.w	r3, r7, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fb51 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008296:	e32e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800829c:	e32b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082aa:	d107      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fc93 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ba:	e31c      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c0:	e319      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c2:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082cc:	4b1a      	ldr	r3, [pc, #104]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d10c      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082de:	4b16      	ldr	r3, [pc, #88]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	08db      	lsrs	r3, r3, #3
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	4a14      	ldr	r2, [pc, #80]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082ea:	fa22 f303 	lsr.w	r3, r2, r3
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	e01e      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f2:	4b11      	ldr	r3, [pc, #68]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	d106      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008308:	4b0d      	ldr	r3, [pc, #52]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800830c:	e010      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830e:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800831a:	d106      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800831c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008322:	d102      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800832e:	e2e2      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008330:	e2e1      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008336:	e2de      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008338:	58024400 	.word	0x58024400
 800833c:	03d09000 	.word	0x03d09000
 8008340:	003d0900 	.word	0x003d0900
 8008344:	017d7840 	.word	0x017d7840
 8008348:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008350:	e2d1      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008356:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800835a:	430b      	orrs	r3, r1
 800835c:	f040 809c 	bne.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008360:	4b93      	ldr	r3, [pc, #588]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008364:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008368:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008370:	d054      	beq.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008378:	f200 808b 	bhi.w	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008382:	f000 8083 	beq.w	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800838c:	f200 8081 	bhi.w	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008396:	d02f      	beq.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839e:	d878      	bhi.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ac:	d012      	beq.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80083ae:	e070      	b.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083b0:	4b7f      	ldr	r3, [pc, #508]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083bc:	d107      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fd5e 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083cc:	e293      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d2:	e290      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083d4:	4b76      	ldr	r3, [pc, #472]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083e0:	d107      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e2:	f107 0318 	add.w	r3, r7, #24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 faa4 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f0:	e281      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f6:	e27e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083f8:	4b6d      	ldr	r3, [pc, #436]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008404:	d107      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fbe6 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008414:	e26f      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800841a:	e26c      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800841c:	4b64      	ldr	r3, [pc, #400]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800841e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008424:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008426:	4b62      	ldr	r3, [pc, #392]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b04      	cmp	r3, #4
 8008430:	d10c      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008438:	4b5d      	ldr	r3, [pc, #372]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	08db      	lsrs	r3, r3, #3
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	4a5c      	ldr	r2, [pc, #368]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008444:	fa22 f303 	lsr.w	r3, r2, r3
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844a:	e01e      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800844c:	4b58      	ldr	r3, [pc, #352]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008458:	d106      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800845a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008460:	d102      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008462:	4b55      	ldr	r3, [pc, #340]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008466:	e010      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008468:	4b51      	ldr	r3, [pc, #324]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008474:	d106      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847c:	d102      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800847e:	4b4f      	ldr	r3, [pc, #316]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008482:	e002      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008488:	e235      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800848a:	e234      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800848c:	4b4c      	ldr	r3, [pc, #304]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008490:	e231      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008496:	e22e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800849c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80084a0:	430b      	orrs	r3, r1
 80084a2:	f040 808f 	bne.w	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80084a6:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80084ae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084b6:	d06b      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084be:	d874      	bhi.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084c6:	d056      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084ce:	d86c      	bhi.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084d6:	d03b      	beq.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084de:	d864      	bhi.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084e6:	d021      	beq.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ee:	d85c      	bhi.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084fc:	d004      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80084fe:	e054      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008500:	f7fe fa0a 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 8008504:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008506:	e1f6      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008508:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008514:	d107      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008516:	f107 0318 	add.w	r3, r7, #24
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fa0a 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008524:	e1e7      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852a:	e1e4      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800852c:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008538:	d107      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853a:	f107 030c 	add.w	r3, r7, #12
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fb4c 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008548:	e1d5      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854e:	e1d2      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008550:	4b17      	ldr	r3, [pc, #92]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b04      	cmp	r3, #4
 800855a:	d109      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800855c:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	08db      	lsrs	r3, r3, #3
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	4a13      	ldr	r2, [pc, #76]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856e:	e1c2      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008574:	e1bf      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008582:	d102      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008588:	e1b5      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800858e:	e1b2      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859c:	d102      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a2:	e1a8      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a8:	e1a5      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ae:	e1a2      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085b0:	58024400 	.word	0x58024400
 80085b4:	03d09000 	.word	0x03d09000
 80085b8:	003d0900 	.word	0x003d0900
 80085bc:	017d7840 	.word	0x017d7840
 80085c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80085c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80085cc:	430b      	orrs	r3, r1
 80085ce:	d173      	bne.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80085d0:	4b9c      	ldr	r3, [pc, #624]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e0:	d02f      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e8:	d863      	bhi.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f6:	d012      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80085f8:	e05b      	b.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085fa:	4b92      	ldr	r3, [pc, #584]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008606:	d107      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008608:	f107 0318 	add.w	r3, r7, #24
 800860c:	4618      	mov	r0, r3
 800860e:	f000 f991 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008616:	e16e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861c:	e16b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800861e:	4b89      	ldr	r3, [pc, #548]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800862c:	f107 030c 	add.w	r3, r7, #12
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fad3 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800863a:	e15c      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008640:	e159      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008642:	4b80      	ldr	r3, [pc, #512]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800864a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800864c:	4b7d      	ldr	r3, [pc, #500]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b04      	cmp	r3, #4
 8008656:	d10c      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800865e:	4b79      	ldr	r3, [pc, #484]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	08db      	lsrs	r3, r3, #3
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	4a77      	ldr	r2, [pc, #476]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800866a:	fa22 f303 	lsr.w	r3, r2, r3
 800866e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008670:	e01e      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008672:	4b74      	ldr	r3, [pc, #464]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867e:	d106      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008686:	d102      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008688:	4b70      	ldr	r3, [pc, #448]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868c:	e010      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800868e:	4b6d      	ldr	r3, [pc, #436]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800869a:	d106      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a2:	d102      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086a4:	4b6a      	ldr	r3, [pc, #424]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a8:	e002      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086ae:	e122      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086b0:	e121      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b6:	e11e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80086b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086bc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80086c0:	430b      	orrs	r3, r1
 80086c2:	d133      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80086c4:	4b5f      	ldr	r3, [pc, #380]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086da:	d012      	beq.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80086dc:	e023      	b.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086de:	4b59      	ldr	r3, [pc, #356]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ea:	d107      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fbc7 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086fa:	e0fc      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008700:	e0f9      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008702:	4b50      	ldr	r3, [pc, #320]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800870a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800870e:	d107      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008710:	f107 0318 	add.w	r3, r7, #24
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f90d 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800871e:	e0ea      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008724:	e0e7      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872a:	e0e4      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800872c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008730:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008734:	430b      	orrs	r3, r1
 8008736:	f040 808d 	bne.w	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800873a:	4b42      	ldr	r3, [pc, #264]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800873c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008742:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800874a:	d06b      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008752:	d874      	bhi.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875a:	d056      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d86c      	bhi.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800876a:	d03b      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008772:	d864      	bhi.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800877a:	d021      	beq.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008782:	d85c      	bhi.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	2b00      	cmp	r3, #0
 8008788:	d004      	beq.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008790:	d004      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008792:	e054      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008794:	f000 f8b8 	bl	8008908 <HAL_RCCEx_GetD3PCLK1Freq>
 8008798:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800879a:	e0ac      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800879c:	4b29      	ldr	r3, [pc, #164]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087a8:	d107      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087aa:	f107 0318 	add.w	r3, r7, #24
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f8c0 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b8:	e09d      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087be:	e09a      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087c0:	4b20      	ldr	r3, [pc, #128]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087cc:	d107      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ce:	f107 030c 	add.w	r3, r7, #12
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fa02 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087dc:	e08b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e2:	e088      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d109      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	08db      	lsrs	r3, r3, #3
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	4a13      	ldr	r2, [pc, #76]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e078      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008808:	e075      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008816:	d102      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881c:	e06b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008822:	e068      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008824:	4b07      	ldr	r3, [pc, #28]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008830:	d102      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008832:	4b07      	ldr	r3, [pc, #28]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008836:	e05e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800883c:	e05b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008842:	e058      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008844:	58024400 	.word	0x58024400
 8008848:	03d09000 	.word	0x03d09000
 800884c:	003d0900 	.word	0x003d0900
 8008850:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008858:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800885c:	430b      	orrs	r3, r1
 800885e:	d148      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008860:	4b27      	ldr	r3, [pc, #156]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008868:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008870:	d02a      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008878:	d838      	bhi.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008886:	d00d      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008888:	e030      	b.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800888a:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008896:	d102      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008898:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889c:	e02b      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a2:	e028      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088a4:	4b16      	ldr	r3, [pc, #88]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fae4 	bl	8008e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c0:	e019      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c6:	e016      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c8:	4b0d      	ldr	r3, [pc, #52]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088d4:	d107      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d6:	f107 0318 	add.w	r3, r7, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f82a 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e4:	e007      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ea:	e004      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f0:	e001      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80088f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3740      	adds	r7, #64	; 0x40
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	58024400 	.word	0x58024400
 8008904:	017d7840 	.word	0x017d7840

08008908 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800890c:	f7fd ffd4 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 8008910:	4602      	mov	r2, r0
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	091b      	lsrs	r3, r3, #4
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	4904      	ldr	r1, [pc, #16]	; (8008930 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800891e:	5ccb      	ldrb	r3, [r1, r3]
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008928:	4618      	mov	r0, r3
 800892a:	bd80      	pop	{r7, pc}
 800892c:	58024400 	.word	0x58024400
 8008930:	0800fcd8 	.word	0x0800fcd8

08008934 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008934:	b480      	push	{r7}
 8008936:	b089      	sub	sp, #36	; 0x24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800893c:	4ba1      	ldr	r3, [pc, #644]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008946:	4b9f      	ldr	r3, [pc, #636]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	0b1b      	lsrs	r3, r3, #12
 800894c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008950:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008952:	4b9c      	ldr	r3, [pc, #624]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800895e:	4b99      	ldr	r3, [pc, #612]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008962:	08db      	lsrs	r3, r3, #3
 8008964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8111 	beq.w	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b02      	cmp	r3, #2
 8008986:	f000 8083 	beq.w	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b02      	cmp	r3, #2
 800898e:	f200 80a1 	bhi.w	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d056      	beq.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800899e:	e099      	b.n	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089a0:	4b88      	ldr	r3, [pc, #544]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0320 	and.w	r3, r3, #32
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d02d      	beq.n	8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089ac:	4b85      	ldr	r3, [pc, #532]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	08db      	lsrs	r3, r3, #3
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	4a84      	ldr	r2, [pc, #528]	; (8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089b8:	fa22 f303 	lsr.w	r3, r2, r3
 80089bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d6:	4b7b      	ldr	r3, [pc, #492]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a06:	e087      	b.n	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1a:	4b6a      	ldr	r3, [pc, #424]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a4a:	e065      	b.n	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b59      	ldr	r3, [pc, #356]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8e:	e043      	b.n	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	4b48      	ldr	r3, [pc, #288]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad2:	e021      	b.n	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae6:	4b37      	ldr	r3, [pc, #220]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b18:	4b2a      	ldr	r3, [pc, #168]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	0a5b      	lsrs	r3, r3, #9
 8008b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b3e:	ee17 2a90 	vmov	r2, s15
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b46:	4b1f      	ldr	r3, [pc, #124]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b50:	ee07 3a90 	vmov	s15, r3
 8008b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b6c:	ee17 2a90 	vmov	r2, s15
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b74:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	0e1b      	lsrs	r3, r3, #24
 8008b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b9a:	ee17 2a90 	vmov	r2, s15
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
}
 8008bb6:	bf00      	nop
 8008bb8:	3724      	adds	r7, #36	; 0x24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	58024400 	.word	0x58024400
 8008bc8:	03d09000 	.word	0x03d09000
 8008bcc:	46000000 	.word	0x46000000
 8008bd0:	4c742400 	.word	0x4c742400
 8008bd4:	4a742400 	.word	0x4a742400
 8008bd8:	4bbebc20 	.word	0x4bbebc20

08008bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b089      	sub	sp, #36	; 0x24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008be4:	4ba1      	ldr	r3, [pc, #644]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0303 	and.w	r3, r3, #3
 8008bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008bee:	4b9f      	ldr	r3, [pc, #636]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	0d1b      	lsrs	r3, r3, #20
 8008bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008bfa:	4b9c      	ldr	r3, [pc, #624]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c06:	4b99      	ldr	r3, [pc, #612]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	08db      	lsrs	r3, r3, #3
 8008c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 8111 	beq.w	8008e4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	f000 8083 	beq.w	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	f200 80a1 	bhi.w	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d056      	beq.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c46:	e099      	b.n	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c48:	4b88      	ldr	r3, [pc, #544]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d02d      	beq.n	8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c54:	4b85      	ldr	r3, [pc, #532]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	08db      	lsrs	r3, r3, #3
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	4a84      	ldr	r2, [pc, #528]	; (8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
 8008c64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b7b      	ldr	r3, [pc, #492]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cae:	e087      	b.n	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b6a      	ldr	r3, [pc, #424]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf2:	e065      	b.n	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d06:	4b59      	ldr	r3, [pc, #356]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d36:	e043      	b.n	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4a:	4b48      	ldr	r3, [pc, #288]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d7a:	e021      	b.n	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8e:	4b37      	ldr	r3, [pc, #220]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	0a5b      	lsrs	r3, r3, #9
 8008dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de6:	ee17 2a90 	vmov	r2, s15
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008dee:	4b1f      	ldr	r3, [pc, #124]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	0c1b      	lsrs	r3, r3, #16
 8008df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e14:	ee17 2a90 	vmov	r2, s15
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e1c:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	0e1b      	lsrs	r3, r3, #24
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e42:	ee17 2a90 	vmov	r2, s15
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e4a:	e008      	b.n	8008e5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	609a      	str	r2, [r3, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	3724      	adds	r7, #36	; 0x24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	58024400 	.word	0x58024400
 8008e70:	03d09000 	.word	0x03d09000
 8008e74:	46000000 	.word	0x46000000
 8008e78:	4c742400 	.word	0x4c742400
 8008e7c:	4a742400 	.word	0x4a742400
 8008e80:	4bbebc20 	.word	0x4bbebc20

08008e84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b089      	sub	sp, #36	; 0x24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e8c:	4ba0      	ldr	r3, [pc, #640]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e96:	4b9e      	ldr	r3, [pc, #632]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	091b      	lsrs	r3, r3, #4
 8008e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ea2:	4b9b      	ldr	r3, [pc, #620]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008eac:	4b98      	ldr	r3, [pc, #608]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	08db      	lsrs	r3, r3, #3
 8008eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	fb02 f303 	mul.w	r3, r2, r3
 8008ebc:	ee07 3a90 	vmov	s15, r3
 8008ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 8111 	beq.w	80090f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	f000 8083 	beq.w	8008fde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	f200 80a1 	bhi.w	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d056      	beq.n	8008f9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008eec:	e099      	b.n	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eee:	4b88      	ldr	r3, [pc, #544]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d02d      	beq.n	8008f56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008efa:	4b85      	ldr	r3, [pc, #532]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	08db      	lsrs	r3, r3, #3
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	4a83      	ldr	r2, [pc, #524]	; (8009114 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f06:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	ee07 3a90 	vmov	s15, r3
 8008f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f24:	4b7a      	ldr	r3, [pc, #488]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2c:	ee07 3a90 	vmov	s15, r3
 8008f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f54:	e087      	b.n	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800911c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f68:	4b69      	ldr	r3, [pc, #420]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f98:	e065      	b.n	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009120 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fac:	4b58      	ldr	r3, [pc, #352]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb4:	ee07 3a90 	vmov	s15, r3
 8008fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fdc:	e043      	b.n	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009124 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff0:	4b47      	ldr	r3, [pc, #284]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009000:	ed97 6a03 	vldr	s12, [r7, #12]
 8009004:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009020:	e021      	b.n	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800911c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009034:	4b36      	ldr	r3, [pc, #216]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009044:	ed97 6a03 	vldr	s12, [r7, #12]
 8009048:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800904c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009064:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009066:	4b2a      	ldr	r3, [pc, #168]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	0a5b      	lsrs	r3, r3, #9
 800906c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800907c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009080:	edd7 6a07 	vldr	s13, [r7, #28]
 8009084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800908c:	ee17 2a90 	vmov	r2, s15
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009094:	4b1e      	ldr	r3, [pc, #120]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ba:	ee17 2a90 	vmov	r2, s15
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80090c2:	4b13      	ldr	r3, [pc, #76]	; (8009110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	0e1b      	lsrs	r3, r3, #24
 80090c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090cc:	ee07 3a90 	vmov	s15, r3
 80090d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090e8:	ee17 2a90 	vmov	r2, s15
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80090f0:	e008      	b.n	8009104 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	609a      	str	r2, [r3, #8]
}
 8009104:	bf00      	nop
 8009106:	3724      	adds	r7, #36	; 0x24
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	58024400 	.word	0x58024400
 8009114:	03d09000 	.word	0x03d09000
 8009118:	46000000 	.word	0x46000000
 800911c:	4c742400 	.word	0x4c742400
 8009120:	4a742400 	.word	0x4a742400
 8009124:	4bbebc20 	.word	0x4bbebc20

08009128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009136:	4b53      	ldr	r3, [pc, #332]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b03      	cmp	r3, #3
 8009140:	d101      	bne.n	8009146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e099      	b.n	800927a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009146:	4b4f      	ldr	r3, [pc, #316]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a4e      	ldr	r2, [pc, #312]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800914c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009152:	f7f9 fba7 	bl	80028a4 <HAL_GetTick>
 8009156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009158:	e008      	b.n	800916c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800915a:	f7f9 fba3 	bl	80028a4 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e086      	b.n	800927a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800916c:	4b45      	ldr	r3, [pc, #276]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1f0      	bne.n	800915a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009178:	4b42      	ldr	r3, [pc, #264]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	031b      	lsls	r3, r3, #12
 8009186:	493f      	ldr	r1, [pc, #252]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009188:	4313      	orrs	r3, r2
 800918a:	628b      	str	r3, [r1, #40]	; 0x28
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	3b01      	subs	r3, #1
 8009192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	3b01      	subs	r3, #1
 800919c:	025b      	lsls	r3, r3, #9
 800919e:	b29b      	uxth	r3, r3
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	061b      	lsls	r3, r3, #24
 80091b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091bc:	4931      	ldr	r1, [pc, #196]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091c2:	4b30      	ldr	r3, [pc, #192]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	492d      	ldr	r1, [pc, #180]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091d4:	4b2b      	ldr	r3, [pc, #172]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	f023 0220 	bic.w	r2, r3, #32
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	4928      	ldr	r1, [pc, #160]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091e6:	4b27      	ldr	r3, [pc, #156]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	4a26      	ldr	r2, [pc, #152]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	f023 0310 	bic.w	r3, r3, #16
 80091f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 80091f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091f6:	4b24      	ldr	r3, [pc, #144]	; (8009288 <RCCEx_PLL2_Config+0x160>)
 80091f8:	4013      	ands	r3, r2
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	69d2      	ldr	r2, [r2, #28]
 80091fe:	00d2      	lsls	r2, r2, #3
 8009200:	4920      	ldr	r1, [pc, #128]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009202:	4313      	orrs	r3, r2
 8009204:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009206:	4b1f      	ldr	r3, [pc, #124]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800920c:	f043 0310 	orr.w	r3, r3, #16
 8009210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d106      	bne.n	8009226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009218:	4b1a      	ldr	r3, [pc, #104]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	4a19      	ldr	r2, [pc, #100]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800921e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009224:	e00f      	b.n	8009246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d106      	bne.n	800923a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800922c:	4b15      	ldr	r3, [pc, #84]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4a14      	ldr	r2, [pc, #80]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009238:	e005      	b.n	8009246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800923a:	4b12      	ldr	r3, [pc, #72]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	4a11      	ldr	r2, [pc, #68]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a0e      	ldr	r2, [pc, #56]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800924c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009252:	f7f9 fb27 	bl	80028a4 <HAL_GetTick>
 8009256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009258:	e008      	b.n	800926c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800925a:	f7f9 fb23 	bl	80028a4 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d901      	bls.n	800926c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e006      	b.n	800927a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <RCCEx_PLL2_Config+0x15c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0f0      	beq.n	800925a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	58024400 	.word	0x58024400
 8009288:	ffff0007 	.word	0xffff0007

0800928c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800929a:	4b53      	ldr	r3, [pc, #332]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d101      	bne.n	80092aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e099      	b.n	80093de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092aa:	4b4f      	ldr	r3, [pc, #316]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a4e      	ldr	r2, [pc, #312]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80092b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b6:	f7f9 faf5 	bl	80028a4 <HAL_GetTick>
 80092ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092bc:	e008      	b.n	80092d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092be:	f7f9 faf1 	bl	80028a4 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e086      	b.n	80093de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092d0:	4b45      	ldr	r3, [pc, #276]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f0      	bne.n	80092be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80092dc:	4b42      	ldr	r3, [pc, #264]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	051b      	lsls	r3, r3, #20
 80092ea:	493f      	ldr	r1, [pc, #252]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	628b      	str	r3, [r1, #40]	; 0x28
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	3b01      	subs	r3, #1
 8009300:	025b      	lsls	r3, r3, #9
 8009302:	b29b      	uxth	r3, r3
 8009304:	431a      	orrs	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	3b01      	subs	r3, #1
 800930c:	041b      	lsls	r3, r3, #16
 800930e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	3b01      	subs	r3, #1
 800931a:	061b      	lsls	r3, r3, #24
 800931c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009320:	4931      	ldr	r1, [pc, #196]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009322:	4313      	orrs	r3, r2
 8009324:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009326:	4b30      	ldr	r3, [pc, #192]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	492d      	ldr	r1, [pc, #180]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009334:	4313      	orrs	r3, r2
 8009336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009338:	4b2b      	ldr	r3, [pc, #172]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	4928      	ldr	r1, [pc, #160]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800934a:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	4a26      	ldr	r2, [pc, #152]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009356:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800935a:	4b24      	ldr	r3, [pc, #144]	; (80093ec <RCCEx_PLL3_Config+0x160>)
 800935c:	4013      	ands	r3, r2
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	69d2      	ldr	r2, [r2, #28]
 8009362:	00d2      	lsls	r2, r2, #3
 8009364:	4920      	ldr	r1, [pc, #128]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800936a:	4b1f      	ldr	r3, [pc, #124]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d106      	bne.n	800938a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800937c:	4b1a      	ldr	r3, [pc, #104]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	4a19      	ldr	r2, [pc, #100]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009388:	e00f      	b.n	80093aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d106      	bne.n	800939e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009390:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	4a14      	ldr	r2, [pc, #80]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 8009396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800939a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800939c:	e005      	b.n	80093aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800939e:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	4a11      	ldr	r2, [pc, #68]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80093a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093aa:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a0e      	ldr	r2, [pc, #56]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80093b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093b6:	f7f9 fa75 	bl	80028a4 <HAL_GetTick>
 80093ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093bc:	e008      	b.n	80093d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093be:	f7f9 fa71 	bl	80028a4 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d901      	bls.n	80093d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e006      	b.n	80093de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <RCCEx_PLL3_Config+0x15c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0f0      	beq.n	80093be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	58024400 	.word	0x58024400
 80093ec:	ffff0007 	.word	0xffff0007

080093f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d071      	beq.n	80094e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7f8 fc62 	bl	8001ce0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f003 0310 	and.w	r3, r3, #16
 800942e:	2b10      	cmp	r3, #16
 8009430:	d050      	beq.n	80094d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	22ca      	movs	r2, #202	; 0xca
 8009438:	625a      	str	r2, [r3, #36]	; 0x24
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2253      	movs	r2, #83	; 0x53
 8009440:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f924 	bl	8009690 <RTC_EnterInitMode>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d124      	bne.n	800949c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6899      	ldr	r1, [r3, #8]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <HAL_RTC_Init+0x100>)
 800945e:	400b      	ands	r3, r1
 8009460:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6899      	ldr	r1, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	0419      	lsls	r1, r3, #16
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f930 	bl	80096f8 <RTC_ExitInitMode>
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d113      	bne.n	80094ca <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 0203 	bic.w	r2, r2, #3
 80094b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	69da      	ldr	r2, [r3, #28]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	22ff      	movs	r2, #255	; 0xff
 80094d0:	625a      	str	r2, [r3, #36]	; 0x24
 80094d2:	e001      	b.n	80094d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d103      	bne.n	80094e6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	ff8fffbf 	.word	0xff8fffbf

080094f4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b22      	ldr	r3, [pc, #136]	; (80095a8 <HAL_RTC_GetTime+0xb4>)
 8009520:	4013      	ands	r3, r2
 8009522:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800952e:	b2da      	uxtb	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800953e:	b2da      	uxtb	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800954c:	b2da      	uxtb	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	0d9b      	lsrs	r3, r3, #22
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	b2da      	uxtb	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11a      	bne.n	800959e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f901 	bl	8009774 <RTC_Bcd2ToByte>
 8009572:	4603      	mov	r3, r0
 8009574:	461a      	mov	r2, r3
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f8f8 	bl	8009774 <RTC_Bcd2ToByte>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	789b      	ldrb	r3, [r3, #2]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f8ef 	bl	8009774 <RTC_Bcd2ToByte>
 8009596:	4603      	mov	r3, r0
 8009598:	461a      	mov	r2, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	007f7f7f 	.word	0x007f7f7f

080095ac <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	4b21      	ldr	r3, [pc, #132]	; (8009644 <HAL_RTC_GetDate+0x98>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	0c1b      	lsrs	r3, r3, #16
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	0a1b      	lsrs	r3, r3, #8
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 031f 	and.w	r3, r3, #31
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	0b5b      	lsrs	r3, r3, #13
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d11a      	bne.n	8009638 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	78db      	ldrb	r3, [r3, #3]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f8b4 	bl	8009774 <RTC_Bcd2ToByte>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	785b      	ldrb	r3, [r3, #1]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f8ab 	bl	8009774 <RTC_Bcd2ToByte>
 800961e:	4603      	mov	r3, r0
 8009620:	461a      	mov	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	789b      	ldrb	r3, [r3, #2]
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f8a2 	bl	8009774 <RTC_Bcd2ToByte>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	00ffff3f 	.word	0x00ffff3f

08009648 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a0d      	ldr	r2, [pc, #52]	; (800968c <HAL_RTC_WaitForSynchro+0x44>)
 8009656:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009658:	f7f9 f924 	bl	80028a4 <HAL_GetTick>
 800965c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800965e:	e009      	b.n	8009674 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009660:	f7f9 f920 	bl	80028a4 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800966e:	d901      	bls.n	8009674 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e007      	b.n	8009684 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0ee      	beq.n	8009660 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	0003ff5f 	.word	0x0003ff5f

08009690 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d120      	bne.n	80096ec <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80096b4:	f7f9 f8f6 	bl	80028a4 <HAL_GetTick>
 80096b8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80096ba:	e00d      	b.n	80096d8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80096bc:	f7f9 f8f2 	bl	80028a4 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096ca:	d905      	bls.n	80096d8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2203      	movs	r2, #3
 80096d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d102      	bne.n	80096ec <RTC_EnterInitMode+0x5c>
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d1e7      	bne.n	80096bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009704:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <RTC_ExitInitMode+0x78>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	4a19      	ldr	r2, [pc, #100]	; (8009770 <RTC_ExitInitMode+0x78>)
 800970a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800970e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009710:	4b17      	ldr	r3, [pc, #92]	; (8009770 <RTC_ExitInitMode+0x78>)
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10c      	bne.n	8009736 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff ff93 	bl	8009648 <HAL_RTC_WaitForSynchro>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01e      	beq.n	8009766 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2203      	movs	r2, #3
 800972c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	73fb      	strb	r3, [r7, #15]
 8009734:	e017      	b.n	8009766 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <RTC_ExitInitMode+0x78>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	4a0d      	ldr	r2, [pc, #52]	; (8009770 <RTC_ExitInitMode+0x78>)
 800973c:	f023 0320 	bic.w	r3, r3, #32
 8009740:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff ff80 	bl	8009648 <HAL_RTC_WaitForSynchro>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2203      	movs	r2, #3
 8009752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <RTC_ExitInitMode+0x78>)
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	4a04      	ldr	r2, [pc, #16]	; (8009770 <RTC_ExitInitMode+0x78>)
 8009760:	f043 0320 	orr.w	r3, r3, #32
 8009764:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	58004000 	.word	0x58004000

08009774 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	b2db      	uxtb	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	0092      	lsls	r2, r2, #2
 8009788:	4413      	add	r3, r2
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	b2da      	uxtb	r2, r3
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	4413      	add	r3, r2
 800979a:	b2db      	uxtb	r3, r3
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e28e      	b.n	8009cd8 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80097ba:	f7f9 f8a3 	bl	8002904 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d113      	bne.n	80097f0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a96      	ldr	r2, [pc, #600]	; (8009a28 <HAL_SAI_Init+0x280>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d004      	beq.n	80097dc <HAL_SAI_Init+0x34>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a95      	ldr	r2, [pc, #596]	; (8009a2c <HAL_SAI_Init+0x284>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d107      	bne.n	80097ec <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d103      	bne.n	80097ec <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e273      	b.n	8009cd8 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a8c      	ldr	r2, [pc, #560]	; (8009a28 <HAL_SAI_Init+0x280>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d004      	beq.n	8009804 <HAL_SAI_Init+0x5c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a8c      	ldr	r2, [pc, #560]	; (8009a30 <HAL_SAI_Init+0x288>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d102      	bne.n	800980a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009804:	4b8b      	ldr	r3, [pc, #556]	; (8009a34 <HAL_SAI_Init+0x28c>)
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	e028      	b.n	800985c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a8a      	ldr	r2, [pc, #552]	; (8009a38 <HAL_SAI_Init+0x290>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d004      	beq.n	800981e <HAL_SAI_Init+0x76>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a88      	ldr	r2, [pc, #544]	; (8009a3c <HAL_SAI_Init+0x294>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d102      	bne.n	8009824 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800981e:	4b88      	ldr	r3, [pc, #544]	; (8009a40 <HAL_SAI_Init+0x298>)
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	e01b      	b.n	800985c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a86      	ldr	r2, [pc, #536]	; (8009a44 <HAL_SAI_Init+0x29c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_SAI_Init+0x90>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a85      	ldr	r2, [pc, #532]	; (8009a48 <HAL_SAI_Init+0x2a0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d102      	bne.n	800983e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009838:	4b84      	ldr	r3, [pc, #528]	; (8009a4c <HAL_SAI_Init+0x2a4>)
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	e00e      	b.n	800985c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a7a      	ldr	r2, [pc, #488]	; (8009a2c <HAL_SAI_Init+0x284>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d004      	beq.n	8009852 <HAL_SAI_Init+0xaa>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a80      	ldr	r2, [pc, #512]	; (8009a50 <HAL_SAI_Init+0x2a8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d102      	bne.n	8009858 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009852:	4b80      	ldr	r3, [pc, #512]	; (8009a54 <HAL_SAI_Init+0x2ac>)
 8009854:	61bb      	str	r3, [r7, #24]
 8009856:	e001      	b.n	800985c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e23d      	b.n	8009cd8 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d106      	bne.n	8009876 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7f8 fd37 	bl	80022e4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fa40 	bl	8009cfc <SAI_Disable>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e228      	b.n	8009cd8 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d00c      	beq.n	80098b0 <HAL_SAI_Init+0x108>
 8009896:	2b02      	cmp	r3, #2
 8009898:	d80d      	bhi.n	80098b6 <HAL_SAI_Init+0x10e>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <HAL_SAI_Init+0xfc>
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d003      	beq.n	80098aa <HAL_SAI_Init+0x102>
 80098a2:	e008      	b.n	80098b6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098a8:	e008      	b.n	80098bc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80098aa:	2310      	movs	r3, #16
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098ae:	e005      	b.n	80098bc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80098b0:	2320      	movs	r3, #32
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098b4:	e002      	b.n	80098bc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80098ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2b05      	cmp	r3, #5
 80098c2:	d832      	bhi.n	800992a <HAL_SAI_Init+0x182>
 80098c4:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <HAL_SAI_Init+0x124>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	080098e5 	.word	0x080098e5
 80098d0:	080098eb 	.word	0x080098eb
 80098d4:	080098f3 	.word	0x080098f3
 80098d8:	080098fb 	.word	0x080098fb
 80098dc:	0800990b 	.word	0x0800990b
 80098e0:	0800991b 	.word	0x0800991b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]
      break;
 80098e8:	e022      	b.n	8009930 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80098ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ee:	61fb      	str	r3, [r7, #28]
      break;
 80098f0:	e01e      	b.n	8009930 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80098f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098f6:	61fb      	str	r3, [r7, #28]
      break;
 80098f8:	e01a      	b.n	8009930 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80098fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	f043 0301 	orr.w	r3, r3, #1
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009908:	e012      	b.n	8009930 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800990a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800990e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	f043 0302 	orr.w	r3, r3, #2
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009918:	e00a      	b.n	8009930 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800991a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800991e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	f043 0303 	orr.w	r3, r3, #3
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009928:	e002      	b.n	8009930 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]
      break;
 800992e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009934:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80c5 	beq.w	8009aca <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a37      	ldr	r2, [pc, #220]	; (8009a28 <HAL_SAI_Init+0x280>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <HAL_SAI_Init+0x1b0>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a37      	ldr	r2, [pc, #220]	; (8009a30 <HAL_SAI_Init+0x288>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d106      	bne.n	8009966 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009958:	f44f 7080 	mov.w	r0, #256	; 0x100
 800995c:	f04f 0100 	mov.w	r1, #0
 8009960:	f7fe fa52 	bl	8007e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8009964:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a33      	ldr	r2, [pc, #204]	; (8009a38 <HAL_SAI_Init+0x290>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d004      	beq.n	800997a <HAL_SAI_Init+0x1d2>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a31      	ldr	r2, [pc, #196]	; (8009a3c <HAL_SAI_Init+0x294>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d106      	bne.n	8009988 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800997a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800997e:	f04f 0100 	mov.w	r1, #0
 8009982:	f7fe fa41 	bl	8007e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8009986:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a2d      	ldr	r2, [pc, #180]	; (8009a44 <HAL_SAI_Init+0x29c>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d004      	beq.n	800999c <HAL_SAI_Init+0x1f4>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2c      	ldr	r2, [pc, #176]	; (8009a48 <HAL_SAI_Init+0x2a0>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d106      	bne.n	80099aa <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800999c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80099a0:	f04f 0100 	mov.w	r1, #0
 80099a4:	f7fe fa30 	bl	8007e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80099a8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1f      	ldr	r2, [pc, #124]	; (8009a2c <HAL_SAI_Init+0x284>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d106      	bne.n	80099c2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80099b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80099b8:	f04f 0100 	mov.w	r1, #0
 80099bc:	f7fe fa24 	bl	8007e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80099c0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a22      	ldr	r2, [pc, #136]	; (8009a50 <HAL_SAI_Init+0x2a8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d106      	bne.n	80099da <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80099cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80099d0:	f04f 0100 	mov.w	r1, #0
 80099d4:	f7fe fa18 	bl	8007e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80099d8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80099e2:	d139      	bne.n	8009a58 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d102      	bne.n	80099f2 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e00a      	b.n	8009a08 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f6:	2b08      	cmp	r3, #8
 80099f8:	d103      	bne.n	8009a02 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80099fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	e002      	b.n	8009a08 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a06:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	4619      	mov	r1, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	fb02 f303 	mul.w	r3, r2, r3
 8009a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a22:	613b      	str	r3, [r7, #16]
 8009a24:	e030      	b.n	8009a88 <HAL_SAI_Init+0x2e0>
 8009a26:	bf00      	nop
 8009a28:	40015804 	.word	0x40015804
 8009a2c:	58005404 	.word	0x58005404
 8009a30:	40015824 	.word	0x40015824
 8009a34:	40015800 	.word	0x40015800
 8009a38:	40015c04 	.word	0x40015c04
 8009a3c:	40015c24 	.word	0x40015c24
 8009a40:	40015c00 	.word	0x40015c00
 8009a44:	40016004 	.word	0x40016004
 8009a48:	40016024 	.word	0x40016024
 8009a4c:	40016000 	.word	0x40016000
 8009a50:	58005424 	.word	0x58005424
 8009a54:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a60:	d101      	bne.n	8009a66 <HAL_SAI_Init+0x2be>
 8009a62:	2302      	movs	r3, #2
 8009a64:	e000      	b.n	8009a68 <HAL_SAI_Init+0x2c0>
 8009a66:	2301      	movs	r3, #1
 8009a68:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	4619      	mov	r1, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	fb02 f303 	mul.w	r3, r2, r3
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a86:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	4a95      	ldr	r2, [pc, #596]	; (8009ce0 <HAL_SAI_Init+0x538>)
 8009a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a90:	08da      	lsrs	r2, r3, #3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009a96:	6939      	ldr	r1, [r7, #16]
 8009a98:	4b91      	ldr	r3, [pc, #580]	; (8009ce0 <HAL_SAI_Init+0x538>)
 8009a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8009a9e:	08da      	lsrs	r2, r3, #3
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	1aca      	subs	r2, r1, r3
 8009aaa:	2a08      	cmp	r2, #8
 8009aac:	d904      	bls.n	8009ab8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d104      	bne.n	8009aca <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	085a      	lsrs	r2, r3, #1
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <HAL_SAI_Init+0x332>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d109      	bne.n	8009aee <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_SAI_Init+0x33e>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e001      	b.n	8009aea <HAL_SAI_Init+0x342>
 8009ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aea:	623b      	str	r3, [r7, #32]
 8009aec:	e008      	b.n	8009b00 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d102      	bne.n	8009afc <HAL_SAI_Init+0x354>
 8009af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009afa:	e000      	b.n	8009afe <HAL_SAI_Init+0x356>
 8009afc:	2300      	movs	r3, #0
 8009afe:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009b00:	f7f8 ff00 	bl	8002904 <HAL_GetREVID>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b0a:	d331      	bcc.n	8009b70 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6819      	ldr	r1, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4b73      	ldr	r3, [pc, #460]	; (8009ce4 <HAL_SAI_Init+0x53c>)
 8009b18:	400b      	ands	r3, r1
 8009b1a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6819      	ldr	r1, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b30:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b36:	431a      	orrs	r2, r3
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009b44:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009b50:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	051b      	lsls	r3, r3, #20
 8009b58:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009b5e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e02d      	b.n	8009bcc <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b5b      	ldr	r3, [pc, #364]	; (8009ce8 <HAL_SAI_Init+0x540>)
 8009b7c:	400b      	ands	r3, r1
 8009b7e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6819      	ldr	r1, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009b94:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009ba8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009bb4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	051b      	lsls	r3, r3, #20
 8009bbc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009bc2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6859      	ldr	r1, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b45      	ldr	r3, [pc, #276]	; (8009cec <HAL_SAI_Init+0x544>)
 8009bd8:	400b      	ands	r3, r1
 8009bda:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6859      	ldr	r1, [r3, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69da      	ldr	r2, [r3, #28]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6899      	ldr	r1, [r3, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	4b3a      	ldr	r3, [pc, #232]	; (8009cf0 <HAL_SAI_Init+0x548>)
 8009c06:	400b      	ands	r3, r1
 8009c08:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6899      	ldr	r1, [r3, #8]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c14:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009c1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009c20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009c26:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009c30:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68d9      	ldr	r1, [r3, #12]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009c48:	400b      	ands	r3, r1
 8009c4a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68d9      	ldr	r1, [r3, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c60:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009c62:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1e      	ldr	r2, [pc, #120]	; (8009cf4 <HAL_SAI_Init+0x54c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d004      	beq.n	8009c8a <HAL_SAI_Init+0x4e2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a1c      	ldr	r2, [pc, #112]	; (8009cf8 <HAL_SAI_Init+0x550>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d119      	bne.n	8009cbe <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	f023 0201 	bic.w	r2, r3, #1
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d10e      	bne.n	8009cbe <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009cac:	431a      	orrs	r2, r3
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	f043 0201 	orr.w	r2, r3, #1
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3728      	adds	r7, #40	; 0x28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	cccccccd 	.word	0xcccccccd
 8009ce4:	f005c010 	.word	0xf005c010
 8009ce8:	f805c010 	.word	0xf805c010
 8009cec:	ffff1ff0 	.word	0xffff1ff0
 8009cf0:	fff88000 	.word	0xfff88000
 8009cf4:	40015804 	.word	0x40015804
 8009cf8:	58005404 	.word	0x58005404

08009cfc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009d04:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <SAI_Disable+0x6c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a18      	ldr	r2, [pc, #96]	; (8009d6c <SAI_Disable+0x70>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	0b1b      	lsrs	r3, r3, #12
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d26:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	72fb      	strb	r3, [r7, #11]
      break;
 8009d42:	e009      	b.n	8009d58 <SAI_Disable+0x5c>
    }
    count--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e7      	bne.n	8009d28 <SAI_Disable+0x2c>

  return status;
 8009d58:	7afb      	ldrb	r3, [r7, #11]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	24000000 	.word	0x24000000
 8009d6c:	95cbec1b 	.word	0x95cbec1b

08009d70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e02b      	b.n	8009ddc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d106      	bne.n	8009d9e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7f8 fa99 	bl	80022d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3304      	adds	r3, #4
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f001 fdd5 	bl	800b960 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	f001 fe29 	bl	800ba18 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009dc6:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <HAL_SDRAM_Init+0x74>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a06      	ldr	r2, [pc, #24]	; (8009de4 <HAL_SDRAM_Init+0x74>)
 8009dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dd0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	52004000 	.word	0x52004000

08009de8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e03e      	b.n	8009e7c <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7f8 fa52 	bl	80022bc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f001 fc6e 	bl	800b704 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	461a      	mov	r2, r3
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	f001 fcf6 	bl	800b824 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6858      	ldr	r0, [r3, #4]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	f001 fd3d 	bl	800b8c4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	6892      	ldr	r2, [r2, #8]
 8009e52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	6892      	ldr	r2, [r2, #8]
 8009e5e:	f041 0101 	orr.w	r1, r1, #1
 8009e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009e66:	4b07      	ldr	r3, [pc, #28]	; (8009e84 <HAL_SRAM_Init+0x9c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a06      	ldr	r2, [pc, #24]	; (8009e84 <HAL_SRAM_Init+0x9c>)
 8009e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e70:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	52004000 	.word	0x52004000

08009e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e049      	b.n	8009f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f841 	bl	8009f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	f000 fa00 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
	...

08009f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d001      	beq.n	8009f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e054      	b.n	800a00e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2202      	movs	r2, #2
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a26      	ldr	r2, [pc, #152]	; (800a01c <HAL_TIM_Base_Start_IT+0xd0>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d022      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8e:	d01d      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a22      	ldr	r2, [pc, #136]	; (800a020 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d018      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a21      	ldr	r2, [pc, #132]	; (800a024 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d013      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1f      	ldr	r2, [pc, #124]	; (800a028 <HAL_TIM_Base_Start_IT+0xdc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d00e      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <HAL_TIM_Base_Start_IT+0xe0>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d009      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a1c      	ldr	r2, [pc, #112]	; (800a030 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d004      	beq.n	8009fcc <HAL_TIM_Base_Start_IT+0x80>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	; (800a034 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d115      	bne.n	8009ff8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	4b19      	ldr	r3, [pc, #100]	; (800a038 <HAL_TIM_Base_Start_IT+0xec>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b06      	cmp	r3, #6
 8009fdc:	d015      	beq.n	800a00a <HAL_TIM_Base_Start_IT+0xbe>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe4:	d011      	beq.n	800a00a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0201 	orr.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff6:	e008      	b.n	800a00a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	e000      	b.n	800a00c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	40010000 	.word	0x40010000
 800a020:	40000400 	.word	0x40000400
 800a024:	40000800 	.word	0x40000800
 800a028:	40000c00 	.word	0x40000c00
 800a02c:	40010400 	.word	0x40010400
 800a030:	40001800 	.word	0x40001800
 800a034:	40014000 	.word	0x40014000
 800a038:	00010007 	.word	0x00010007

0800a03c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d122      	bne.n	800a098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d11b      	bne.n	800a098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0202 	mvn.w	r2, #2
 800a068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f905 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a084:	e005      	b.n	800a092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f8f7 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f908 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d122      	bne.n	800a0ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d11b      	bne.n	800a0ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f06f 0204 	mvn.w	r2, #4
 800a0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f8db 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a0d8:	e005      	b.n	800a0e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f8cd 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f8de 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	f003 0308 	and.w	r3, r3, #8
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d122      	bne.n	800a140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b08      	cmp	r3, #8
 800a106:	d11b      	bne.n	800a140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f06f 0208 	mvn.w	r2, #8
 800a110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2204      	movs	r2, #4
 800a116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	f003 0303 	and.w	r3, r3, #3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f8b1 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a12c:	e005      	b.n	800a13a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f8a3 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f8b4 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0310 	and.w	r3, r3, #16
 800a14a:	2b10      	cmp	r3, #16
 800a14c:	d122      	bne.n	800a194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	f003 0310 	and.w	r3, r3, #16
 800a158:	2b10      	cmp	r3, #16
 800a15a:	d11b      	bne.n	800a194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f06f 0210 	mvn.w	r2, #16
 800a164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2208      	movs	r2, #8
 800a16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f887 	bl	800a28e <HAL_TIM_IC_CaptureCallback>
 800a180:	e005      	b.n	800a18e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f879 	bl	800a27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f88a 	bl	800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d10e      	bne.n	800a1c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d107      	bne.n	800a1c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f06f 0201 	mvn.w	r2, #1
 800a1b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7f7 f994 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ca:	2b80      	cmp	r3, #128	; 0x80
 800a1cc:	d10e      	bne.n	800a1ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d8:	2b80      	cmp	r3, #128	; 0x80
 800a1da:	d107      	bne.n	800a1ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f914 	bl	800a414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fa:	d10e      	bne.n	800a21a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b80      	cmp	r3, #128	; 0x80
 800a208:	d107      	bne.n	800a21a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f907 	bl	800a428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a224:	2b40      	cmp	r3, #64	; 0x40
 800a226:	d10e      	bne.n	800a246 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a232:	2b40      	cmp	r3, #64	; 0x40
 800a234:	d107      	bne.n	800a246 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f838 	bl	800a2b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b20      	cmp	r3, #32
 800a252:	d10e      	bne.n	800a272 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b20      	cmp	r3, #32
 800a260:	d107      	bne.n	800a272 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f06f 0220 	mvn.w	r2, #32
 800a26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8c7 	bl	800a400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a272:	bf00      	nop
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a40      	ldr	r2, [pc, #256]	; (800a3e0 <TIM_Base_SetConfig+0x114>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d013      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ea:	d00f      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a3d      	ldr	r2, [pc, #244]	; (800a3e4 <TIM_Base_SetConfig+0x118>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00b      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a3c      	ldr	r2, [pc, #240]	; (800a3e8 <TIM_Base_SetConfig+0x11c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d007      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a3b      	ldr	r2, [pc, #236]	; (800a3ec <TIM_Base_SetConfig+0x120>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d003      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a3a      	ldr	r2, [pc, #232]	; (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d108      	bne.n	800a31e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a2f      	ldr	r2, [pc, #188]	; (800a3e0 <TIM_Base_SetConfig+0x114>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d01f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32c:	d01b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a2c      	ldr	r2, [pc, #176]	; (800a3e4 <TIM_Base_SetConfig+0x118>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d017      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a2b      	ldr	r2, [pc, #172]	; (800a3e8 <TIM_Base_SetConfig+0x11c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d013      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a2a      	ldr	r2, [pc, #168]	; (800a3ec <TIM_Base_SetConfig+0x120>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a29      	ldr	r2, [pc, #164]	; (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a28      	ldr	r2, [pc, #160]	; (800a3f4 <TIM_Base_SetConfig+0x128>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a27      	ldr	r2, [pc, #156]	; (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a26      	ldr	r2, [pc, #152]	; (800a3fc <TIM_Base_SetConfig+0x130>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d108      	bne.n	800a378 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a36c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a10      	ldr	r2, [pc, #64]	; (800a3e0 <TIM_Base_SetConfig+0x114>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a12      	ldr	r2, [pc, #72]	; (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a11      	ldr	r2, [pc, #68]	; (800a3f4 <TIM_Base_SetConfig+0x128>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a10      	ldr	r2, [pc, #64]	; (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a0f      	ldr	r2, [pc, #60]	; (800a3fc <TIM_Base_SetConfig+0x130>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d103      	bne.n	800a3cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	691a      	ldr	r2, [r3, #16]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	615a      	str	r2, [r3, #20]
}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40010000 	.word	0x40010000
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40000c00 	.word	0x40000c00
 800a3f0:	40010400 	.word	0x40010400
 800a3f4:	40014000 	.word	0x40014000
 800a3f8:	40014400 	.word	0x40014400
 800a3fc:	40014800 	.word	0x40014800

0800a400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e042      	b.n	800a4d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7f7 fc6f 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2224      	movs	r2, #36	; 0x24
 800a46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0201 	bic.w	r2, r2, #1
 800a47c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f8ba 	bl	800a5f8 <UART_SetConfig>
 800a484:	4603      	mov	r3, r0
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e022      	b.n	800a4d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fe16 	bl	800b0c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0201 	orr.w	r2, r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fe9d 	bl	800b20c <UART_CheckIdleState>
 800a4d2:	4603      	mov	r3, r0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	; 0x28
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	2b20      	cmp	r3, #32
 800a4f4:	d17b      	bne.n	800a5ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <HAL_UART_Transmit+0x26>
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e074      	b.n	800a5f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2221      	movs	r2, #33	; 0x21
 800a512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a516:	f7f8 f9c5 	bl	80028a4 <HAL_GetTick>
 800a51a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	88fa      	ldrh	r2, [r7, #6]
 800a520:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	88fa      	ldrh	r2, [r7, #6]
 800a528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a534:	d108      	bne.n	800a548 <HAL_UART_Transmit+0x6c>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	e003      	b.n	800a550 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a550:	e030      	b.n	800a5b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2200      	movs	r2, #0
 800a55a:	2180      	movs	r1, #128	; 0x80
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 feff 	bl	800b360 <UART_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2220      	movs	r2, #32
 800a56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e03d      	b.n	800a5f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10b      	bne.n	800a592 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a588:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	3302      	adds	r3, #2
 800a58e:	61bb      	str	r3, [r7, #24]
 800a590:	e007      	b.n	800a5a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1c8      	bne.n	800a552 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2140      	movs	r1, #64	; 0x40
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fec8 	bl	800b360 <UART_WaitOnFlagUntilTimeout>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e006      	b.n	800a5f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e000      	b.n	800a5f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a5ee:	2302      	movs	r3, #2
  }
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5fc:	b092      	sub	sp, #72	; 0x48
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	431a      	orrs	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	431a      	orrs	r2, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4bbe      	ldr	r3, [pc, #760]	; (800a920 <UART_SetConfig+0x328>)
 800a628:	4013      	ands	r3, r2
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a630:	430b      	orrs	r3, r1
 800a632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4ab3      	ldr	r2, [pc, #716]	; (800a924 <UART_SetConfig+0x32c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d004      	beq.n	800a664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a660:	4313      	orrs	r3, r2
 800a662:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	4baf      	ldr	r3, [pc, #700]	; (800a928 <UART_SetConfig+0x330>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a674:	430b      	orrs	r3, r1
 800a676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67e:	f023 010f 	bic.w	r1, r3, #15
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4aa6      	ldr	r2, [pc, #664]	; (800a92c <UART_SetConfig+0x334>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d177      	bne.n	800a788 <UART_SetConfig+0x190>
 800a698:	4ba5      	ldr	r3, [pc, #660]	; (800a930 <UART_SetConfig+0x338>)
 800a69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6a0:	2b28      	cmp	r3, #40	; 0x28
 800a6a2:	d86d      	bhi.n	800a780 <UART_SetConfig+0x188>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <UART_SetConfig+0xb4>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a751 	.word	0x0800a751
 800a6b0:	0800a781 	.word	0x0800a781
 800a6b4:	0800a781 	.word	0x0800a781
 800a6b8:	0800a781 	.word	0x0800a781
 800a6bc:	0800a781 	.word	0x0800a781
 800a6c0:	0800a781 	.word	0x0800a781
 800a6c4:	0800a781 	.word	0x0800a781
 800a6c8:	0800a781 	.word	0x0800a781
 800a6cc:	0800a759 	.word	0x0800a759
 800a6d0:	0800a781 	.word	0x0800a781
 800a6d4:	0800a781 	.word	0x0800a781
 800a6d8:	0800a781 	.word	0x0800a781
 800a6dc:	0800a781 	.word	0x0800a781
 800a6e0:	0800a781 	.word	0x0800a781
 800a6e4:	0800a781 	.word	0x0800a781
 800a6e8:	0800a781 	.word	0x0800a781
 800a6ec:	0800a761 	.word	0x0800a761
 800a6f0:	0800a781 	.word	0x0800a781
 800a6f4:	0800a781 	.word	0x0800a781
 800a6f8:	0800a781 	.word	0x0800a781
 800a6fc:	0800a781 	.word	0x0800a781
 800a700:	0800a781 	.word	0x0800a781
 800a704:	0800a781 	.word	0x0800a781
 800a708:	0800a781 	.word	0x0800a781
 800a70c:	0800a769 	.word	0x0800a769
 800a710:	0800a781 	.word	0x0800a781
 800a714:	0800a781 	.word	0x0800a781
 800a718:	0800a781 	.word	0x0800a781
 800a71c:	0800a781 	.word	0x0800a781
 800a720:	0800a781 	.word	0x0800a781
 800a724:	0800a781 	.word	0x0800a781
 800a728:	0800a781 	.word	0x0800a781
 800a72c:	0800a771 	.word	0x0800a771
 800a730:	0800a781 	.word	0x0800a781
 800a734:	0800a781 	.word	0x0800a781
 800a738:	0800a781 	.word	0x0800a781
 800a73c:	0800a781 	.word	0x0800a781
 800a740:	0800a781 	.word	0x0800a781
 800a744:	0800a781 	.word	0x0800a781
 800a748:	0800a781 	.word	0x0800a781
 800a74c:	0800a779 	.word	0x0800a779
 800a750:	2301      	movs	r3, #1
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a756:	e222      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a758:	2304      	movs	r3, #4
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75e:	e21e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a760:	2308      	movs	r3, #8
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e21a      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a768:	2310      	movs	r3, #16
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e216      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a770:	2320      	movs	r3, #32
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e212      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a778:	2340      	movs	r3, #64	; 0x40
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e20e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a780:	2380      	movs	r3, #128	; 0x80
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e20a      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a69      	ldr	r2, [pc, #420]	; (800a934 <UART_SetConfig+0x33c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d130      	bne.n	800a7f4 <UART_SetConfig+0x1fc>
 800a792:	4b67      	ldr	r3, [pc, #412]	; (800a930 <UART_SetConfig+0x338>)
 800a794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a796:	f003 0307 	and.w	r3, r3, #7
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	d826      	bhi.n	800a7ec <UART_SetConfig+0x1f4>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <UART_SetConfig+0x1ac>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7bd 	.word	0x0800a7bd
 800a7a8:	0800a7c5 	.word	0x0800a7c5
 800a7ac:	0800a7cd 	.word	0x0800a7cd
 800a7b0:	0800a7d5 	.word	0x0800a7d5
 800a7b4:	0800a7dd 	.word	0x0800a7dd
 800a7b8:	0800a7e5 	.word	0x0800a7e5
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c2:	e1ec      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ca:	e1e8      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d2:	e1e4      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7d4:	2310      	movs	r3, #16
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7da:	e1e0      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7dc:	2320      	movs	r3, #32
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e1dc      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e1d8      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7ec:	2380      	movs	r3, #128	; 0x80
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f2:	e1d4      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a4f      	ldr	r2, [pc, #316]	; (800a938 <UART_SetConfig+0x340>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d130      	bne.n	800a860 <UART_SetConfig+0x268>
 800a7fe:	4b4c      	ldr	r3, [pc, #304]	; (800a930 <UART_SetConfig+0x338>)
 800a800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	2b05      	cmp	r3, #5
 800a808:	d826      	bhi.n	800a858 <UART_SetConfig+0x260>
 800a80a:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <UART_SetConfig+0x218>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a829 	.word	0x0800a829
 800a814:	0800a831 	.word	0x0800a831
 800a818:	0800a839 	.word	0x0800a839
 800a81c:	0800a841 	.word	0x0800a841
 800a820:	0800a849 	.word	0x0800a849
 800a824:	0800a851 	.word	0x0800a851
 800a828:	2300      	movs	r3, #0
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82e:	e1b6      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a830:	2304      	movs	r3, #4
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a836:	e1b2      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a838:	2308      	movs	r3, #8
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a83e:	e1ae      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a840:	2310      	movs	r3, #16
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a846:	e1aa      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a848:	2320      	movs	r3, #32
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84e:	e1a6      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a856:	e1a2      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a858:	2380      	movs	r3, #128	; 0x80
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85e:	e19e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a35      	ldr	r2, [pc, #212]	; (800a93c <UART_SetConfig+0x344>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d130      	bne.n	800a8cc <UART_SetConfig+0x2d4>
 800a86a:	4b31      	ldr	r3, [pc, #196]	; (800a930 <UART_SetConfig+0x338>)
 800a86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	2b05      	cmp	r3, #5
 800a874:	d826      	bhi.n	800a8c4 <UART_SetConfig+0x2cc>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <UART_SetConfig+0x284>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a895 	.word	0x0800a895
 800a880:	0800a89d 	.word	0x0800a89d
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8ad 	.word	0x0800a8ad
 800a88c:	0800a8b5 	.word	0x0800a8b5
 800a890:	0800a8bd 	.word	0x0800a8bd
 800a894:	2300      	movs	r3, #0
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89a:	e180      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a89c:	2304      	movs	r3, #4
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8a2:	e17c      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8aa:	e178      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b2:	e174      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a8b4:	2320      	movs	r3, #32
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ba:	e170      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c2:	e16c      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a8c4:	2380      	movs	r3, #128	; 0x80
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ca:	e168      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a1b      	ldr	r2, [pc, #108]	; (800a940 <UART_SetConfig+0x348>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d142      	bne.n	800a95c <UART_SetConfig+0x364>
 800a8d6:	4b16      	ldr	r3, [pc, #88]	; (800a930 <UART_SetConfig+0x338>)
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	d838      	bhi.n	800a954 <UART_SetConfig+0x35c>
 800a8e2:	a201      	add	r2, pc, #4	; (adr r2, 800a8e8 <UART_SetConfig+0x2f0>)
 800a8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e8:	0800a901 	.word	0x0800a901
 800a8ec:	0800a909 	.word	0x0800a909
 800a8f0:	0800a911 	.word	0x0800a911
 800a8f4:	0800a919 	.word	0x0800a919
 800a8f8:	0800a945 	.word	0x0800a945
 800a8fc:	0800a94d 	.word	0x0800a94d
 800a900:	2300      	movs	r3, #0
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a906:	e14a      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a908:	2304      	movs	r3, #4
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90e:	e146      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a910:	2308      	movs	r3, #8
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a916:	e142      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a918:	2310      	movs	r3, #16
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a91e:	e13e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a920:	cfff69f3 	.word	0xcfff69f3
 800a924:	58000c00 	.word	0x58000c00
 800a928:	11fff4ff 	.word	0x11fff4ff
 800a92c:	40011000 	.word	0x40011000
 800a930:	58024400 	.word	0x58024400
 800a934:	40004400 	.word	0x40004400
 800a938:	40004800 	.word	0x40004800
 800a93c:	40004c00 	.word	0x40004c00
 800a940:	40005000 	.word	0x40005000
 800a944:	2320      	movs	r3, #32
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e128      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a94c:	2340      	movs	r3, #64	; 0x40
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e124      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a954:	2380      	movs	r3, #128	; 0x80
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e120      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4acb      	ldr	r2, [pc, #812]	; (800ac90 <UART_SetConfig+0x698>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d176      	bne.n	800aa54 <UART_SetConfig+0x45c>
 800a966:	4bcb      	ldr	r3, [pc, #812]	; (800ac94 <UART_SetConfig+0x69c>)
 800a968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a96e:	2b28      	cmp	r3, #40	; 0x28
 800a970:	d86c      	bhi.n	800aa4c <UART_SetConfig+0x454>
 800a972:	a201      	add	r2, pc, #4	; (adr r2, 800a978 <UART_SetConfig+0x380>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800aa1d 	.word	0x0800aa1d
 800a97c:	0800aa4d 	.word	0x0800aa4d
 800a980:	0800aa4d 	.word	0x0800aa4d
 800a984:	0800aa4d 	.word	0x0800aa4d
 800a988:	0800aa4d 	.word	0x0800aa4d
 800a98c:	0800aa4d 	.word	0x0800aa4d
 800a990:	0800aa4d 	.word	0x0800aa4d
 800a994:	0800aa4d 	.word	0x0800aa4d
 800a998:	0800aa25 	.word	0x0800aa25
 800a99c:	0800aa4d 	.word	0x0800aa4d
 800a9a0:	0800aa4d 	.word	0x0800aa4d
 800a9a4:	0800aa4d 	.word	0x0800aa4d
 800a9a8:	0800aa4d 	.word	0x0800aa4d
 800a9ac:	0800aa4d 	.word	0x0800aa4d
 800a9b0:	0800aa4d 	.word	0x0800aa4d
 800a9b4:	0800aa4d 	.word	0x0800aa4d
 800a9b8:	0800aa2d 	.word	0x0800aa2d
 800a9bc:	0800aa4d 	.word	0x0800aa4d
 800a9c0:	0800aa4d 	.word	0x0800aa4d
 800a9c4:	0800aa4d 	.word	0x0800aa4d
 800a9c8:	0800aa4d 	.word	0x0800aa4d
 800a9cc:	0800aa4d 	.word	0x0800aa4d
 800a9d0:	0800aa4d 	.word	0x0800aa4d
 800a9d4:	0800aa4d 	.word	0x0800aa4d
 800a9d8:	0800aa35 	.word	0x0800aa35
 800a9dc:	0800aa4d 	.word	0x0800aa4d
 800a9e0:	0800aa4d 	.word	0x0800aa4d
 800a9e4:	0800aa4d 	.word	0x0800aa4d
 800a9e8:	0800aa4d 	.word	0x0800aa4d
 800a9ec:	0800aa4d 	.word	0x0800aa4d
 800a9f0:	0800aa4d 	.word	0x0800aa4d
 800a9f4:	0800aa4d 	.word	0x0800aa4d
 800a9f8:	0800aa3d 	.word	0x0800aa3d
 800a9fc:	0800aa4d 	.word	0x0800aa4d
 800aa00:	0800aa4d 	.word	0x0800aa4d
 800aa04:	0800aa4d 	.word	0x0800aa4d
 800aa08:	0800aa4d 	.word	0x0800aa4d
 800aa0c:	0800aa4d 	.word	0x0800aa4d
 800aa10:	0800aa4d 	.word	0x0800aa4d
 800aa14:	0800aa4d 	.word	0x0800aa4d
 800aa18:	0800aa45 	.word	0x0800aa45
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa22:	e0bc      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa24:	2304      	movs	r3, #4
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2a:	e0b8      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa32:	e0b4      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3a:	e0b0      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa42:	e0ac      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa44:	2340      	movs	r3, #64	; 0x40
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4a:	e0a8      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa4c:	2380      	movs	r3, #128	; 0x80
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa52:	e0a4      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a8f      	ldr	r2, [pc, #572]	; (800ac98 <UART_SetConfig+0x6a0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d130      	bne.n	800aac0 <UART_SetConfig+0x4c8>
 800aa5e:	4b8d      	ldr	r3, [pc, #564]	; (800ac94 <UART_SetConfig+0x69c>)
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d826      	bhi.n	800aab8 <UART_SetConfig+0x4c0>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <UART_SetConfig+0x478>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aa89 	.word	0x0800aa89
 800aa74:	0800aa91 	.word	0x0800aa91
 800aa78:	0800aa99 	.word	0x0800aa99
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aaa9 	.word	0x0800aaa9
 800aa84:	0800aab1 	.word	0x0800aab1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8e:	e086      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa90:	2304      	movs	r3, #4
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa96:	e082      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aa98:	2308      	movs	r3, #8
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9e:	e07e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa6:	e07a      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aaa8:	2320      	movs	r3, #32
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaae:	e076      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab6:	e072      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aab8:	2380      	movs	r3, #128	; 0x80
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aabe:	e06e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a75      	ldr	r2, [pc, #468]	; (800ac9c <UART_SetConfig+0x6a4>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d130      	bne.n	800ab2c <UART_SetConfig+0x534>
 800aaca:	4b72      	ldr	r3, [pc, #456]	; (800ac94 <UART_SetConfig+0x69c>)
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	d826      	bhi.n	800ab24 <UART_SetConfig+0x52c>
 800aad6:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <UART_SetConfig+0x4e4>)
 800aad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aadc:	0800aaf5 	.word	0x0800aaf5
 800aae0:	0800aafd 	.word	0x0800aafd
 800aae4:	0800ab05 	.word	0x0800ab05
 800aae8:	0800ab0d 	.word	0x0800ab0d
 800aaec:	0800ab15 	.word	0x0800ab15
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafa:	e050      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800aafc:	2304      	movs	r3, #4
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab02:	e04c      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab04:	2308      	movs	r3, #8
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0a:	e048      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab12:	e044      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab14:	2320      	movs	r3, #32
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab1a:	e040      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab1c:	2340      	movs	r3, #64	; 0x40
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab22:	e03c      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab24:	2380      	movs	r3, #128	; 0x80
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2a:	e038      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a5b      	ldr	r2, [pc, #364]	; (800aca0 <UART_SetConfig+0x6a8>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d130      	bne.n	800ab98 <UART_SetConfig+0x5a0>
 800ab36:	4b57      	ldr	r3, [pc, #348]	; (800ac94 <UART_SetConfig+0x69c>)
 800ab38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3a:	f003 0307 	and.w	r3, r3, #7
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	d826      	bhi.n	800ab90 <UART_SetConfig+0x598>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <UART_SetConfig+0x550>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab61 	.word	0x0800ab61
 800ab4c:	0800ab69 	.word	0x0800ab69
 800ab50:	0800ab71 	.word	0x0800ab71
 800ab54:	0800ab79 	.word	0x0800ab79
 800ab58:	0800ab81 	.word	0x0800ab81
 800ab5c:	0800ab89 	.word	0x0800ab89
 800ab60:	2302      	movs	r3, #2
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab66:	e01a      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6e:	e016      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab70:	2308      	movs	r3, #8
 800ab72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab76:	e012      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7e:	e00e      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab80:	2320      	movs	r3, #32
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab86:	e00a      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab88:	2340      	movs	r3, #64	; 0x40
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8e:	e006      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab90:	2380      	movs	r3, #128	; 0x80
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab96:	e002      	b.n	800ab9e <UART_SetConfig+0x5a6>
 800ab98:	2380      	movs	r3, #128	; 0x80
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a3f      	ldr	r2, [pc, #252]	; (800aca0 <UART_SetConfig+0x6a8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	f040 80f8 	bne.w	800ad9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abae:	2b20      	cmp	r3, #32
 800abb0:	dc46      	bgt.n	800ac40 <UART_SetConfig+0x648>
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	f2c0 8082 	blt.w	800acbc <UART_SetConfig+0x6c4>
 800abb8:	3b02      	subs	r3, #2
 800abba:	2b1e      	cmp	r3, #30
 800abbc:	d87e      	bhi.n	800acbc <UART_SetConfig+0x6c4>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <UART_SetConfig+0x5cc>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800ac47 	.word	0x0800ac47
 800abc8:	0800acbd 	.word	0x0800acbd
 800abcc:	0800ac4f 	.word	0x0800ac4f
 800abd0:	0800acbd 	.word	0x0800acbd
 800abd4:	0800acbd 	.word	0x0800acbd
 800abd8:	0800acbd 	.word	0x0800acbd
 800abdc:	0800ac5f 	.word	0x0800ac5f
 800abe0:	0800acbd 	.word	0x0800acbd
 800abe4:	0800acbd 	.word	0x0800acbd
 800abe8:	0800acbd 	.word	0x0800acbd
 800abec:	0800acbd 	.word	0x0800acbd
 800abf0:	0800acbd 	.word	0x0800acbd
 800abf4:	0800acbd 	.word	0x0800acbd
 800abf8:	0800acbd 	.word	0x0800acbd
 800abfc:	0800ac6f 	.word	0x0800ac6f
 800ac00:	0800acbd 	.word	0x0800acbd
 800ac04:	0800acbd 	.word	0x0800acbd
 800ac08:	0800acbd 	.word	0x0800acbd
 800ac0c:	0800acbd 	.word	0x0800acbd
 800ac10:	0800acbd 	.word	0x0800acbd
 800ac14:	0800acbd 	.word	0x0800acbd
 800ac18:	0800acbd 	.word	0x0800acbd
 800ac1c:	0800acbd 	.word	0x0800acbd
 800ac20:	0800acbd 	.word	0x0800acbd
 800ac24:	0800acbd 	.word	0x0800acbd
 800ac28:	0800acbd 	.word	0x0800acbd
 800ac2c:	0800acbd 	.word	0x0800acbd
 800ac30:	0800acbd 	.word	0x0800acbd
 800ac34:	0800acbd 	.word	0x0800acbd
 800ac38:	0800acbd 	.word	0x0800acbd
 800ac3c:	0800acaf 	.word	0x0800acaf
 800ac40:	2b40      	cmp	r3, #64	; 0x40
 800ac42:	d037      	beq.n	800acb4 <UART_SetConfig+0x6bc>
 800ac44:	e03a      	b.n	800acbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac46:	f7fd fe5f 	bl	8008908 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac4c:	e03c      	b.n	800acc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fd fe6e 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac5c:	e034      	b.n	800acc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac5e:	f107 0318 	add.w	r3, r7, #24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd ffba 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac6c:	e02c      	b.n	800acc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac6e:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <UART_SetConfig+0x69c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0320 	and.w	r3, r3, #32
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d016      	beq.n	800aca8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac7a:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <UART_SetConfig+0x69c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	08db      	lsrs	r3, r3, #3
 800ac80:	f003 0303 	and.w	r3, r3, #3
 800ac84:	4a07      	ldr	r2, [pc, #28]	; (800aca4 <UART_SetConfig+0x6ac>)
 800ac86:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac8c:	e01c      	b.n	800acc8 <UART_SetConfig+0x6d0>
 800ac8e:	bf00      	nop
 800ac90:	40011400 	.word	0x40011400
 800ac94:	58024400 	.word	0x58024400
 800ac98:	40007800 	.word	0x40007800
 800ac9c:	40007c00 	.word	0x40007c00
 800aca0:	58000c00 	.word	0x58000c00
 800aca4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aca8:	4b9d      	ldr	r3, [pc, #628]	; (800af20 <UART_SetConfig+0x928>)
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acac:	e00c      	b.n	800acc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acae:	4b9d      	ldr	r3, [pc, #628]	; (800af24 <UART_SetConfig+0x92c>)
 800acb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb2:	e009      	b.n	800acc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acba:	e005      	b.n	800acc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800acc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 81de 	beq.w	800b08c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd4:	4a94      	ldr	r2, [pc, #592]	; (800af28 <UART_SetConfig+0x930>)
 800acd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acda:	461a      	mov	r2, r3
 800acdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acde:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	4613      	mov	r3, r2
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	4413      	add	r3, r2
 800acee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d305      	bcc.n	800ad00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d903      	bls.n	800ad08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad06:	e1c1      	b.n	800b08c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	60bb      	str	r3, [r7, #8]
 800ad0e:	60fa      	str	r2, [r7, #12]
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	4a84      	ldr	r2, [pc, #528]	; (800af28 <UART_SetConfig+0x930>)
 800ad16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	607a      	str	r2, [r7, #4]
 800ad22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad2a:	f7f5 fb29 	bl	8000380 <__aeabi_uldivmod>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4610      	mov	r0, r2
 800ad34:	4619      	mov	r1, r3
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	020b      	lsls	r3, r1, #8
 800ad40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad44:	0202      	lsls	r2, r0, #8
 800ad46:	6979      	ldr	r1, [r7, #20]
 800ad48:	6849      	ldr	r1, [r1, #4]
 800ad4a:	0849      	lsrs	r1, r1, #1
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	4605      	mov	r5, r0
 800ad52:	eb12 0804 	adds.w	r8, r2, r4
 800ad56:	eb43 0905 	adc.w	r9, r3, r5
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	469a      	mov	sl, r3
 800ad62:	4693      	mov	fp, r2
 800ad64:	4652      	mov	r2, sl
 800ad66:	465b      	mov	r3, fp
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 fb08 	bl	8000380 <__aeabi_uldivmod>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4613      	mov	r3, r2
 800ad76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad7e:	d308      	bcc.n	800ad92 <UART_SetConfig+0x79a>
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad86:	d204      	bcs.n	800ad92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad8e:	60da      	str	r2, [r3, #12]
 800ad90:	e17c      	b.n	800b08c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad98:	e178      	b.n	800b08c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ada2:	f040 80c5 	bne.w	800af30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ada6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800adaa:	2b20      	cmp	r3, #32
 800adac:	dc48      	bgt.n	800ae40 <UART_SetConfig+0x848>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	db7b      	blt.n	800aeaa <UART_SetConfig+0x8b2>
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d879      	bhi.n	800aeaa <UART_SetConfig+0x8b2>
 800adb6:	a201      	add	r2, pc, #4	; (adr r2, 800adbc <UART_SetConfig+0x7c4>)
 800adb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbc:	0800ae47 	.word	0x0800ae47
 800adc0:	0800ae4f 	.word	0x0800ae4f
 800adc4:	0800aeab 	.word	0x0800aeab
 800adc8:	0800aeab 	.word	0x0800aeab
 800adcc:	0800ae57 	.word	0x0800ae57
 800add0:	0800aeab 	.word	0x0800aeab
 800add4:	0800aeab 	.word	0x0800aeab
 800add8:	0800aeab 	.word	0x0800aeab
 800addc:	0800ae67 	.word	0x0800ae67
 800ade0:	0800aeab 	.word	0x0800aeab
 800ade4:	0800aeab 	.word	0x0800aeab
 800ade8:	0800aeab 	.word	0x0800aeab
 800adec:	0800aeab 	.word	0x0800aeab
 800adf0:	0800aeab 	.word	0x0800aeab
 800adf4:	0800aeab 	.word	0x0800aeab
 800adf8:	0800aeab 	.word	0x0800aeab
 800adfc:	0800ae77 	.word	0x0800ae77
 800ae00:	0800aeab 	.word	0x0800aeab
 800ae04:	0800aeab 	.word	0x0800aeab
 800ae08:	0800aeab 	.word	0x0800aeab
 800ae0c:	0800aeab 	.word	0x0800aeab
 800ae10:	0800aeab 	.word	0x0800aeab
 800ae14:	0800aeab 	.word	0x0800aeab
 800ae18:	0800aeab 	.word	0x0800aeab
 800ae1c:	0800aeab 	.word	0x0800aeab
 800ae20:	0800aeab 	.word	0x0800aeab
 800ae24:	0800aeab 	.word	0x0800aeab
 800ae28:	0800aeab 	.word	0x0800aeab
 800ae2c:	0800aeab 	.word	0x0800aeab
 800ae30:	0800aeab 	.word	0x0800aeab
 800ae34:	0800aeab 	.word	0x0800aeab
 800ae38:	0800aeab 	.word	0x0800aeab
 800ae3c:	0800ae9d 	.word	0x0800ae9d
 800ae40:	2b40      	cmp	r3, #64	; 0x40
 800ae42:	d02e      	beq.n	800aea2 <UART_SetConfig+0x8aa>
 800ae44:	e031      	b.n	800aeaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae46:	f7fb fd67 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 800ae4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae4c:	e033      	b.n	800aeb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae4e:	f7fb fd79 	bl	8006944 <HAL_RCC_GetPCLK2Freq>
 800ae52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae54:	e02f      	b.n	800aeb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fd fd6a 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae64:	e027      	b.n	800aeb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae66:	f107 0318 	add.w	r3, r7, #24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd feb6 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae74:	e01f      	b.n	800aeb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae76:	4b2d      	ldr	r3, [pc, #180]	; (800af2c <UART_SetConfig+0x934>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d009      	beq.n	800ae96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae82:	4b2a      	ldr	r3, [pc, #168]	; (800af2c <UART_SetConfig+0x934>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	08db      	lsrs	r3, r3, #3
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	4a24      	ldr	r2, [pc, #144]	; (800af20 <UART_SetConfig+0x928>)
 800ae8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae94:	e00f      	b.n	800aeb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae96:	4b22      	ldr	r3, [pc, #136]	; (800af20 <UART_SetConfig+0x928>)
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9a:	e00c      	b.n	800aeb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae9c:	4b21      	ldr	r3, [pc, #132]	; (800af24 <UART_SetConfig+0x92c>)
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea0:	e009      	b.n	800aeb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea8:	e005      	b.n	800aeb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aeb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 80e7 	beq.w	800b08c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	4a19      	ldr	r2, [pc, #100]	; (800af28 <UART_SetConfig+0x930>)
 800aec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aecc:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed0:	005a      	lsls	r2, r3, #1
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	441a      	add	r2, r3
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	2b0f      	cmp	r3, #15
 800aee8:	d916      	bls.n	800af18 <UART_SetConfig+0x920>
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef0:	d212      	bcs.n	800af18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	f023 030f 	bic.w	r3, r3, #15
 800aefa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	b29b      	uxth	r3, r3
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	b29a      	uxth	r2, r3
 800af08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af0a:	4313      	orrs	r3, r2
 800af0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af14:	60da      	str	r2, [r3, #12]
 800af16:	e0b9      	b.n	800b08c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af1e:	e0b5      	b.n	800b08c <UART_SetConfig+0xa94>
 800af20:	03d09000 	.word	0x03d09000
 800af24:	003d0900 	.word	0x003d0900
 800af28:	0800fce8 	.word	0x0800fce8
 800af2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800af30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af34:	2b20      	cmp	r3, #32
 800af36:	dc49      	bgt.n	800afcc <UART_SetConfig+0x9d4>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	db7c      	blt.n	800b036 <UART_SetConfig+0xa3e>
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	d87a      	bhi.n	800b036 <UART_SetConfig+0xa3e>
 800af40:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <UART_SetConfig+0x950>)
 800af42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af46:	bf00      	nop
 800af48:	0800afd3 	.word	0x0800afd3
 800af4c:	0800afdb 	.word	0x0800afdb
 800af50:	0800b037 	.word	0x0800b037
 800af54:	0800b037 	.word	0x0800b037
 800af58:	0800afe3 	.word	0x0800afe3
 800af5c:	0800b037 	.word	0x0800b037
 800af60:	0800b037 	.word	0x0800b037
 800af64:	0800b037 	.word	0x0800b037
 800af68:	0800aff3 	.word	0x0800aff3
 800af6c:	0800b037 	.word	0x0800b037
 800af70:	0800b037 	.word	0x0800b037
 800af74:	0800b037 	.word	0x0800b037
 800af78:	0800b037 	.word	0x0800b037
 800af7c:	0800b037 	.word	0x0800b037
 800af80:	0800b037 	.word	0x0800b037
 800af84:	0800b037 	.word	0x0800b037
 800af88:	0800b003 	.word	0x0800b003
 800af8c:	0800b037 	.word	0x0800b037
 800af90:	0800b037 	.word	0x0800b037
 800af94:	0800b037 	.word	0x0800b037
 800af98:	0800b037 	.word	0x0800b037
 800af9c:	0800b037 	.word	0x0800b037
 800afa0:	0800b037 	.word	0x0800b037
 800afa4:	0800b037 	.word	0x0800b037
 800afa8:	0800b037 	.word	0x0800b037
 800afac:	0800b037 	.word	0x0800b037
 800afb0:	0800b037 	.word	0x0800b037
 800afb4:	0800b037 	.word	0x0800b037
 800afb8:	0800b037 	.word	0x0800b037
 800afbc:	0800b037 	.word	0x0800b037
 800afc0:	0800b037 	.word	0x0800b037
 800afc4:	0800b037 	.word	0x0800b037
 800afc8:	0800b029 	.word	0x0800b029
 800afcc:	2b40      	cmp	r3, #64	; 0x40
 800afce:	d02e      	beq.n	800b02e <UART_SetConfig+0xa36>
 800afd0:	e031      	b.n	800b036 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afd2:	f7fb fca1 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 800afd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afd8:	e033      	b.n	800b042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afda:	f7fb fcb3 	bl	8006944 <HAL_RCC_GetPCLK2Freq>
 800afde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afe0:	e02f      	b.n	800b042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fd fca4 	bl	8008934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff0:	e027      	b.n	800b042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aff2:	f107 0318 	add.w	r3, r7, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fd fdf0 	bl	8008bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b000:	e01f      	b.n	800b042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b002:	4b2d      	ldr	r3, [pc, #180]	; (800b0b8 <UART_SetConfig+0xac0>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d009      	beq.n	800b022 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b00e:	4b2a      	ldr	r3, [pc, #168]	; (800b0b8 <UART_SetConfig+0xac0>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	08db      	lsrs	r3, r3, #3
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	4a28      	ldr	r2, [pc, #160]	; (800b0bc <UART_SetConfig+0xac4>)
 800b01a:	fa22 f303 	lsr.w	r3, r2, r3
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b020:	e00f      	b.n	800b042 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b022:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <UART_SetConfig+0xac4>)
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b026:	e00c      	b.n	800b042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b028:	4b25      	ldr	r3, [pc, #148]	; (800b0c0 <UART_SetConfig+0xac8>)
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02c:	e009      	b.n	800b042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b02e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b034:	e005      	b.n	800b042 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b036:	2300      	movs	r3, #0
 800b038:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b040:	bf00      	nop
    }

    if (pclk != 0U)
 800b042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d021      	beq.n	800b08c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	4a1d      	ldr	r2, [pc, #116]	; (800b0c4 <UART_SetConfig+0xacc>)
 800b04e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b052:	461a      	mov	r2, r3
 800b054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b056:	fbb3 f2f2 	udiv	r2, r3, r2
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	085b      	lsrs	r3, r3, #1
 800b060:	441a      	add	r2, r3
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	2b0f      	cmp	r3, #15
 800b070:	d909      	bls.n	800b086 <UART_SetConfig+0xa8e>
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b078:	d205      	bcs.n	800b086 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60da      	str	r2, [r3, #12]
 800b084:	e002      	b.n	800b08c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2201      	movs	r2, #1
 800b090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2201      	movs	r2, #1
 800b098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b0a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3748      	adds	r7, #72	; 0x48
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0b6:	bf00      	nop
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	03d09000 	.word	0x03d09000
 800b0c0:	003d0900 	.word	0x003d0900
 800b0c4:	0800fce8 	.word	0x0800fce8

0800b0c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00a      	beq.n	800b136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	f003 0308 	and.w	r3, r3, #8
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15c:	f003 0310 	and.w	r3, r3, #16
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00a      	beq.n	800b17a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	f003 0320 	and.w	r3, r3, #32
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01a      	beq.n	800b1de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1c6:	d10a      	bne.n	800b1de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	605a      	str	r2, [r3, #4]
  }
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b098      	sub	sp, #96	; 0x60
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b21c:	f7f7 fb42 	bl	80028a4 <HAL_GetTick>
 800b220:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 0308 	and.w	r3, r3, #8
 800b22c:	2b08      	cmp	r3, #8
 800b22e:	d12f      	bne.n	800b290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b238:	2200      	movs	r2, #0
 800b23a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f88e 	bl	800b360 <UART_WaitOnFlagUntilTimeout>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d022      	beq.n	800b290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	e853 3f00 	ldrex	r3, [r3]
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b25e:	653b      	str	r3, [r7, #80]	; 0x50
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	461a      	mov	r2, r3
 800b266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b268:	647b      	str	r3, [r7, #68]	; 0x44
 800b26a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b26e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b270:	e841 2300 	strex	r3, r2, [r1]
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1e6      	bne.n	800b24a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2220      	movs	r2, #32
 800b280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e063      	b.n	800b358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0304 	and.w	r3, r3, #4
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	d149      	bne.n	800b332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b29e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f857 	bl	800b360 <UART_WaitOnFlagUntilTimeout>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d03c      	beq.n	800b332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b2d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2de:	e841 2300 	strex	r3, r2, [r1]
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e6      	bne.n	800b2b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f023 0301 	bic.w	r3, r3, #1
 800b300:	64bb      	str	r3, [r7, #72]	; 0x48
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3308      	adds	r3, #8
 800b308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b30a:	61fa      	str	r2, [r7, #28]
 800b30c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	69b9      	ldr	r1, [r7, #24]
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	617b      	str	r3, [r7, #20]
   return(result);
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e5      	bne.n	800b2ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e012      	b.n	800b358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2220      	movs	r2, #32
 800b336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3758      	adds	r7, #88	; 0x58
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	603b      	str	r3, [r7, #0]
 800b36c:	4613      	mov	r3, r2
 800b36e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b370:	e049      	b.n	800b406 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b378:	d045      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b37a:	f7f7 fa93 	bl	80028a4 <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	429a      	cmp	r2, r3
 800b388:	d302      	bcc.n	800b390 <UART_WaitOnFlagUntilTimeout+0x30>
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e048      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 0304 	and.w	r3, r3, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d031      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	f003 0308 	and.w	r3, r3, #8
 800b3ac:	2b08      	cmp	r3, #8
 800b3ae:	d110      	bne.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f839 	bl	800b430 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e029      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3e0:	d111      	bne.n	800b406 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f81f 	bl	800b430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e00f      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69da      	ldr	r2, [r3, #28]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4013      	ands	r3, r2
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	429a      	cmp	r2, r3
 800b414:	bf0c      	ite	eq
 800b416:	2301      	moveq	r3, #1
 800b418:	2300      	movne	r3, #0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	429a      	cmp	r2, r3
 800b422:	d0a6      	beq.n	800b372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b430:	b480      	push	{r7}
 800b432:	b095      	sub	sp, #84	; 0x54
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b44c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b456:	643b      	str	r3, [r7, #64]	; 0x40
 800b458:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b45c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e6      	bne.n	800b438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3308      	adds	r3, #8
 800b470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	61fb      	str	r3, [r7, #28]
   return(result);
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	4b1e      	ldr	r3, [pc, #120]	; (800b4f8 <UART_EndRxTransfer+0xc8>)
 800b47e:	4013      	ands	r3, r2
 800b480:	64bb      	str	r3, [r7, #72]	; 0x48
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3308      	adds	r3, #8
 800b488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b48a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e5      	bne.n	800b46a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d118      	bne.n	800b4d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f023 0310 	bic.w	r3, r3, #16
 800b4ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6979      	ldr	r1, [r7, #20]
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e6      	bne.n	800b4a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b4ec:	bf00      	nop
 800b4ee:	3754      	adds	r7, #84	; 0x54
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	effffffe 	.word	0xeffffffe

0800b4fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d101      	bne.n	800b512 <HAL_UARTEx_DisableFifoMode+0x16>
 800b50e:	2302      	movs	r3, #2
 800b510:	e027      	b.n	800b562 <HAL_UARTEx_DisableFifoMode+0x66>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2224      	movs	r2, #36	; 0x24
 800b51e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f022 0201 	bic.w	r2, r2, #1
 800b538:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2220      	movs	r2, #32
 800b554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d101      	bne.n	800b586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b582:	2302      	movs	r3, #2
 800b584:	e02d      	b.n	800b5e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2224      	movs	r2, #36	; 0x24
 800b592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 0201 	bic.w	r2, r2, #1
 800b5ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f850 	bl	800b668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2220      	movs	r2, #32
 800b5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d101      	bne.n	800b602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5fe:	2302      	movs	r3, #2
 800b600:	e02d      	b.n	800b65e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2224      	movs	r2, #36	; 0x24
 800b60e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0201 	bic.w	r2, r2, #1
 800b628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f812 	bl	800b668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2220      	movs	r2, #32
 800b650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b674:	2b00      	cmp	r3, #0
 800b676:	d108      	bne.n	800b68a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b688:	e031      	b.n	800b6ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b68a:	2310      	movs	r3, #16
 800b68c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b68e:	2310      	movs	r3, #16
 800b690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	0e5b      	lsrs	r3, r3, #25
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	0f5b      	lsrs	r3, r3, #29
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b2:	7bbb      	ldrb	r3, [r7, #14]
 800b6b4:	7b3a      	ldrb	r2, [r7, #12]
 800b6b6:	4911      	ldr	r1, [pc, #68]	; (800b6fc <UARTEx_SetNbDataToProcess+0x94>)
 800b6b8:	5c8a      	ldrb	r2, [r1, r2]
 800b6ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6be:	7b3a      	ldrb	r2, [r7, #12]
 800b6c0:	490f      	ldr	r1, [pc, #60]	; (800b700 <UARTEx_SetNbDataToProcess+0x98>)
 800b6c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	7b7a      	ldrb	r2, [r7, #13]
 800b6d4:	4909      	ldr	r1, [pc, #36]	; (800b6fc <UARTEx_SetNbDataToProcess+0x94>)
 800b6d6:	5c8a      	ldrb	r2, [r1, r2]
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6dc:	7b7a      	ldrb	r2, [r7, #13]
 800b6de:	4908      	ldr	r1, [pc, #32]	; (800b700 <UARTEx_SetNbDataToProcess+0x98>)
 800b6e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b6ee:	bf00      	nop
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	0800fd00 	.word	0x0800fd00
 800b700:	0800fd08 	.word	0x0800fd08

0800b704 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	f023 0101 	bic.w	r1, r3, #1
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d102      	bne.n	800b734 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b72e:	2340      	movs	r3, #64	; 0x40
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	e001      	b.n	800b738 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b734:	2300      	movs	r3, #0
 800b736:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b744:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b74a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b750:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b756:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b75c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b762:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b768:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b76e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b774:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b77a:	4313      	orrs	r3, r2
 800b77c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	4313      	orrs	r3, r2
 800b786:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	4313      	orrs	r3, r2
 800b790:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	4313      	orrs	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b79c:	4b20      	ldr	r3, [pc, #128]	; (800b820 <FMC_NORSRAM_Init+0x11c>)
 800b79e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7a6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7ae:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b7b6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	43db      	mvns	r3, r3
 800b7c6:	ea02 0103 	and.w	r1, r2, r3
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	4319      	orrs	r1, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7e0:	d10c      	bne.n	800b7fc <FMC_NORSRAM_Init+0xf8>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d008      	beq.n	800b7fc <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d006      	beq.n	800b812 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80c:	431a      	orrs	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	371c      	adds	r7, #28
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	0008fb7f 	.word	0x0008fb7f

0800b824 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b824:	b480      	push	{r7}
 800b826:	b087      	sub	sp, #28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1c5a      	adds	r2, r3, #1
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	431a      	orrs	r2, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	021b      	lsls	r3, r3, #8
 800b850:	431a      	orrs	r2, r3
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	041b      	lsls	r3, r3, #16
 800b858:	431a      	orrs	r2, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	3b01      	subs	r3, #1
 800b860:	051b      	lsls	r3, r3, #20
 800b862:	431a      	orrs	r2, r3
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	3b02      	subs	r3, #2
 800b86a:	061b      	lsls	r3, r3, #24
 800b86c:	431a      	orrs	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	4313      	orrs	r3, r2
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	3201      	adds	r2, #1
 800b878:	4319      	orrs	r1, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b88c:	d113      	bne.n	800b8b6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b896:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	051b      	lsls	r3, r3, #20
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	371c      	adds	r7, #28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8d8:	d11d      	bne.n	800b916 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8e2:	4b13      	ldr	r3, [pc, #76]	; (800b930 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	6811      	ldr	r1, [r2, #0]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	6852      	ldr	r2, [r2, #4]
 800b8ee:	0112      	lsls	r2, r2, #4
 800b8f0:	4311      	orrs	r1, r2
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	6892      	ldr	r2, [r2, #8]
 800b8f6:	0212      	lsls	r2, r2, #8
 800b8f8:	4311      	orrs	r1, r2
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	6992      	ldr	r2, [r2, #24]
 800b8fe:	4311      	orrs	r1, r2
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	68d2      	ldr	r2, [r2, #12]
 800b904:	0412      	lsls	r2, r2, #16
 800b906:	430a      	orrs	r2, r1
 800b908:	ea43 0102 	orr.w	r1, r3, r2
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b914:	e005      	b.n	800b922 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b91e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	cff00000 	.word	0xcff00000

0800b934 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d121      	bne.n	800b9b6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	4b27      	ldr	r3, [pc, #156]	; (800ba14 <FMC_SDRAM_Init+0xb4>)
 800b978:	4013      	ands	r3, r2
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	6851      	ldr	r1, [r2, #4]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	6892      	ldr	r2, [r2, #8]
 800b982:	4311      	orrs	r1, r2
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	68d2      	ldr	r2, [r2, #12]
 800b988:	4311      	orrs	r1, r2
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	6912      	ldr	r2, [r2, #16]
 800b98e:	4311      	orrs	r1, r2
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	6952      	ldr	r2, [r2, #20]
 800b994:	4311      	orrs	r1, r2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	6992      	ldr	r2, [r2, #24]
 800b99a:	4311      	orrs	r1, r2
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	69d2      	ldr	r2, [r2, #28]
 800b9a0:	4311      	orrs	r1, r2
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	6a12      	ldr	r2, [r2, #32]
 800b9a6:	4311      	orrs	r1, r2
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	e026      	b.n	800ba04 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	69d9      	ldr	r1, [r3, #28]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	4319      	orrs	r1, r3
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	430b      	orrs	r3, r1
 800b9ce:	431a      	orrs	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ba14 <FMC_SDRAM_Init+0xb4>)
 800b9da:	4013      	ands	r3, r2
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	6851      	ldr	r1, [r2, #4]
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	6892      	ldr	r2, [r2, #8]
 800b9e4:	4311      	orrs	r1, r2
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	68d2      	ldr	r2, [r2, #12]
 800b9ea:	4311      	orrs	r1, r2
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	6912      	ldr	r2, [r2, #16]
 800b9f0:	4311      	orrs	r1, r2
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	6952      	ldr	r2, [r2, #20]
 800b9f6:	4311      	orrs	r1, r2
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	6992      	ldr	r2, [r2, #24]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	ffff8000 	.word	0xffff8000

0800ba18 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d128      	bne.n	800ba7c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1e59      	subs	r1, r3, #1
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	011b      	lsls	r3, r3, #4
 800ba40:	4319      	orrs	r1, r3
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	021b      	lsls	r3, r3, #8
 800ba4a:	4319      	orrs	r1, r3
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	031b      	lsls	r3, r3, #12
 800ba54:	4319      	orrs	r1, r3
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	041b      	lsls	r3, r3, #16
 800ba5e:	4319      	orrs	r1, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	051b      	lsls	r3, r3, #20
 800ba68:	4319      	orrs	r1, r3
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	061b      	lsls	r3, r3, #24
 800ba72:	430b      	orrs	r3, r1
 800ba74:	431a      	orrs	r2, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	609a      	str	r2, [r3, #8]
 800ba7a:	e02d      	b.n	800bad8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	4b19      	ldr	r3, [pc, #100]	; (800bae8 <FMC_SDRAM_Timing_Init+0xd0>)
 800ba82:	4013      	ands	r3, r2
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	68d2      	ldr	r2, [r2, #12]
 800ba88:	3a01      	subs	r2, #1
 800ba8a:	0311      	lsls	r1, r2, #12
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	6952      	ldr	r2, [r2, #20]
 800ba90:	3a01      	subs	r2, #1
 800ba92:	0512      	lsls	r2, r2, #20
 800ba94:	430a      	orrs	r2, r1
 800ba96:	431a      	orrs	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	1e59      	subs	r1, r3, #1
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	3b01      	subs	r3, #1
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	4319      	orrs	r1, r3
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	3b01      	subs	r3, #1
 800baba:	021b      	lsls	r3, r3, #8
 800babc:	4319      	orrs	r1, r3
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	041b      	lsls	r3, r3, #16
 800bac6:	4319      	orrs	r1, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	3b01      	subs	r3, #1
 800bace:	061b      	lsls	r3, r3, #24
 800bad0:	430b      	orrs	r3, r1
 800bad2:	431a      	orrs	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	ff0f0fff 	.word	0xff0f0fff

0800baec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800baec:	b084      	sub	sp, #16
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	f107 001c 	add.w	r0, r7, #28
 800bafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d120      	bne.n	800bb46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68da      	ldr	r2, [r3, #12]
 800bb14:	4b2a      	ldr	r3, [pc, #168]	; (800bbc0 <USB_CoreInit+0xd4>)
 800bb16:	4013      	ands	r3, r2
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d105      	bne.n	800bb3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 faac 	bl	800c098 <USB_CoreReset>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]
 800bb44:	e01a      	b.n	800bb7c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 faa0 	bl	800c098 <USB_CoreReset>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	639a      	str	r2, [r3, #56]	; 0x38
 800bb6e:	e005      	b.n	800bb7c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d116      	bne.n	800bbb0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb90:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <USB_CoreInit+0xd8>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f043 0206 	orr.w	r2, r3, #6
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	f043 0220 	orr.w	r2, r3, #32
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbbc:	b004      	add	sp, #16
 800bbbe:	4770      	bx	lr
 800bbc0:	ffbdffbf 	.word	0xffbdffbf
 800bbc4:	03ee0000 	.word	0x03ee0000

0800bbc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f023 0201 	bic.w	r2, r3, #1
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc06:	78fb      	ldrb	r3, [r7, #3]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d115      	bne.n	800bc38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc18:	2001      	movs	r0, #1
 800bc1a:	f7f6 fe4f 	bl	80028bc <HAL_Delay>
      ms++;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3301      	adds	r3, #1
 800bc22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fa29 	bl	800c07c <USB_GetMode>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d01e      	beq.n	800bc6e <USB_SetCurrentMode+0x84>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b31      	cmp	r3, #49	; 0x31
 800bc34:	d9f0      	bls.n	800bc18 <USB_SetCurrentMode+0x2e>
 800bc36:	e01a      	b.n	800bc6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc38:	78fb      	ldrb	r3, [r7, #3]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d115      	bne.n	800bc6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	f7f6 fe36 	bl	80028bc <HAL_Delay>
      ms++;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3301      	adds	r3, #1
 800bc54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fa10 	bl	800c07c <USB_GetMode>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d005      	beq.n	800bc6e <USB_SetCurrentMode+0x84>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b31      	cmp	r3, #49	; 0x31
 800bc66:	d9f0      	bls.n	800bc4a <USB_SetCurrentMode+0x60>
 800bc68:	e001      	b.n	800bc6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e005      	b.n	800bc7a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b32      	cmp	r3, #50	; 0x32
 800bc72:	d101      	bne.n	800bc78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e000      	b.n	800bc7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc84:	b084      	sub	sp, #16
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b086      	sub	sp, #24
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bc92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	613b      	str	r3, [r7, #16]
 800bca2:	e009      	b.n	800bcb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	3340      	adds	r3, #64	; 0x40
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	613b      	str	r3, [r7, #16]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2b0e      	cmp	r3, #14
 800bcbc:	d9f2      	bls.n	800bca4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bcbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d11c      	bne.n	800bcfe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcd2:	f043 0302 	orr.w	r3, r3, #2
 800bcd6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	e005      	b.n	800bd0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd10:	461a      	mov	r2, r3
 800bd12:	2300      	movs	r3, #0
 800bd14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd24:	461a      	mov	r2, r3
 800bd26:	680b      	ldr	r3, [r1, #0]
 800bd28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d10c      	bne.n	800bd4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bd36:	2100      	movs	r1, #0
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f965 	bl	800c008 <USB_SetDevSpeed>
 800bd3e:	e008      	b.n	800bd52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bd40:	2101      	movs	r1, #1
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f960 	bl	800c008 <USB_SetDevSpeed>
 800bd48:	e003      	b.n	800bd52 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bd4a:	2103      	movs	r1, #3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f95b 	bl	800c008 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd52:	2110      	movs	r1, #16
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f8f3 	bl	800bf40 <USB_FlushTxFifo>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f91f 	bl	800bfa8 <USB_FlushRxFifo>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd86:	461a      	mov	r2, r3
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd92:	461a      	mov	r2, r3
 800bd94:	2300      	movs	r3, #0
 800bd96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	e043      	b.n	800be26 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdb4:	d118      	bne.n	800bde8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10a      	bne.n	800bdd2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc8:	461a      	mov	r2, r3
 800bdca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdce:	6013      	str	r3, [r2, #0]
 800bdd0:	e013      	b.n	800bdfa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	015a      	lsls	r2, r3, #5
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdde:	461a      	mov	r2, r3
 800bde0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	e008      	b.n	800bdfa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4413      	add	r3, r2
 800be02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be06:	461a      	mov	r2, r3
 800be08:	2300      	movs	r3, #0
 800be0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be18:	461a      	mov	r2, r3
 800be1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	3301      	adds	r3, #1
 800be24:	613b      	str	r3, [r7, #16]
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d3b7      	bcc.n	800bd9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be2e:	2300      	movs	r3, #0
 800be30:	613b      	str	r3, [r7, #16]
 800be32:	e043      	b.n	800bebc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be4a:	d118      	bne.n	800be7e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10a      	bne.n	800be68 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5e:	461a      	mov	r2, r3
 800be60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	e013      	b.n	800be90 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be74:	461a      	mov	r2, r3
 800be76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	e008      	b.n	800be90 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	015a      	lsls	r2, r3, #5
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4413      	add	r3, r2
 800be86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8a:	461a      	mov	r2, r3
 800be8c:	2300      	movs	r3, #0
 800be8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	015a      	lsls	r2, r3, #5
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4413      	add	r3, r2
 800be98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9c:	461a      	mov	r2, r3
 800be9e:	2300      	movs	r3, #0
 800bea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	015a      	lsls	r2, r3, #5
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beae:	461a      	mov	r2, r3
 800beb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800beb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	3301      	adds	r3, #1
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d3b7      	bcc.n	800be34 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bed6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bee4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d105      	bne.n	800bef8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	f043 0210 	orr.w	r2, r3, #16
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	699a      	ldr	r2, [r3, #24]
 800befc:	4b0e      	ldr	r3, [pc, #56]	; (800bf38 <USB_DevInit+0x2b4>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	f043 0208 	orr.w	r2, r3, #8
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bf16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d105      	bne.n	800bf28 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	699a      	ldr	r2, [r3, #24]
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <USB_DevInit+0x2b8>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf34:	b004      	add	sp, #16
 800bf36:	4770      	bx	lr
 800bf38:	803c3800 	.word	0x803c3800
 800bf3c:	40000004 	.word	0x40000004

0800bf40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4a13      	ldr	r2, [pc, #76]	; (800bfa4 <USB_FlushTxFifo+0x64>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d901      	bls.n	800bf60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e01b      	b.n	800bf98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	daf2      	bge.n	800bf4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	019b      	lsls	r3, r3, #6
 800bf70:	f043 0220 	orr.w	r2, r3, #32
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4a08      	ldr	r2, [pc, #32]	; (800bfa4 <USB_FlushTxFifo+0x64>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d901      	bls.n	800bf8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bf86:	2303      	movs	r3, #3
 800bf88:	e006      	b.n	800bf98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	f003 0320 	and.w	r3, r3, #32
 800bf92:	2b20      	cmp	r3, #32
 800bf94:	d0f0      	beq.n	800bf78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	00030d40 	.word	0x00030d40

0800bfa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4a11      	ldr	r2, [pc, #68]	; (800c004 <USB_FlushRxFifo+0x5c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d901      	bls.n	800bfc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	e018      	b.n	800bff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	daf2      	bge.n	800bfb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2210      	movs	r2, #16
 800bfd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	4a08      	ldr	r2, [pc, #32]	; (800c004 <USB_FlushRxFifo+0x5c>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d901      	bls.n	800bfea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	e006      	b.n	800bff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	f003 0310 	and.w	r3, r3, #16
 800bff2:	2b10      	cmp	r3, #16
 800bff4:	d0f0      	beq.n	800bfd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	00030d40 	.word	0x00030d40

0800c008 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	68f9      	ldr	r1, [r7, #12]
 800c024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c028:	4313      	orrs	r3, r2
 800c02a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c054:	f023 0303 	bic.w	r3, r3, #3
 800c058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c068:	f043 0302 	orr.w	r3, r3, #2
 800c06c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	f003 0301 	and.w	r3, r3, #1
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	4a13      	ldr	r2, [pc, #76]	; (800c0fc <USB_CoreReset+0x64>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d901      	bls.n	800c0b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	e01b      	b.n	800c0ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	daf2      	bge.n	800c0a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	f043 0201 	orr.w	r2, r3, #1
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	4a09      	ldr	r2, [pc, #36]	; (800c0fc <USB_CoreReset+0x64>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d901      	bls.n	800c0e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e006      	b.n	800c0ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d0f0      	beq.n	800c0ce <USB_CoreReset+0x36>

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	00030d40 	.word	0x00030d40

0800c100 <__NVIC_SetPriority>:
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	6039      	str	r1, [r7, #0]
 800c10a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c10c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c110:	2b00      	cmp	r3, #0
 800c112:	db0a      	blt.n	800c12a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	b2da      	uxtb	r2, r3
 800c118:	490c      	ldr	r1, [pc, #48]	; (800c14c <__NVIC_SetPriority+0x4c>)
 800c11a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c11e:	0112      	lsls	r2, r2, #4
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	440b      	add	r3, r1
 800c124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c128:	e00a      	b.n	800c140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	4908      	ldr	r1, [pc, #32]	; (800c150 <__NVIC_SetPriority+0x50>)
 800c130:	88fb      	ldrh	r3, [r7, #6]
 800c132:	f003 030f 	and.w	r3, r3, #15
 800c136:	3b04      	subs	r3, #4
 800c138:	0112      	lsls	r2, r2, #4
 800c13a:	b2d2      	uxtb	r2, r2
 800c13c:	440b      	add	r3, r1
 800c13e:	761a      	strb	r2, [r3, #24]
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	e000e100 	.word	0xe000e100
 800c150:	e000ed00 	.word	0xe000ed00

0800c154 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c158:	4b05      	ldr	r3, [pc, #20]	; (800c170 <SysTick_Handler+0x1c>)
 800c15a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c15c:	f001 fcd8 	bl	800db10 <xTaskGetSchedulerState>
 800c160:	4603      	mov	r3, r0
 800c162:	2b01      	cmp	r3, #1
 800c164:	d001      	beq.n	800c16a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c166:	f002 fabf 	bl	800e6e8 <xPortSysTickHandler>
  }
}
 800c16a:	bf00      	nop
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	e000e010 	.word	0xe000e010

0800c174 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c178:	2100      	movs	r1, #0
 800c17a:	f06f 0004 	mvn.w	r0, #4
 800c17e:	f7ff ffbf 	bl	800c100 <__NVIC_SetPriority>
#endif
}
 800c182:	bf00      	nop
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c18e:	f3ef 8305 	mrs	r3, IPSR
 800c192:	603b      	str	r3, [r7, #0]
  return(result);
 800c194:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c19a:	f06f 0305 	mvn.w	r3, #5
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	e00c      	b.n	800c1bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c1a2:	4b0a      	ldr	r3, [pc, #40]	; (800c1cc <osKernelInitialize+0x44>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d105      	bne.n	800c1b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c1aa:	4b08      	ldr	r3, [pc, #32]	; (800c1cc <osKernelInitialize+0x44>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	e002      	b.n	800c1bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c1b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1bc:	687b      	ldr	r3, [r7, #4]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	24001180 	.word	0x24001180

0800c1d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1d6:	f3ef 8305 	mrs	r3, IPSR
 800c1da:	603b      	str	r3, [r7, #0]
  return(result);
 800c1dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <osKernelStart+0x1a>
    stat = osErrorISR;
 800c1e2:	f06f 0305 	mvn.w	r3, #5
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	e010      	b.n	800c20c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1ea:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <osKernelStart+0x48>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d109      	bne.n	800c206 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1f2:	f7ff ffbf 	bl	800c174 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1f6:	4b08      	ldr	r3, [pc, #32]	; (800c218 <osKernelStart+0x48>)
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1fc:	f001 f82c 	bl	800d258 <vTaskStartScheduler>
      stat = osOK;
 800c200:	2300      	movs	r3, #0
 800c202:	607b      	str	r3, [r7, #4]
 800c204:	e002      	b.n	800c20c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c20a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c20c:	687b      	ldr	r3, [r7, #4]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	24001180 	.word	0x24001180

0800c21c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08e      	sub	sp, #56	; 0x38
 800c220:	af04      	add	r7, sp, #16
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c22c:	f3ef 8305 	mrs	r3, IPSR
 800c230:	617b      	str	r3, [r7, #20]
  return(result);
 800c232:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c234:	2b00      	cmp	r3, #0
 800c236:	d17e      	bne.n	800c336 <osThreadNew+0x11a>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d07b      	beq.n	800c336 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c23e:	2380      	movs	r3, #128	; 0x80
 800c240:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c242:	2318      	movs	r3, #24
 800c244:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c24e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d045      	beq.n	800c2e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <osThreadNew+0x48>
        name = attr->name;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d008      	beq.n	800c28a <osThreadNew+0x6e>
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	2b38      	cmp	r3, #56	; 0x38
 800c27c:	d805      	bhi.n	800c28a <osThreadNew+0x6e>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <osThreadNew+0x72>
        return (NULL);
 800c28a:	2300      	movs	r3, #0
 800c28c:	e054      	b.n	800c338 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d003      	beq.n	800c29e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	089b      	lsrs	r3, r3, #2
 800c29c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00e      	beq.n	800c2c4 <osThreadNew+0xa8>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	2bbb      	cmp	r3, #187	; 0xbb
 800c2ac:	d90a      	bls.n	800c2c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d006      	beq.n	800c2c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <osThreadNew+0xa8>
        mem = 1;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	e010      	b.n	800c2e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10c      	bne.n	800c2e6 <osThreadNew+0xca>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d108      	bne.n	800c2e6 <osThreadNew+0xca>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d104      	bne.n	800c2e6 <osThreadNew+0xca>
          mem = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	61bb      	str	r3, [r7, #24]
 800c2e0:	e001      	b.n	800c2e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d110      	bne.n	800c30e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2f4:	9202      	str	r2, [sp, #8]
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	6a3a      	ldr	r2, [r7, #32]
 800c300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 fdf0 	bl	800cee8 <xTaskCreateStatic>
 800c308:	4603      	mov	r3, r0
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	e013      	b.n	800c336 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d110      	bne.n	800c336 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	b29a      	uxth	r2, r3
 800c318:	f107 0310 	add.w	r3, r7, #16
 800c31c:	9301      	str	r3, [sp, #4]
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 fe3b 	bl	800cfa2 <xTaskCreate>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d001      	beq.n	800c336 <osThreadNew+0x11a>
            hTask = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c336:	693b      	ldr	r3, [r7, #16]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3728      	adds	r7, #40	; 0x28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a07      	ldr	r2, [pc, #28]	; (800c36c <vApplicationGetIdleTaskMemory+0x2c>)
 800c350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4a06      	ldr	r2, [pc, #24]	; (800c370 <vApplicationGetIdleTaskMemory+0x30>)
 800c356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2280      	movs	r2, #128	; 0x80
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	24001184 	.word	0x24001184
 800c370:	24001240 	.word	0x24001240

0800c374 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4a07      	ldr	r2, [pc, #28]	; (800c3a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c384:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	4a06      	ldr	r2, [pc, #24]	; (800c3a4 <vApplicationGetTimerTaskMemory+0x30>)
 800c38a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c392:	601a      	str	r2, [r3, #0]
}
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	24001440 	.word	0x24001440
 800c3a4:	240014fc 	.word	0x240014fc

0800c3a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f103 0208 	add.w	r2, r3, #8
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f103 0208 	add.w	r2, r3, #8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f103 0208 	add.w	r2, r3, #8
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c402:	b480      	push	{r7}
 800c404:	b085      	sub	sp, #20
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	601a      	str	r2, [r3, #0]
}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c44a:	b480      	push	{r7}
 800c44c:	b085      	sub	sp, #20
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c460:	d103      	bne.n	800c46a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e00c      	b.n	800c484 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3308      	adds	r3, #8
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	e002      	b.n	800c478 <vListInsert+0x2e>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	429a      	cmp	r2, r3
 800c482:	d2f6      	bcs.n	800c472 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	601a      	str	r2, [r3, #0]
}
 800c4b0:	bf00      	nop
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	6892      	ldr	r2, [r2, #8]
 800c4d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	6852      	ldr	r2, [r2, #4]
 800c4dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d103      	bne.n	800c4f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689a      	ldr	r2, [r3, #8]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	1e5a      	subs	r2, r3, #1
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10a      	bne.n	800c53a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c53a:	f002 f843 	bl	800e5c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c54a:	fb01 f303 	mul.w	r3, r1, r3
 800c54e:	441a      	add	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	3b01      	subs	r3, #1
 800c56c:	68f9      	ldr	r1, [r7, #12]
 800c56e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c570:	fb01 f303 	mul.w	r3, r1, r3
 800c574:	441a      	add	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	22ff      	movs	r2, #255	; 0xff
 800c57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	22ff      	movs	r2, #255	; 0xff
 800c586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d114      	bne.n	800c5ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01a      	beq.n	800c5ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3310      	adds	r3, #16
 800c59c:	4618      	mov	r0, r3
 800c59e:	f001 f8f5 	bl	800d78c <xTaskRemoveFromEventList>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d012      	beq.n	800c5ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5a8:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <xQueueGenericReset+0xcc>)
 800c5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	e009      	b.n	800c5ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3310      	adds	r3, #16
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7ff fef2 	bl	800c3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3324      	adds	r3, #36	; 0x24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff feed 	bl	800c3a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c5ce:	f002 f829 	bl	800e624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5d2:	2301      	movs	r3, #1
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08e      	sub	sp, #56	; 0x38
 800c5e4:	af02      	add	r7, sp, #8
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <xQueueGenericCreateStatic+0x52>
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <xQueueGenericCreateStatic+0x56>
 800c632:	2301      	movs	r3, #1
 800c634:	e000      	b.n	800c638 <xQueueGenericCreateStatic+0x58>
 800c636:	2300      	movs	r3, #0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	623b      	str	r3, [r7, #32]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d102      	bne.n	800c65e <xQueueGenericCreateStatic+0x7e>
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <xQueueGenericCreateStatic+0x82>
 800c65e:	2301      	movs	r3, #1
 800c660:	e000      	b.n	800c664 <xQueueGenericCreateStatic+0x84>
 800c662:	2300      	movs	r3, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	61fb      	str	r3, [r7, #28]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c67e:	2350      	movs	r3, #80	; 0x50
 800c680:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b50      	cmp	r3, #80	; 0x50
 800c686:	d00a      	beq.n	800c69e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	61bb      	str	r3, [r7, #24]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c69e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00d      	beq.n	800c6c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 f805 	bl	800c6d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3730      	adds	r7, #48	; 0x30
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d103      	bne.n	800c6ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	e002      	b.n	800c6f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6fe:	2101      	movs	r1, #1
 800c700:	69b8      	ldr	r0, [r7, #24]
 800c702:	f7ff ff05 	bl	800c510 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	78fa      	ldrb	r2, [r7, #3]
 800c70a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08e      	sub	sp, #56	; 0x38
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c726:	2300      	movs	r3, #0
 800c728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10a      	bne.n	800c74a <xQueueGenericSend+0x32>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d103      	bne.n	800c758 <xQueueGenericSend+0x40>
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <xQueueGenericSend+0x44>
 800c758:	2301      	movs	r3, #1
 800c75a:	e000      	b.n	800c75e <xQueueGenericSend+0x46>
 800c75c:	2300      	movs	r3, #0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <xQueueGenericSend+0x60>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d103      	bne.n	800c786 <xQueueGenericSend+0x6e>
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c782:	2b01      	cmp	r3, #1
 800c784:	d101      	bne.n	800c78a <xQueueGenericSend+0x72>
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <xQueueGenericSend+0x74>
 800c78a:	2300      	movs	r3, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	623b      	str	r3, [r7, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7a6:	f001 f9b3 	bl	800db10 <xTaskGetSchedulerState>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <xQueueGenericSend+0x9e>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <xQueueGenericSend+0xa2>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e000      	b.n	800c7bc <xQueueGenericSend+0xa4>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10a      	bne.n	800c7d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	61fb      	str	r3, [r7, #28]
}
 800c7d2:	bf00      	nop
 800c7d4:	e7fe      	b.n	800c7d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7d6:	f001 fef5 	bl	800e5c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d302      	bcc.n	800c7ec <xQueueGenericSend+0xd4>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	d129      	bne.n	800c840 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7f2:	f000 fa0b 	bl	800cc0c <prvCopyDataToQueue>
 800c7f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d010      	beq.n	800c822 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	3324      	adds	r3, #36	; 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f000 ffc1 	bl	800d78c <xTaskRemoveFromEventList>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d013      	beq.n	800c838 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c810:	4b3f      	ldr	r3, [pc, #252]	; (800c910 <xQueueGenericSend+0x1f8>)
 800c812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	e00a      	b.n	800c838 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	2b00      	cmp	r3, #0
 800c826:	d007      	beq.n	800c838 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c828:	4b39      	ldr	r3, [pc, #228]	; (800c910 <xQueueGenericSend+0x1f8>)
 800c82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c838:	f001 fef4 	bl	800e624 <vPortExitCritical>
				return pdPASS;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e063      	b.n	800c908 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c846:	f001 feed 	bl	800e624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	e05c      	b.n	800c908 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c850:	2b00      	cmp	r3, #0
 800c852:	d106      	bne.n	800c862 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 fffb 	bl	800d854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c85e:	2301      	movs	r3, #1
 800c860:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c862:	f001 fedf 	bl	800e624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c866:	f000 fd67 	bl	800d338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c86a:	f001 feab 	bl	800e5c4 <vPortEnterCritical>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c874:	b25b      	sxtb	r3, r3
 800c876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c87a:	d103      	bne.n	800c884 <xQueueGenericSend+0x16c>
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c88a:	b25b      	sxtb	r3, r3
 800c88c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c890:	d103      	bne.n	800c89a <xQueueGenericSend+0x182>
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c89a:	f001 fec3 	bl	800e624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c89e:	1d3a      	adds	r2, r7, #4
 800c8a0:	f107 0314 	add.w	r3, r7, #20
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 ffea 	bl	800d880 <xTaskCheckForTimeOut>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d124      	bne.n	800c8fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b4:	f000 faa2 	bl	800cdfc <prvIsQueueFull>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d018      	beq.n	800c8f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	3310      	adds	r3, #16
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 ff10 	bl	800d6ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8ce:	f000 fa2d 	bl	800cd2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c8d2:	f000 fd3f 	bl	800d354 <xTaskResumeAll>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f47f af7c 	bne.w	800c7d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c8de:	4b0c      	ldr	r3, [pc, #48]	; (800c910 <xQueueGenericSend+0x1f8>)
 800c8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	e772      	b.n	800c7d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8f2:	f000 fa1b 	bl	800cd2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8f6:	f000 fd2d 	bl	800d354 <xTaskResumeAll>
 800c8fa:	e76c      	b.n	800c7d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8fe:	f000 fa15 	bl	800cd2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c902:	f000 fd27 	bl	800d354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3738      	adds	r7, #56	; 0x38
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	e000ed04 	.word	0xe000ed04

0800c914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b090      	sub	sp, #64	; 0x40
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d103      	bne.n	800c950 <xQueueGenericSendFromISR+0x3c>
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <xQueueGenericSendFromISR+0x40>
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <xQueueGenericSendFromISR+0x42>
 800c954:	2300      	movs	r3, #0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10a      	bne.n	800c970 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c96c:	bf00      	nop
 800c96e:	e7fe      	b.n	800c96e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b02      	cmp	r3, #2
 800c974:	d103      	bne.n	800c97e <xQueueGenericSendFromISR+0x6a>
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d101      	bne.n	800c982 <xQueueGenericSendFromISR+0x6e>
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <xQueueGenericSendFromISR+0x70>
 800c982:	2300      	movs	r3, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	623b      	str	r3, [r7, #32]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c99e:	f001 fef3 	bl	800e788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c9a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	61fa      	str	r2, [r7, #28]
 800c9b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d302      	bcc.n	800c9d0 <xQueueGenericSendFromISR+0xbc>
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d12f      	bne.n	800ca30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9e6:	f000 f911 	bl	800cc0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9f2:	d112      	bne.n	800ca1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d016      	beq.n	800ca2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	3324      	adds	r3, #36	; 0x24
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fec3 	bl	800d78c <xTaskRemoveFromEventList>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00e      	beq.n	800ca2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	e007      	b.n	800ca2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	b25a      	sxtb	r2, r3
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ca2e:	e001      	b.n	800ca34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3740      	adds	r7, #64	; 0x40
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08c      	sub	sp, #48	; 0x30
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10a      	bne.n	800ca7c <xQueueReceive+0x30>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	623b      	str	r3, [r7, #32]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueReceive+0x3e>
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueReceive+0x42>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueReceive+0x44>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <xQueueReceive+0x5e>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	61fb      	str	r3, [r7, #28]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800caaa:	f001 f831 	bl	800db10 <xTaskGetSchedulerState>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <xQueueReceive+0x6e>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <xQueueReceive+0x72>
 800caba:	2301      	movs	r3, #1
 800cabc:	e000      	b.n	800cac0 <xQueueReceive+0x74>
 800cabe:	2300      	movs	r3, #0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10a      	bne.n	800cada <xQueueReceive+0x8e>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	61bb      	str	r3, [r7, #24]
}
 800cad6:	bf00      	nop
 800cad8:	e7fe      	b.n	800cad8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cada:	f001 fd73 	bl	800e5c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d01f      	beq.n	800cb2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caee:	f000 f8f7 	bl	800cce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1e5a      	subs	r2, r3, #1
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00f      	beq.n	800cb22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	3310      	adds	r3, #16
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fe40 	bl	800d78c <xTaskRemoveFromEventList>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d007      	beq.n	800cb22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb12:	4b3d      	ldr	r3, [pc, #244]	; (800cc08 <xQueueReceive+0x1bc>)
 800cb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb22:	f001 fd7f 	bl	800e624 <vPortExitCritical>
				return pdPASS;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e069      	b.n	800cbfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb30:	f001 fd78 	bl	800e624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb34:	2300      	movs	r3, #0
 800cb36:	e062      	b.n	800cbfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb3e:	f107 0310 	add.w	r3, r7, #16
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fe86 	bl	800d854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb4c:	f001 fd6a 	bl	800e624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb50:	f000 fbf2 	bl	800d338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb54:	f001 fd36 	bl	800e5c4 <vPortEnterCritical>
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb5e:	b25b      	sxtb	r3, r3
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb64:	d103      	bne.n	800cb6e <xQueueReceive+0x122>
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb74:	b25b      	sxtb	r3, r3
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb7a:	d103      	bne.n	800cb84 <xQueueReceive+0x138>
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb84:	f001 fd4e 	bl	800e624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb88:	1d3a      	adds	r2, r7, #4
 800cb8a:	f107 0310 	add.w	r3, r7, #16
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fe75 	bl	800d880 <xTaskCheckForTimeOut>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d123      	bne.n	800cbe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb9e:	f000 f917 	bl	800cdd0 <prvIsQueueEmpty>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d017      	beq.n	800cbd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	3324      	adds	r3, #36	; 0x24
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 fd9b 	bl	800d6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbb8:	f000 f8b8 	bl	800cd2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbbc:	f000 fbca 	bl	800d354 <xTaskResumeAll>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d189      	bne.n	800cada <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cbc6:	4b10      	ldr	r3, [pc, #64]	; (800cc08 <xQueueReceive+0x1bc>)
 800cbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	e780      	b.n	800cada <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbda:	f000 f8a7 	bl	800cd2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbde:	f000 fbb9 	bl	800d354 <xTaskResumeAll>
 800cbe2:	e77a      	b.n	800cada <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbe6:	f000 f8a1 	bl	800cd2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbea:	f000 fbb3 	bl	800d354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf0:	f000 f8ee 	bl	800cdd0 <prvIsQueueEmpty>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f43f af6f 	beq.w	800cada <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3730      	adds	r7, #48	; 0x30
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	e000ed04 	.word	0xe000ed04

0800cc0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10d      	bne.n	800cc46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d14d      	bne.n	800ccce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 ff88 	bl	800db4c <xTaskPriorityDisinherit>
 800cc3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	609a      	str	r2, [r3, #8]
 800cc44:	e043      	b.n	800ccce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d119      	bne.n	800cc80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6858      	ldr	r0, [r3, #4]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc54:	461a      	mov	r2, r3
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	f002 f8e3 	bl	800ee22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc64:	441a      	add	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	685a      	ldr	r2, [r3, #4]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d32b      	bcc.n	800ccce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	605a      	str	r2, [r3, #4]
 800cc7e:	e026      	b.n	800ccce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68d8      	ldr	r0, [r3, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc88:	461a      	mov	r2, r3
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	f002 f8c9 	bl	800ee22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc98:	425b      	negs	r3, r3
 800cc9a:	441a      	add	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	68da      	ldr	r2, [r3, #12]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d207      	bcs.n	800ccbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	689a      	ldr	r2, [r3, #8]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	441a      	add	r2, r3
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d105      	bne.n	800ccce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccd6:	697b      	ldr	r3, [r7, #20]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d018      	beq.n	800cd24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68da      	ldr	r2, [r3, #12]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	441a      	add	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68da      	ldr	r2, [r3, #12]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d303      	bcc.n	800cd14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68d9      	ldr	r1, [r3, #12]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	6838      	ldr	r0, [r7, #0]
 800cd20:	f002 f87f 	bl	800ee22 <memcpy>
	}
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd34:	f001 fc46 	bl	800e5c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd40:	e011      	b.n	800cd66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d012      	beq.n	800cd70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3324      	adds	r3, #36	; 0x24
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 fd1c 	bl	800d78c <xTaskRemoveFromEventList>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd5a:	f000 fdf3 	bl	800d944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dce9      	bgt.n	800cd42 <prvUnlockQueue+0x16>
 800cd6e:	e000      	b.n	800cd72 <prvUnlockQueue+0x46>
					break;
 800cd70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	22ff      	movs	r2, #255	; 0xff
 800cd76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd7a:	f001 fc53 	bl	800e624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd7e:	f001 fc21 	bl	800e5c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd8a:	e011      	b.n	800cdb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3310      	adds	r3, #16
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fcf7 	bl	800d78c <xTaskRemoveFromEventList>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cda4:	f000 fdce 	bl	800d944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dce9      	bgt.n	800cd8c <prvUnlockQueue+0x60>
 800cdb8:	e000      	b.n	800cdbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cdba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	22ff      	movs	r2, #255	; 0xff
 800cdc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cdc4:	f001 fc2e 	bl	800e624 <vPortExitCritical>
}
 800cdc8:	bf00      	nop
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdd8:	f001 fbf4 	bl	800e5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cde4:	2301      	movs	r3, #1
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	e001      	b.n	800cdee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdee:	f001 fc19 	bl	800e624 <vPortExitCritical>

	return xReturn;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce04:	f001 fbde 	bl	800e5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d102      	bne.n	800ce1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce14:	2301      	movs	r3, #1
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	e001      	b.n	800ce1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce1e:	f001 fc01 	bl	800e624 <vPortExitCritical>

	return xReturn;
 800ce22:	68fb      	ldr	r3, [r7, #12]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce36:	2300      	movs	r3, #0
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	e014      	b.n	800ce66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce3c:	4a0f      	ldr	r2, [pc, #60]	; (800ce7c <vQueueAddToRegistry+0x50>)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10b      	bne.n	800ce60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce48:	490c      	ldr	r1, [pc, #48]	; (800ce7c <vQueueAddToRegistry+0x50>)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce52:	4a0a      	ldr	r2, [pc, #40]	; (800ce7c <vQueueAddToRegistry+0x50>)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	4413      	add	r3, r2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce5e:	e006      	b.n	800ce6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	3301      	adds	r3, #1
 800ce64:	60fb      	str	r3, [r7, #12]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b07      	cmp	r3, #7
 800ce6a:	d9e7      	bls.n	800ce3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce6c:	bf00      	nop
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	240018fc 	.word	0x240018fc

0800ce80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce90:	f001 fb98 	bl	800e5c4 <vPortEnterCritical>
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce9a:	b25b      	sxtb	r3, r3
 800ce9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cea0:	d103      	bne.n	800ceaa <vQueueWaitForMessageRestricted+0x2a>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceb0:	b25b      	sxtb	r3, r3
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceb6:	d103      	bne.n	800cec0 <vQueueWaitForMessageRestricted+0x40>
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cec0:	f001 fbb0 	bl	800e624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	3324      	adds	r3, #36	; 0x24
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 fc2d 	bl	800d734 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceda:	6978      	ldr	r0, [r7, #20]
 800cedc:	f7ff ff26 	bl	800cd2c <prvUnlockQueue>
	}
 800cee0:	bf00      	nop
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08e      	sub	sp, #56	; 0x38
 800ceec:	af04      	add	r7, sp, #16
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	623b      	str	r3, [r7, #32]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10a      	bne.n	800cf2e <xTaskCreateStatic+0x46>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	61fb      	str	r3, [r7, #28]
}
 800cf2a:	bf00      	nop
 800cf2c:	e7fe      	b.n	800cf2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf2e:	23bc      	movs	r3, #188	; 0xbc
 800cf30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2bbc      	cmp	r3, #188	; 0xbc
 800cf36:	d00a      	beq.n	800cf4e <xTaskCreateStatic+0x66>
	__asm volatile
 800cf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	61bb      	str	r3, [r7, #24]
}
 800cf4a:	bf00      	nop
 800cf4c:	e7fe      	b.n	800cf4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d01e      	beq.n	800cf94 <xTaskCreateStatic+0xac>
 800cf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d01b      	beq.n	800cf94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	2202      	movs	r2, #2
 800cf6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	9302      	str	r3, [sp, #8]
 800cf76:	f107 0314 	add.w	r3, r7, #20
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	68b9      	ldr	r1, [r7, #8]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f000 f850 	bl	800d02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf8e:	f000 f8f3 	bl	800d178 <prvAddNewTaskToReadyList>
 800cf92:	e001      	b.n	800cf98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf98:	697b      	ldr	r3, [r7, #20]
	}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3728      	adds	r7, #40	; 0x28
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b08c      	sub	sp, #48	; 0x30
 800cfa6:	af04      	add	r7, sp, #16
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	603b      	str	r3, [r7, #0]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fc26 	bl	800e808 <pvPortMalloc>
 800cfbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00e      	beq.n	800cfe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cfc4:	20bc      	movs	r0, #188	; 0xbc
 800cfc6:	f001 fc1f 	bl	800e808 <pvPortMalloc>
 800cfca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	631a      	str	r2, [r3, #48]	; 0x30
 800cfd8:	e005      	b.n	800cfe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfda:	6978      	ldr	r0, [r7, #20]
 800cfdc:	f001 fce0 	bl	800e9a0 <vPortFree>
 800cfe0:	e001      	b.n	800cfe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d017      	beq.n	800d01c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cff4:	88fa      	ldrh	r2, [r7, #6]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9303      	str	r3, [sp, #12]
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	9302      	str	r3, [sp, #8]
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f000 f80e 	bl	800d02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d010:	69f8      	ldr	r0, [r7, #28]
 800d012:	f000 f8b1 	bl	800d178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d016:	2301      	movs	r3, #1
 800d018:	61bb      	str	r3, [r7, #24]
 800d01a:	e002      	b.n	800d022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d022:	69bb      	ldr	r3, [r7, #24]
	}
 800d024:	4618      	mov	r0, r3
 800d026:	3720      	adds	r7, #32
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	461a      	mov	r2, r3
 800d044:	21a5      	movs	r1, #165	; 0xa5
 800d046:	f001 fefa 	bl	800ee3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d054:	440b      	add	r3, r1
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4413      	add	r3, r2
 800d05a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	f023 0307 	bic.w	r3, r3, #7
 800d062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	617b      	str	r3, [r7, #20]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d01f      	beq.n	800d0ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d08a:	2300      	movs	r3, #0
 800d08c:	61fb      	str	r3, [r7, #28]
 800d08e:	e012      	b.n	800d0b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	4413      	add	r3, r2
 800d096:	7819      	ldrb	r1, [r3, #0]
 800d098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	4413      	add	r3, r2
 800d09e:	3334      	adds	r3, #52	; 0x34
 800d0a0:	460a      	mov	r2, r1
 800d0a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	61fb      	str	r3, [r7, #28]
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	2b0f      	cmp	r3, #15
 800d0ba:	d9e9      	bls.n	800d090 <prvInitialiseNewTask+0x64>
 800d0bc:	e000      	b.n	800d0c0 <prvInitialiseNewTask+0x94>
			{
				break;
 800d0be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0c8:	e003      	b.n	800d0d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	2b37      	cmp	r3, #55	; 0x37
 800d0d6:	d901      	bls.n	800d0dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0d8:	2337      	movs	r3, #55	; 0x37
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7ff f978 	bl	800c3e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff f973 	bl	800c3e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11a:	2200      	movs	r2, #0
 800d11c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d122:	2200      	movs	r2, #0
 800d124:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	3354      	adds	r3, #84	; 0x54
 800d12c:	2260      	movs	r2, #96	; 0x60
 800d12e:	2100      	movs	r1, #0
 800d130:	4618      	mov	r0, r3
 800d132:	f001 fe84 	bl	800ee3e <memset>
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	4a0c      	ldr	r2, [pc, #48]	; (800d16c <prvInitialiseNewTask+0x140>)
 800d13a:	659a      	str	r2, [r3, #88]	; 0x58
 800d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13e:	4a0c      	ldr	r2, [pc, #48]	; (800d170 <prvInitialiseNewTask+0x144>)
 800d140:	65da      	str	r2, [r3, #92]	; 0x5c
 800d142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d144:	4a0b      	ldr	r2, [pc, #44]	; (800d174 <prvInitialiseNewTask+0x148>)
 800d146:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	68f9      	ldr	r1, [r7, #12]
 800d14c:	69b8      	ldr	r0, [r7, #24]
 800d14e:	f001 f90d 	bl	800e36c <pxPortInitialiseStack>
 800d152:	4602      	mov	r2, r0
 800d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d156:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d162:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d164:	bf00      	nop
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	0800fd30 	.word	0x0800fd30
 800d170:	0800fd50 	.word	0x0800fd50
 800d174:	0800fd10 	.word	0x0800fd10

0800d178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d180:	f001 fa20 	bl	800e5c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d184:	4b2d      	ldr	r3, [pc, #180]	; (800d23c <prvAddNewTaskToReadyList+0xc4>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3301      	adds	r3, #1
 800d18a:	4a2c      	ldr	r2, [pc, #176]	; (800d23c <prvAddNewTaskToReadyList+0xc4>)
 800d18c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d18e:	4b2c      	ldr	r3, [pc, #176]	; (800d240 <prvAddNewTaskToReadyList+0xc8>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d109      	bne.n	800d1aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d196:	4a2a      	ldr	r2, [pc, #168]	; (800d240 <prvAddNewTaskToReadyList+0xc8>)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d19c:	4b27      	ldr	r3, [pc, #156]	; (800d23c <prvAddNewTaskToReadyList+0xc4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d110      	bne.n	800d1c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d1a4:	f000 fbf2 	bl	800d98c <prvInitialiseTaskLists>
 800d1a8:	e00d      	b.n	800d1c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d1aa:	4b26      	ldr	r3, [pc, #152]	; (800d244 <prvAddNewTaskToReadyList+0xcc>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d109      	bne.n	800d1c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d1b2:	4b23      	ldr	r3, [pc, #140]	; (800d240 <prvAddNewTaskToReadyList+0xc8>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d802      	bhi.n	800d1c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d1c0:	4a1f      	ldr	r2, [pc, #124]	; (800d240 <prvAddNewTaskToReadyList+0xc8>)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d1c6:	4b20      	ldr	r3, [pc, #128]	; (800d248 <prvAddNewTaskToReadyList+0xd0>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	4a1e      	ldr	r2, [pc, #120]	; (800d248 <prvAddNewTaskToReadyList+0xd0>)
 800d1ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d1d0:	4b1d      	ldr	r3, [pc, #116]	; (800d248 <prvAddNewTaskToReadyList+0xd0>)
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1dc:	4b1b      	ldr	r3, [pc, #108]	; (800d24c <prvAddNewTaskToReadyList+0xd4>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d903      	bls.n	800d1ec <prvAddNewTaskToReadyList+0x74>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	4a18      	ldr	r2, [pc, #96]	; (800d24c <prvAddNewTaskToReadyList+0xd4>)
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4a15      	ldr	r2, [pc, #84]	; (800d250 <prvAddNewTaskToReadyList+0xd8>)
 800d1fa:	441a      	add	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f7ff f8fd 	bl	800c402 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d208:	f001 fa0c 	bl	800e624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <prvAddNewTaskToReadyList+0xcc>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00e      	beq.n	800d232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d214:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <prvAddNewTaskToReadyList+0xc8>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21e:	429a      	cmp	r2, r3
 800d220:	d207      	bcs.n	800d232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d222:	4b0c      	ldr	r3, [pc, #48]	; (800d254 <prvAddNewTaskToReadyList+0xdc>)
 800d224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	24001e10 	.word	0x24001e10
 800d240:	2400193c 	.word	0x2400193c
 800d244:	24001e1c 	.word	0x24001e1c
 800d248:	24001e2c 	.word	0x24001e2c
 800d24c:	24001e18 	.word	0x24001e18
 800d250:	24001940 	.word	0x24001940
 800d254:	e000ed04 	.word	0xe000ed04

0800d258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08a      	sub	sp, #40	; 0x28
 800d25c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d25e:	2300      	movs	r3, #0
 800d260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d266:	463a      	mov	r2, r7
 800d268:	1d39      	adds	r1, r7, #4
 800d26a:	f107 0308 	add.w	r3, r7, #8
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff f866 	bl	800c340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	9202      	str	r2, [sp, #8]
 800d27c:	9301      	str	r3, [sp, #4]
 800d27e:	2300      	movs	r3, #0
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	2300      	movs	r3, #0
 800d284:	460a      	mov	r2, r1
 800d286:	4924      	ldr	r1, [pc, #144]	; (800d318 <vTaskStartScheduler+0xc0>)
 800d288:	4824      	ldr	r0, [pc, #144]	; (800d31c <vTaskStartScheduler+0xc4>)
 800d28a:	f7ff fe2d 	bl	800cee8 <xTaskCreateStatic>
 800d28e:	4603      	mov	r3, r0
 800d290:	4a23      	ldr	r2, [pc, #140]	; (800d320 <vTaskStartScheduler+0xc8>)
 800d292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d294:	4b22      	ldr	r3, [pc, #136]	; (800d320 <vTaskStartScheduler+0xc8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d29c:	2301      	movs	r3, #1
 800d29e:	617b      	str	r3, [r7, #20]
 800d2a0:	e001      	b.n	800d2a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d102      	bne.n	800d2b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2ac:	f000 fd10 	bl	800dcd0 <xTimerCreateTimerTask>
 800d2b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d11b      	bne.n	800d2f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	613b      	str	r3, [r7, #16]
}
 800d2ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2cc:	4b15      	ldr	r3, [pc, #84]	; (800d324 <vTaskStartScheduler+0xcc>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3354      	adds	r3, #84	; 0x54
 800d2d2:	4a15      	ldr	r2, [pc, #84]	; (800d328 <vTaskStartScheduler+0xd0>)
 800d2d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2d6:	4b15      	ldr	r3, [pc, #84]	; (800d32c <vTaskStartScheduler+0xd4>)
 800d2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2de:	4b14      	ldr	r3, [pc, #80]	; (800d330 <vTaskStartScheduler+0xd8>)
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2e4:	4b13      	ldr	r3, [pc, #76]	; (800d334 <vTaskStartScheduler+0xdc>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2ea:	f001 f8c9 	bl	800e480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2ee:	e00e      	b.n	800d30e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2f6:	d10a      	bne.n	800d30e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60fb      	str	r3, [r7, #12]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <vTaskStartScheduler+0xb4>
}
 800d30e:	bf00      	nop
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	0800fc9c 	.word	0x0800fc9c
 800d31c:	0800d95d 	.word	0x0800d95d
 800d320:	24001e34 	.word	0x24001e34
 800d324:	2400193c 	.word	0x2400193c
 800d328:	24000014 	.word	0x24000014
 800d32c:	24001e30 	.word	0x24001e30
 800d330:	24001e1c 	.word	0x24001e1c
 800d334:	24001e14 	.word	0x24001e14

0800d338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d338:	b480      	push	{r7}
 800d33a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d33c:	4b04      	ldr	r3, [pc, #16]	; (800d350 <vTaskSuspendAll+0x18>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3301      	adds	r3, #1
 800d342:	4a03      	ldr	r2, [pc, #12]	; (800d350 <vTaskSuspendAll+0x18>)
 800d344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d346:	bf00      	nop
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	24001e38 	.word	0x24001e38

0800d354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d35e:	2300      	movs	r3, #0
 800d360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d362:	4b42      	ldr	r3, [pc, #264]	; (800d46c <xTaskResumeAll+0x118>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d10a      	bne.n	800d380 <xTaskResumeAll+0x2c>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	603b      	str	r3, [r7, #0]
}
 800d37c:	bf00      	nop
 800d37e:	e7fe      	b.n	800d37e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d380:	f001 f920 	bl	800e5c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d384:	4b39      	ldr	r3, [pc, #228]	; (800d46c <xTaskResumeAll+0x118>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	3b01      	subs	r3, #1
 800d38a:	4a38      	ldr	r2, [pc, #224]	; (800d46c <xTaskResumeAll+0x118>)
 800d38c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d38e:	4b37      	ldr	r3, [pc, #220]	; (800d46c <xTaskResumeAll+0x118>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d162      	bne.n	800d45c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d396:	4b36      	ldr	r3, [pc, #216]	; (800d470 <xTaskResumeAll+0x11c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d05e      	beq.n	800d45c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d39e:	e02f      	b.n	800d400 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a0:	4b34      	ldr	r3, [pc, #208]	; (800d474 <xTaskResumeAll+0x120>)
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3318      	adds	r3, #24
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff f885 	bl	800c4bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff f880 	bl	800c4bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c0:	4b2d      	ldr	r3, [pc, #180]	; (800d478 <xTaskResumeAll+0x124>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d903      	bls.n	800d3d0 <xTaskResumeAll+0x7c>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3cc:	4a2a      	ldr	r2, [pc, #168]	; (800d478 <xTaskResumeAll+0x124>)
 800d3ce:	6013      	str	r3, [r2, #0]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4a27      	ldr	r2, [pc, #156]	; (800d47c <xTaskResumeAll+0x128>)
 800d3de:	441a      	add	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7ff f80b 	bl	800c402 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f0:	4b23      	ldr	r3, [pc, #140]	; (800d480 <xTaskResumeAll+0x12c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d302      	bcc.n	800d400 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3fa:	4b22      	ldr	r3, [pc, #136]	; (800d484 <xTaskResumeAll+0x130>)
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d400:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <xTaskResumeAll+0x120>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1cb      	bne.n	800d3a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d40e:	f000 fb5f 	bl	800dad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d412:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <xTaskResumeAll+0x134>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d010      	beq.n	800d440 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d41e:	f000 f847 	bl	800d4b0 <xTaskIncrementTick>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d428:	4b16      	ldr	r3, [pc, #88]	; (800d484 <xTaskResumeAll+0x130>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	3b01      	subs	r3, #1
 800d432:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1f1      	bne.n	800d41e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <xTaskResumeAll+0x134>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d440:	4b10      	ldr	r3, [pc, #64]	; (800d484 <xTaskResumeAll+0x130>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d448:	2301      	movs	r3, #1
 800d44a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d44c:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <xTaskResumeAll+0x138>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d45c:	f001 f8e2 	bl	800e624 <vPortExitCritical>

	return xAlreadyYielded;
 800d460:	68bb      	ldr	r3, [r7, #8]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	24001e38 	.word	0x24001e38
 800d470:	24001e10 	.word	0x24001e10
 800d474:	24001dd0 	.word	0x24001dd0
 800d478:	24001e18 	.word	0x24001e18
 800d47c:	24001940 	.word	0x24001940
 800d480:	2400193c 	.word	0x2400193c
 800d484:	24001e24 	.word	0x24001e24
 800d488:	24001e20 	.word	0x24001e20
 800d48c:	e000ed04 	.word	0xe000ed04

0800d490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d496:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <xTaskGetTickCount+0x1c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d49c:	687b      	ldr	r3, [r7, #4]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	24001e14 	.word	0x24001e14

0800d4b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ba:	4b4f      	ldr	r3, [pc, #316]	; (800d5f8 <xTaskIncrementTick+0x148>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f040 808f 	bne.w	800d5e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4c4:	4b4d      	ldr	r3, [pc, #308]	; (800d5fc <xTaskIncrementTick+0x14c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4cc:	4a4b      	ldr	r2, [pc, #300]	; (800d5fc <xTaskIncrementTick+0x14c>)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d120      	bne.n	800d51a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4d8:	4b49      	ldr	r3, [pc, #292]	; (800d600 <xTaskIncrementTick+0x150>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00a      	beq.n	800d4f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	603b      	str	r3, [r7, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	e7fe      	b.n	800d4f6 <xTaskIncrementTick+0x46>
 800d4f8:	4b41      	ldr	r3, [pc, #260]	; (800d600 <xTaskIncrementTick+0x150>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	4b41      	ldr	r3, [pc, #260]	; (800d604 <xTaskIncrementTick+0x154>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a3f      	ldr	r2, [pc, #252]	; (800d600 <xTaskIncrementTick+0x150>)
 800d504:	6013      	str	r3, [r2, #0]
 800d506:	4a3f      	ldr	r2, [pc, #252]	; (800d604 <xTaskIncrementTick+0x154>)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	4b3e      	ldr	r3, [pc, #248]	; (800d608 <xTaskIncrementTick+0x158>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3301      	adds	r3, #1
 800d512:	4a3d      	ldr	r2, [pc, #244]	; (800d608 <xTaskIncrementTick+0x158>)
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	f000 fadb 	bl	800dad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d51a:	4b3c      	ldr	r3, [pc, #240]	; (800d60c <xTaskIncrementTick+0x15c>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	693a      	ldr	r2, [r7, #16]
 800d520:	429a      	cmp	r2, r3
 800d522:	d349      	bcc.n	800d5b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d524:	4b36      	ldr	r3, [pc, #216]	; (800d600 <xTaskIncrementTick+0x150>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d104      	bne.n	800d538 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52e:	4b37      	ldr	r3, [pc, #220]	; (800d60c <xTaskIncrementTick+0x15c>)
 800d530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d534:	601a      	str	r2, [r3, #0]
					break;
 800d536:	e03f      	b.n	800d5b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d538:	4b31      	ldr	r3, [pc, #196]	; (800d600 <xTaskIncrementTick+0x150>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d203      	bcs.n	800d558 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d550:	4a2e      	ldr	r2, [pc, #184]	; (800d60c <xTaskIncrementTick+0x15c>)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d556:	e02f      	b.n	800d5b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	3304      	adds	r3, #4
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fe ffad 	bl	800c4bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d566:	2b00      	cmp	r3, #0
 800d568:	d004      	beq.n	800d574 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	3318      	adds	r3, #24
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe ffa4 	bl	800c4bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d578:	4b25      	ldr	r3, [pc, #148]	; (800d610 <xTaskIncrementTick+0x160>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d903      	bls.n	800d588 <xTaskIncrementTick+0xd8>
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	4a22      	ldr	r2, [pc, #136]	; (800d610 <xTaskIncrementTick+0x160>)
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4a1f      	ldr	r2, [pc, #124]	; (800d614 <xTaskIncrementTick+0x164>)
 800d596:	441a      	add	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7fe ff2f 	bl	800c402 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a8:	4b1b      	ldr	r3, [pc, #108]	; (800d618 <xTaskIncrementTick+0x168>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d3b8      	bcc.n	800d524 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5b6:	e7b5      	b.n	800d524 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5b8:	4b17      	ldr	r3, [pc, #92]	; (800d618 <xTaskIncrementTick+0x168>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5be:	4915      	ldr	r1, [pc, #84]	; (800d614 <xTaskIncrementTick+0x164>)
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	440b      	add	r3, r1
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d901      	bls.n	800d5d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5d4:	4b11      	ldr	r3, [pc, #68]	; (800d61c <xTaskIncrementTick+0x16c>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	e004      	b.n	800d5ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5e2:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <xTaskIncrementTick+0x170>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	4a0d      	ldr	r2, [pc, #52]	; (800d620 <xTaskIncrementTick+0x170>)
 800d5ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5ec:	697b      	ldr	r3, [r7, #20]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	24001e38 	.word	0x24001e38
 800d5fc:	24001e14 	.word	0x24001e14
 800d600:	24001dc8 	.word	0x24001dc8
 800d604:	24001dcc 	.word	0x24001dcc
 800d608:	24001e28 	.word	0x24001e28
 800d60c:	24001e30 	.word	0x24001e30
 800d610:	24001e18 	.word	0x24001e18
 800d614:	24001940 	.word	0x24001940
 800d618:	2400193c 	.word	0x2400193c
 800d61c:	24001e24 	.word	0x24001e24
 800d620:	24001e20 	.word	0x24001e20

0800d624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d62a:	4b2a      	ldr	r3, [pc, #168]	; (800d6d4 <vTaskSwitchContext+0xb0>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d003      	beq.n	800d63a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d632:	4b29      	ldr	r3, [pc, #164]	; (800d6d8 <vTaskSwitchContext+0xb4>)
 800d634:	2201      	movs	r2, #1
 800d636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d638:	e046      	b.n	800d6c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d63a:	4b27      	ldr	r3, [pc, #156]	; (800d6d8 <vTaskSwitchContext+0xb4>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d640:	4b26      	ldr	r3, [pc, #152]	; (800d6dc <vTaskSwitchContext+0xb8>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	e010      	b.n	800d66a <vTaskSwitchContext+0x46>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10a      	bne.n	800d664 <vTaskSwitchContext+0x40>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
 800d662:	e7fe      	b.n	800d662 <vTaskSwitchContext+0x3e>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3b01      	subs	r3, #1
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	491d      	ldr	r1, [pc, #116]	; (800d6e0 <vTaskSwitchContext+0xbc>)
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	440b      	add	r3, r1
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d0e4      	beq.n	800d648 <vTaskSwitchContext+0x24>
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	4613      	mov	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4a15      	ldr	r2, [pc, #84]	; (800d6e0 <vTaskSwitchContext+0xbc>)
 800d68a:	4413      	add	r3, r2
 800d68c:	60bb      	str	r3, [r7, #8]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	605a      	str	r2, [r3, #4]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	3308      	adds	r3, #8
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d104      	bne.n	800d6ae <vTaskSwitchContext+0x8a>
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	4a0b      	ldr	r2, [pc, #44]	; (800d6e4 <vTaskSwitchContext+0xc0>)
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	4a08      	ldr	r2, [pc, #32]	; (800d6dc <vTaskSwitchContext+0xb8>)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6be:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <vTaskSwitchContext+0xc0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3354      	adds	r3, #84	; 0x54
 800d6c4:	4a08      	ldr	r2, [pc, #32]	; (800d6e8 <vTaskSwitchContext+0xc4>)
 800d6c6:	6013      	str	r3, [r2, #0]
}
 800d6c8:	bf00      	nop
 800d6ca:	3714      	adds	r7, #20
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	24001e38 	.word	0x24001e38
 800d6d8:	24001e24 	.word	0x24001e24
 800d6dc:	24001e18 	.word	0x24001e18
 800d6e0:	24001940 	.word	0x24001940
 800d6e4:	2400193c 	.word	0x2400193c
 800d6e8:	24000014 	.word	0x24000014

0800d6ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10a      	bne.n	800d712 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	60fb      	str	r3, [r7, #12]
}
 800d70e:	bf00      	nop
 800d710:	e7fe      	b.n	800d710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d712:	4b07      	ldr	r3, [pc, #28]	; (800d730 <vTaskPlaceOnEventList+0x44>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3318      	adds	r3, #24
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7fe fe95 	bl	800c44a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d720:	2101      	movs	r1, #1
 800d722:	6838      	ldr	r0, [r7, #0]
 800d724:	f000 fa80 	bl	800dc28 <prvAddCurrentTaskToDelayedList>
}
 800d728:	bf00      	nop
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	2400193c 	.word	0x2400193c

0800d734 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10a      	bne.n	800d75c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	617b      	str	r3, [r7, #20]
}
 800d758:	bf00      	nop
 800d75a:	e7fe      	b.n	800d75a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d75c:	4b0a      	ldr	r3, [pc, #40]	; (800d788 <vTaskPlaceOnEventListRestricted+0x54>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3318      	adds	r3, #24
 800d762:	4619      	mov	r1, r3
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7fe fe4c 	bl	800c402 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d774:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d776:	6879      	ldr	r1, [r7, #4]
 800d778:	68b8      	ldr	r0, [r7, #8]
 800d77a:	f000 fa55 	bl	800dc28 <prvAddCurrentTaskToDelayedList>
	}
 800d77e:	bf00      	nop
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	2400193c 	.word	0x2400193c

0800d78c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10a      	bne.n	800d7b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a6:	f383 8811 	msr	BASEPRI, r3
 800d7aa:	f3bf 8f6f 	isb	sy
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	60fb      	str	r3, [r7, #12]
}
 800d7b4:	bf00      	nop
 800d7b6:	e7fe      	b.n	800d7b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	3318      	adds	r3, #24
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fe fe7d 	bl	800c4bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7c2:	4b1e      	ldr	r3, [pc, #120]	; (800d83c <xTaskRemoveFromEventList+0xb0>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d11d      	bne.n	800d806 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fe74 	bl	800c4bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d8:	4b19      	ldr	r3, [pc, #100]	; (800d840 <xTaskRemoveFromEventList+0xb4>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d903      	bls.n	800d7e8 <xTaskRemoveFromEventList+0x5c>
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e4:	4a16      	ldr	r2, [pc, #88]	; (800d840 <xTaskRemoveFromEventList+0xb4>)
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4a13      	ldr	r2, [pc, #76]	; (800d844 <xTaskRemoveFromEventList+0xb8>)
 800d7f6:	441a      	add	r2, r3
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	4610      	mov	r0, r2
 800d800:	f7fe fdff 	bl	800c402 <vListInsertEnd>
 800d804:	e005      	b.n	800d812 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	3318      	adds	r3, #24
 800d80a:	4619      	mov	r1, r3
 800d80c:	480e      	ldr	r0, [pc, #56]	; (800d848 <xTaskRemoveFromEventList+0xbc>)
 800d80e:	f7fe fdf8 	bl	800c402 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d816:	4b0d      	ldr	r3, [pc, #52]	; (800d84c <xTaskRemoveFromEventList+0xc0>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d905      	bls.n	800d82c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d824:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <xTaskRemoveFromEventList+0xc4>)
 800d826:	2201      	movs	r2, #1
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	e001      	b.n	800d830 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d82c:	2300      	movs	r3, #0
 800d82e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d830:	697b      	ldr	r3, [r7, #20]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3718      	adds	r7, #24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	24001e38 	.word	0x24001e38
 800d840:	24001e18 	.word	0x24001e18
 800d844:	24001940 	.word	0x24001940
 800d848:	24001dd0 	.word	0x24001dd0
 800d84c:	2400193c 	.word	0x2400193c
 800d850:	24001e24 	.word	0x24001e24

0800d854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d85c:	4b06      	ldr	r3, [pc, #24]	; (800d878 <vTaskInternalSetTimeOutState+0x24>)
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d864:	4b05      	ldr	r3, [pc, #20]	; (800d87c <vTaskInternalSetTimeOutState+0x28>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	605a      	str	r2, [r3, #4]
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	24001e28 	.word	0x24001e28
 800d87c:	24001e14 	.word	0x24001e14

0800d880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	613b      	str	r3, [r7, #16]
}
 800d8a2:	bf00      	nop
 800d8a4:	e7fe      	b.n	800d8a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60fb      	str	r3, [r7, #12]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8c2:	f000 fe7f 	bl	800e5c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8c6:	4b1d      	ldr	r3, [pc, #116]	; (800d93c <xTaskCheckForTimeOut+0xbc>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	69ba      	ldr	r2, [r7, #24]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8de:	d102      	bne.n	800d8e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	61fb      	str	r3, [r7, #28]
 800d8e4:	e023      	b.n	800d92e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	4b15      	ldr	r3, [pc, #84]	; (800d940 <xTaskCheckForTimeOut+0xc0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d007      	beq.n	800d902 <xTaskCheckForTimeOut+0x82>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	69ba      	ldr	r2, [r7, #24]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d302      	bcc.n	800d902 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	61fb      	str	r3, [r7, #28]
 800d900:	e015      	b.n	800d92e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d20b      	bcs.n	800d924 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff9b 	bl	800d854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d91e:	2300      	movs	r3, #0
 800d920:	61fb      	str	r3, [r7, #28]
 800d922:	e004      	b.n	800d92e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	2200      	movs	r2, #0
 800d928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d92a:	2301      	movs	r3, #1
 800d92c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d92e:	f000 fe79 	bl	800e624 <vPortExitCritical>

	return xReturn;
 800d932:	69fb      	ldr	r3, [r7, #28]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3720      	adds	r7, #32
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	24001e14 	.word	0x24001e14
 800d940:	24001e28 	.word	0x24001e28

0800d944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d944:	b480      	push	{r7}
 800d946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d948:	4b03      	ldr	r3, [pc, #12]	; (800d958 <vTaskMissedYield+0x14>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
}
 800d94e:	bf00      	nop
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	24001e24 	.word	0x24001e24

0800d95c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d964:	f000 f852 	bl	800da0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d968:	4b06      	ldr	r3, [pc, #24]	; (800d984 <prvIdleTask+0x28>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d9f9      	bls.n	800d964 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d970:	4b05      	ldr	r3, [pc, #20]	; (800d988 <prvIdleTask+0x2c>)
 800d972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d980:	e7f0      	b.n	800d964 <prvIdleTask+0x8>
 800d982:	bf00      	nop
 800d984:	24001940 	.word	0x24001940
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	e00c      	b.n	800d9b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4a12      	ldr	r2, [pc, #72]	; (800d9ec <prvInitialiseTaskLists+0x60>)
 800d9a4:	4413      	add	r3, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fcfe 	bl	800c3a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	607b      	str	r3, [r7, #4]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b37      	cmp	r3, #55	; 0x37
 800d9b6:	d9ef      	bls.n	800d998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9b8:	480d      	ldr	r0, [pc, #52]	; (800d9f0 <prvInitialiseTaskLists+0x64>)
 800d9ba:	f7fe fcf5 	bl	800c3a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9be:	480d      	ldr	r0, [pc, #52]	; (800d9f4 <prvInitialiseTaskLists+0x68>)
 800d9c0:	f7fe fcf2 	bl	800c3a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9c4:	480c      	ldr	r0, [pc, #48]	; (800d9f8 <prvInitialiseTaskLists+0x6c>)
 800d9c6:	f7fe fcef 	bl	800c3a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9ca:	480c      	ldr	r0, [pc, #48]	; (800d9fc <prvInitialiseTaskLists+0x70>)
 800d9cc:	f7fe fcec 	bl	800c3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9d0:	480b      	ldr	r0, [pc, #44]	; (800da00 <prvInitialiseTaskLists+0x74>)
 800d9d2:	f7fe fce9 	bl	800c3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <prvInitialiseTaskLists+0x78>)
 800d9d8:	4a05      	ldr	r2, [pc, #20]	; (800d9f0 <prvInitialiseTaskLists+0x64>)
 800d9da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <prvInitialiseTaskLists+0x7c>)
 800d9de:	4a05      	ldr	r2, [pc, #20]	; (800d9f4 <prvInitialiseTaskLists+0x68>)
 800d9e0:	601a      	str	r2, [r3, #0]
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	24001940 	.word	0x24001940
 800d9f0:	24001da0 	.word	0x24001da0
 800d9f4:	24001db4 	.word	0x24001db4
 800d9f8:	24001dd0 	.word	0x24001dd0
 800d9fc:	24001de4 	.word	0x24001de4
 800da00:	24001dfc 	.word	0x24001dfc
 800da04:	24001dc8 	.word	0x24001dc8
 800da08:	24001dcc 	.word	0x24001dcc

0800da0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da12:	e019      	b.n	800da48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da14:	f000 fdd6 	bl	800e5c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da18:	4b10      	ldr	r3, [pc, #64]	; (800da5c <prvCheckTasksWaitingTermination+0x50>)
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3304      	adds	r3, #4
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fd49 	bl	800c4bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da2a:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3b01      	subs	r3, #1
 800da30:	4a0b      	ldr	r2, [pc, #44]	; (800da60 <prvCheckTasksWaitingTermination+0x54>)
 800da32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da34:	4b0b      	ldr	r3, [pc, #44]	; (800da64 <prvCheckTasksWaitingTermination+0x58>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3b01      	subs	r3, #1
 800da3a:	4a0a      	ldr	r2, [pc, #40]	; (800da64 <prvCheckTasksWaitingTermination+0x58>)
 800da3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da3e:	f000 fdf1 	bl	800e624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f810 	bl	800da68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da48:	4b06      	ldr	r3, [pc, #24]	; (800da64 <prvCheckTasksWaitingTermination+0x58>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e1      	bne.n	800da14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	24001de4 	.word	0x24001de4
 800da60:	24001e10 	.word	0x24001e10
 800da64:	24001df8 	.word	0x24001df8

0800da68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3354      	adds	r3, #84	; 0x54
 800da74:	4618      	mov	r0, r3
 800da76:	f001 faa5 	bl	800efc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800da80:	2b00      	cmp	r3, #0
 800da82:	d108      	bne.n	800da96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 ff89 	bl	800e9a0 <vPortFree>
				vPortFree( pxTCB );
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 ff86 	bl	800e9a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da94:	e018      	b.n	800dac8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d103      	bne.n	800daa8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 ff7d 	bl	800e9a0 <vPortFree>
	}
 800daa6:	e00f      	b.n	800dac8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d00a      	beq.n	800dac8 <prvDeleteTCB+0x60>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60fb      	str	r3, [r7, #12]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <prvDeleteTCB+0x5e>
	}
 800dac8:	bf00      	nop
 800daca:	3710      	adds	r7, #16
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dad6:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <prvResetNextTaskUnblockTime+0x38>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d104      	bne.n	800daea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dae0:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <prvResetNextTaskUnblockTime+0x3c>)
 800dae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dae8:	e008      	b.n	800dafc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daea:	4b07      	ldr	r3, [pc, #28]	; (800db08 <prvResetNextTaskUnblockTime+0x38>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	4a04      	ldr	r2, [pc, #16]	; (800db0c <prvResetNextTaskUnblockTime+0x3c>)
 800dafa:	6013      	str	r3, [r2, #0]
}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	24001dc8 	.word	0x24001dc8
 800db0c:	24001e30 	.word	0x24001e30

0800db10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <xTaskGetSchedulerState+0x34>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db1e:	2301      	movs	r3, #1
 800db20:	607b      	str	r3, [r7, #4]
 800db22:	e008      	b.n	800db36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db24:	4b08      	ldr	r3, [pc, #32]	; (800db48 <xTaskGetSchedulerState+0x38>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d102      	bne.n	800db32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db2c:	2302      	movs	r3, #2
 800db2e:	607b      	str	r3, [r7, #4]
 800db30:	e001      	b.n	800db36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db32:	2300      	movs	r3, #0
 800db34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db36:	687b      	ldr	r3, [r7, #4]
	}
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	24001e1c 	.word	0x24001e1c
 800db48:	24001e38 	.word	0x24001e38

0800db4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db58:	2300      	movs	r3, #0
 800db5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d056      	beq.n	800dc10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db62:	4b2e      	ldr	r3, [pc, #184]	; (800dc1c <xTaskPriorityDisinherit+0xd0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d00a      	beq.n	800db82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	60fb      	str	r3, [r7, #12]
}
 800db7e:	bf00      	nop
 800db80:	e7fe      	b.n	800db80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10a      	bne.n	800dba0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	60bb      	str	r3, [r7, #8]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba4:	1e5a      	subs	r2, r3, #1
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d02c      	beq.n	800dc10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d128      	bne.n	800dc10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe fc7a 	bl	800c4bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe0:	4b0f      	ldr	r3, [pc, #60]	; (800dc20 <xTaskPriorityDisinherit+0xd4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d903      	bls.n	800dbf0 <xTaskPriorityDisinherit+0xa4>
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	4a0c      	ldr	r2, [pc, #48]	; (800dc20 <xTaskPriorityDisinherit+0xd4>)
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4a09      	ldr	r2, [pc, #36]	; (800dc24 <xTaskPriorityDisinherit+0xd8>)
 800dbfe:	441a      	add	r2, r3
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	3304      	adds	r3, #4
 800dc04:	4619      	mov	r1, r3
 800dc06:	4610      	mov	r0, r2
 800dc08:	f7fe fbfb 	bl	800c402 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc10:	697b      	ldr	r3, [r7, #20]
	}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	2400193c 	.word	0x2400193c
 800dc20:	24001e18 	.word	0x24001e18
 800dc24:	24001940 	.word	0x24001940

0800dc28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc32:	4b21      	ldr	r3, [pc, #132]	; (800dcb8 <prvAddCurrentTaskToDelayedList+0x90>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc38:	4b20      	ldr	r3, [pc, #128]	; (800dcbc <prvAddCurrentTaskToDelayedList+0x94>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fe fc3c 	bl	800c4bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc4a:	d10a      	bne.n	800dc62 <prvAddCurrentTaskToDelayedList+0x3a>
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d007      	beq.n	800dc62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc52:	4b1a      	ldr	r3, [pc, #104]	; (800dcbc <prvAddCurrentTaskToDelayedList+0x94>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4819      	ldr	r0, [pc, #100]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc5c:	f7fe fbd1 	bl	800c402 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc60:	e026      	b.n	800dcb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4413      	add	r3, r2
 800dc68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc6a:	4b14      	ldr	r3, [pc, #80]	; (800dcbc <prvAddCurrentTaskToDelayedList+0x94>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d209      	bcs.n	800dc8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc7a:	4b12      	ldr	r3, [pc, #72]	; (800dcc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	4b0f      	ldr	r3, [pc, #60]	; (800dcbc <prvAddCurrentTaskToDelayedList+0x94>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3304      	adds	r3, #4
 800dc84:	4619      	mov	r1, r3
 800dc86:	4610      	mov	r0, r2
 800dc88:	f7fe fbdf 	bl	800c44a <vListInsert>
}
 800dc8c:	e010      	b.n	800dcb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc8e:	4b0e      	ldr	r3, [pc, #56]	; (800dcc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <prvAddCurrentTaskToDelayedList+0x94>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	f7fe fbd5 	bl	800c44a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dca0:	4b0a      	ldr	r3, [pc, #40]	; (800dccc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d202      	bcs.n	800dcb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dcaa:	4a08      	ldr	r2, [pc, #32]	; (800dccc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	6013      	str	r3, [r2, #0]
}
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	24001e14 	.word	0x24001e14
 800dcbc:	2400193c 	.word	0x2400193c
 800dcc0:	24001dfc 	.word	0x24001dfc
 800dcc4:	24001dcc 	.word	0x24001dcc
 800dcc8:	24001dc8 	.word	0x24001dc8
 800dccc:	24001e30 	.word	0x24001e30

0800dcd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b08a      	sub	sp, #40	; 0x28
 800dcd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dcda:	f000 fb07 	bl	800e2ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dcde:	4b1c      	ldr	r3, [pc, #112]	; (800dd50 <xTimerCreateTimerTask+0x80>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d021      	beq.n	800dd2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dcee:	1d3a      	adds	r2, r7, #4
 800dcf0:	f107 0108 	add.w	r1, r7, #8
 800dcf4:	f107 030c 	add.w	r3, r7, #12
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fb3b 	bl	800c374 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dcfe:	6879      	ldr	r1, [r7, #4]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	9202      	str	r2, [sp, #8]
 800dd06:	9301      	str	r3, [sp, #4]
 800dd08:	2302      	movs	r3, #2
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	460a      	mov	r2, r1
 800dd10:	4910      	ldr	r1, [pc, #64]	; (800dd54 <xTimerCreateTimerTask+0x84>)
 800dd12:	4811      	ldr	r0, [pc, #68]	; (800dd58 <xTimerCreateTimerTask+0x88>)
 800dd14:	f7ff f8e8 	bl	800cee8 <xTaskCreateStatic>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	4a10      	ldr	r2, [pc, #64]	; (800dd5c <xTimerCreateTimerTask+0x8c>)
 800dd1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd1e:	4b0f      	ldr	r3, [pc, #60]	; (800dd5c <xTimerCreateTimerTask+0x8c>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd26:	2301      	movs	r3, #1
 800dd28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	613b      	str	r3, [r7, #16]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd46:	697b      	ldr	r3, [r7, #20]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	24001e6c 	.word	0x24001e6c
 800dd54:	0800fca4 	.word	0x0800fca4
 800dd58:	0800de95 	.word	0x0800de95
 800dd5c:	24001e70 	.word	0x24001e70

0800dd60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	; 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
 800dd6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10a      	bne.n	800dd8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	623b      	str	r3, [r7, #32]
}
 800dd8a:	bf00      	nop
 800dd8c:	e7fe      	b.n	800dd8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02a      	beq.n	800ddec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b05      	cmp	r3, #5
 800dda6:	dc18      	bgt.n	800ddda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dda8:	f7ff feb2 	bl	800db10 <xTaskGetSchedulerState>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d109      	bne.n	800ddc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddb2:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f107 0110 	add.w	r1, r7, #16
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddbe:	f7fe fcab 	bl	800c718 <xQueueGenericSend>
 800ddc2:	6278      	str	r0, [r7, #36]	; 0x24
 800ddc4:	e012      	b.n	800ddec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddc6:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800ddc8:	6818      	ldr	r0, [r3, #0]
 800ddca:	f107 0110 	add.w	r1, r7, #16
 800ddce:	2300      	movs	r3, #0
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f7fe fca1 	bl	800c718 <xQueueGenericSend>
 800ddd6:	6278      	str	r0, [r7, #36]	; 0x24
 800ddd8:	e008      	b.n	800ddec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddda:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	f107 0110 	add.w	r1, r7, #16
 800dde2:	2300      	movs	r3, #0
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	f7fe fd95 	bl	800c914 <xQueueGenericSendFromISR>
 800ddea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3728      	adds	r7, #40	; 0x28
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	24001e6c 	.word	0x24001e6c

0800ddfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b088      	sub	sp, #32
 800de00:	af02      	add	r7, sp, #8
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de06:	4b22      	ldr	r3, [pc, #136]	; (800de90 <prvProcessExpiredTimer+0x94>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	3304      	adds	r3, #4
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe fb51 	bl	800c4bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de20:	f003 0304 	and.w	r3, r3, #4
 800de24:	2b00      	cmp	r3, #0
 800de26:	d022      	beq.n	800de6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	699a      	ldr	r2, [r3, #24]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	18d1      	adds	r1, r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	6978      	ldr	r0, [r7, #20]
 800de36:	f000 f8d1 	bl	800dfdc <prvInsertTimerInActiveList>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d01f      	beq.n	800de80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de40:	2300      	movs	r3, #0
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	2100      	movs	r1, #0
 800de4a:	6978      	ldr	r0, [r7, #20]
 800de4c:	f7ff ff88 	bl	800dd60 <xTimerGenericCommand>
 800de50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d113      	bne.n	800de80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5c:	f383 8811 	msr	BASEPRI, r3
 800de60:	f3bf 8f6f 	isb	sy
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	60fb      	str	r3, [r7, #12]
}
 800de6a:	bf00      	nop
 800de6c:	e7fe      	b.n	800de6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de74:	f023 0301 	bic.w	r3, r3, #1
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	6978      	ldr	r0, [r7, #20]
 800de86:	4798      	blx	r3
}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	24001e64 	.word	0x24001e64

0800de94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de9c:	f107 0308 	add.w	r3, r7, #8
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f857 	bl	800df54 <prvGetNextExpireTime>
 800dea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4619      	mov	r1, r3
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f803 	bl	800deb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800deb2:	f000 f8d5 	bl	800e060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deb6:	e7f1      	b.n	800de9c <prvTimerTask+0x8>

0800deb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dec2:	f7ff fa39 	bl	800d338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f866 	bl	800df9c <prvSampleTimeNow>
 800ded0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d130      	bne.n	800df3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d10a      	bne.n	800def4 <prvProcessTimerOrBlockTask+0x3c>
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d806      	bhi.n	800def4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dee6:	f7ff fa35 	bl	800d354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deea:	68f9      	ldr	r1, [r7, #12]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff ff85 	bl	800ddfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800def2:	e024      	b.n	800df3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d008      	beq.n	800df0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800defa:	4b13      	ldr	r3, [pc, #76]	; (800df48 <prvProcessTimerOrBlockTask+0x90>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <prvProcessTimerOrBlockTask+0x50>
 800df04:	2301      	movs	r3, #1
 800df06:	e000      	b.n	800df0a <prvProcessTimerOrBlockTask+0x52>
 800df08:	2300      	movs	r3, #0
 800df0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df0c:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <prvProcessTimerOrBlockTask+0x94>)
 800df0e:	6818      	ldr	r0, [r3, #0]
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	4619      	mov	r1, r3
 800df1a:	f7fe ffb1 	bl	800ce80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df1e:	f7ff fa19 	bl	800d354 <xTaskResumeAll>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df28:	4b09      	ldr	r3, [pc, #36]	; (800df50 <prvProcessTimerOrBlockTask+0x98>)
 800df2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	f3bf 8f6f 	isb	sy
}
 800df38:	e001      	b.n	800df3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df3a:	f7ff fa0b 	bl	800d354 <xTaskResumeAll>
}
 800df3e:	bf00      	nop
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	24001e68 	.word	0x24001e68
 800df4c:	24001e6c 	.word	0x24001e6c
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <prvGetNextExpireTime+0x44>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <prvGetNextExpireTime+0x16>
 800df66:	2201      	movs	r2, #1
 800df68:	e000      	b.n	800df6c <prvGetNextExpireTime+0x18>
 800df6a:	2200      	movs	r2, #0
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d105      	bne.n	800df84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df78:	4b07      	ldr	r3, [pc, #28]	; (800df98 <prvGetNextExpireTime+0x44>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e001      	b.n	800df88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df88:	68fb      	ldr	r3, [r7, #12]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	24001e64 	.word	0x24001e64

0800df9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfa4:	f7ff fa74 	bl	800d490 <xTaskGetTickCount>
 800dfa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfaa:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <prvSampleTimeNow+0x3c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d205      	bcs.n	800dfc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfb4:	f000 f936 	bl	800e224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	e002      	b.n	800dfc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfc6:	4a04      	ldr	r2, [pc, #16]	; (800dfd8 <prvSampleTimeNow+0x3c>)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	24001e74 	.word	0x24001e74

0800dfdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d812      	bhi.n	800e028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	1ad2      	subs	r2, r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d302      	bcc.n	800e016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e010:	2301      	movs	r3, #1
 800e012:	617b      	str	r3, [r7, #20]
 800e014:	e01b      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e016:	4b10      	ldr	r3, [pc, #64]	; (800e058 <prvInsertTimerInActiveList+0x7c>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7fe fa12 	bl	800c44a <vListInsert>
 800e026:	e012      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d206      	bcs.n	800e03e <prvInsertTimerInActiveList+0x62>
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d302      	bcc.n	800e03e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	617b      	str	r3, [r7, #20]
 800e03c:	e007      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e03e:	4b07      	ldr	r3, [pc, #28]	; (800e05c <prvInsertTimerInActiveList+0x80>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3304      	adds	r3, #4
 800e046:	4619      	mov	r1, r3
 800e048:	4610      	mov	r0, r2
 800e04a:	f7fe f9fe 	bl	800c44a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e04e:	697b      	ldr	r3, [r7, #20]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	24001e68 	.word	0x24001e68
 800e05c:	24001e64 	.word	0x24001e64

0800e060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08e      	sub	sp, #56	; 0x38
 800e064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e066:	e0ca      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	da18      	bge.n	800e0a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e06e:	1d3b      	adds	r3, r7, #4
 800e070:	3304      	adds	r3, #4
 800e072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	61fb      	str	r3, [r7, #28]
}
 800e08c:	bf00      	nop
 800e08e:	e7fe      	b.n	800e08e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e096:	6850      	ldr	r0, [r2, #4]
 800e098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09a:	6892      	ldr	r2, [r2, #8]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f2c0 80aa 	blt.w	800e1fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fe f9ff 	bl	800c4bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0be:	463b      	mov	r3, r7
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff ff6b 	bl	800df9c <prvSampleTimeNow>
 800e0c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b09      	cmp	r3, #9
 800e0cc:	f200 8097 	bhi.w	800e1fe <prvProcessReceivedCommands+0x19e>
 800e0d0:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <prvProcessReceivedCommands+0x78>)
 800e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d6:	bf00      	nop
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e101 	.word	0x0800e101
 800e0e4:	0800e175 	.word	0x0800e175
 800e0e8:	0800e189 	.word	0x0800e189
 800e0ec:	0800e1d3 	.word	0x0800e1d3
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e101 	.word	0x0800e101
 800e0f8:	0800e175 	.word	0x0800e175
 800e0fc:	0800e189 	.word	0x0800e189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	699b      	ldr	r3, [r3, #24]
 800e118:	18d1      	adds	r1, r2, r3
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e120:	f7ff ff5c 	bl	800dfdc <prvInsertTimerInActiveList>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d069      	beq.n	800e1fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e138:	f003 0304 	and.w	r3, r3, #4
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d05e      	beq.n	800e1fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	441a      	add	r2, r3
 800e148:	2300      	movs	r3, #0
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	2300      	movs	r3, #0
 800e14e:	2100      	movs	r1, #0
 800e150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e152:	f7ff fe05 	bl	800dd60 <xTimerGenericCommand>
 800e156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d14f      	bne.n	800e1fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	61bb      	str	r3, [r7, #24]
}
 800e170:	bf00      	nop
 800e172:	e7fe      	b.n	800e172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e17a:	f023 0301 	bic.w	r3, r3, #1
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e186:	e03a      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e18e:	f043 0301 	orr.w	r3, r3, #1
 800e192:	b2da      	uxtb	r2, r3
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10a      	bne.n	800e1be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	617b      	str	r3, [r7, #20]
}
 800e1ba:	bf00      	nop
 800e1bc:	e7fe      	b.n	800e1bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	699a      	ldr	r2, [r3, #24]
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	18d1      	adds	r1, r2, r3
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1cc:	f7ff ff06 	bl	800dfdc <prvInsertTimerInActiveList>
					break;
 800e1d0:	e015      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d103      	bne.n	800e1e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e2:	f000 fbdd 	bl	800e9a0 <vPortFree>
 800e1e6:	e00a      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1ee:	f023 0301 	bic.w	r3, r3, #1
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1fa:	e000      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e1fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1fe:	4b08      	ldr	r3, [pc, #32]	; (800e220 <prvProcessReceivedCommands+0x1c0>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	1d39      	adds	r1, r7, #4
 800e204:	2200      	movs	r2, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fc20 	bl	800ca4c <xQueueReceive>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f47f af2a 	bne.w	800e068 <prvProcessReceivedCommands+0x8>
	}
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	3730      	adds	r7, #48	; 0x30
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	24001e6c 	.word	0x24001e6c

0800e224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e22a:	e048      	b.n	800e2be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e22c:	4b2d      	ldr	r3, [pc, #180]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e236:	4b2b      	ldr	r3, [pc, #172]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3304      	adds	r3, #4
 800e244:	4618      	mov	r0, r3
 800e246:	f7fe f939 	bl	800c4bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e258:	f003 0304 	and.w	r3, r3, #4
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d02e      	beq.n	800e2be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	693a      	ldr	r2, [r7, #16]
 800e266:	4413      	add	r3, r2
 800e268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d90e      	bls.n	800e290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e27e:	4b19      	ldr	r3, [pc, #100]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3304      	adds	r3, #4
 800e286:	4619      	mov	r1, r3
 800e288:	4610      	mov	r0, r2
 800e28a:	f7fe f8de 	bl	800c44a <vListInsert>
 800e28e:	e016      	b.n	800e2be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e290:	2300      	movs	r3, #0
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	2300      	movs	r3, #0
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	2100      	movs	r1, #0
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7ff fd60 	bl	800dd60 <xTimerGenericCommand>
 800e2a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	603b      	str	r3, [r7, #0]
}
 800e2ba:	bf00      	nop
 800e2bc:	e7fe      	b.n	800e2bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2be:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1b1      	bne.n	800e22c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2c8:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2ce:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <prvSwitchTimerLists+0xc4>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a04      	ldr	r2, [pc, #16]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e2d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2d6:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <prvSwitchTimerLists+0xc4>)
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	6013      	str	r3, [r2, #0]
}
 800e2dc:	bf00      	nop
 800e2de:	3718      	adds	r7, #24
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	24001e64 	.word	0x24001e64
 800e2e8:	24001e68 	.word	0x24001e68

0800e2ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2f2:	f000 f967 	bl	800e5c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2f6:	4b15      	ldr	r3, [pc, #84]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d120      	bne.n	800e340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2fe:	4814      	ldr	r0, [pc, #80]	; (800e350 <prvCheckForValidListAndQueue+0x64>)
 800e300:	f7fe f852 	bl	800c3a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e304:	4813      	ldr	r0, [pc, #76]	; (800e354 <prvCheckForValidListAndQueue+0x68>)
 800e306:	f7fe f84f 	bl	800c3a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e30a:	4b13      	ldr	r3, [pc, #76]	; (800e358 <prvCheckForValidListAndQueue+0x6c>)
 800e30c:	4a10      	ldr	r2, [pc, #64]	; (800e350 <prvCheckForValidListAndQueue+0x64>)
 800e30e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e310:	4b12      	ldr	r3, [pc, #72]	; (800e35c <prvCheckForValidListAndQueue+0x70>)
 800e312:	4a10      	ldr	r2, [pc, #64]	; (800e354 <prvCheckForValidListAndQueue+0x68>)
 800e314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e316:	2300      	movs	r3, #0
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	4b11      	ldr	r3, [pc, #68]	; (800e360 <prvCheckForValidListAndQueue+0x74>)
 800e31c:	4a11      	ldr	r2, [pc, #68]	; (800e364 <prvCheckForValidListAndQueue+0x78>)
 800e31e:	2110      	movs	r1, #16
 800e320:	200a      	movs	r0, #10
 800e322:	f7fe f95d 	bl	800c5e0 <xQueueGenericCreateStatic>
 800e326:	4603      	mov	r3, r0
 800e328:	4a08      	ldr	r2, [pc, #32]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e32a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e32c:	4b07      	ldr	r3, [pc, #28]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e334:	4b05      	ldr	r3, [pc, #20]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	490b      	ldr	r1, [pc, #44]	; (800e368 <prvCheckForValidListAndQueue+0x7c>)
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fd76 	bl	800ce2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e340:	f000 f970 	bl	800e624 <vPortExitCritical>
}
 800e344:	bf00      	nop
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	24001e6c 	.word	0x24001e6c
 800e350:	24001e3c 	.word	0x24001e3c
 800e354:	24001e50 	.word	0x24001e50
 800e358:	24001e64 	.word	0x24001e64
 800e35c:	24001e68 	.word	0x24001e68
 800e360:	24001f18 	.word	0x24001f18
 800e364:	24001e78 	.word	0x24001e78
 800e368:	0800fcac 	.word	0x0800fcac

0800e36c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3b04      	subs	r3, #4
 800e37c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3b04      	subs	r3, #4
 800e38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	f023 0201 	bic.w	r2, r3, #1
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3b04      	subs	r3, #4
 800e39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e39c:	4a0c      	ldr	r2, [pc, #48]	; (800e3d0 <pxPortInitialiseStack+0x64>)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3b14      	subs	r3, #20
 800e3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3b04      	subs	r3, #4
 800e3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f06f 0202 	mvn.w	r2, #2
 800e3ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	3b20      	subs	r3, #32
 800e3c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3714      	adds	r7, #20
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	0800e3d5 	.word	0x0800e3d5

0800e3d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3de:	4b12      	ldr	r3, [pc, #72]	; (800e428 <prvTaskExitError+0x54>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3e6:	d00a      	beq.n	800e3fe <prvTaskExitError+0x2a>
	__asm volatile
 800e3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ec:	f383 8811 	msr	BASEPRI, r3
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	f3bf 8f4f 	dsb	sy
 800e3f8:	60fb      	str	r3, [r7, #12]
}
 800e3fa:	bf00      	nop
 800e3fc:	e7fe      	b.n	800e3fc <prvTaskExitError+0x28>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	60bb      	str	r3, [r7, #8]
}
 800e410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e412:	bf00      	nop
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d0fc      	beq.n	800e414 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e41a:	bf00      	nop
 800e41c:	bf00      	nop
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	24000010 	.word	0x24000010
 800e42c:	00000000 	.word	0x00000000

0800e430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e430:	4b07      	ldr	r3, [pc, #28]	; (800e450 <pxCurrentTCBConst2>)
 800e432:	6819      	ldr	r1, [r3, #0]
 800e434:	6808      	ldr	r0, [r1, #0]
 800e436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	f380 8809 	msr	PSP, r0
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f04f 0000 	mov.w	r0, #0
 800e446:	f380 8811 	msr	BASEPRI, r0
 800e44a:	4770      	bx	lr
 800e44c:	f3af 8000 	nop.w

0800e450 <pxCurrentTCBConst2>:
 800e450:	2400193c 	.word	0x2400193c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e454:	bf00      	nop
 800e456:	bf00      	nop

0800e458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e458:	4808      	ldr	r0, [pc, #32]	; (800e47c <prvPortStartFirstTask+0x24>)
 800e45a:	6800      	ldr	r0, [r0, #0]
 800e45c:	6800      	ldr	r0, [r0, #0]
 800e45e:	f380 8808 	msr	MSP, r0
 800e462:	f04f 0000 	mov.w	r0, #0
 800e466:	f380 8814 	msr	CONTROL, r0
 800e46a:	b662      	cpsie	i
 800e46c:	b661      	cpsie	f
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	df00      	svc	0
 800e478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e47a:	bf00      	nop
 800e47c:	e000ed08 	.word	0xe000ed08

0800e480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e486:	4b46      	ldr	r3, [pc, #280]	; (800e5a0 <xPortStartScheduler+0x120>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a46      	ldr	r2, [pc, #280]	; (800e5a4 <xPortStartScheduler+0x124>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d10a      	bne.n	800e4a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	613b      	str	r3, [r7, #16]
}
 800e4a2:	bf00      	nop
 800e4a4:	e7fe      	b.n	800e4a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4a6:	4b3e      	ldr	r3, [pc, #248]	; (800e5a0 <xPortStartScheduler+0x120>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a3f      	ldr	r2, [pc, #252]	; (800e5a8 <xPortStartScheduler+0x128>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d10a      	bne.n	800e4c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	60fb      	str	r3, [r7, #12]
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4c6:	4b39      	ldr	r3, [pc, #228]	; (800e5ac <xPortStartScheduler+0x12c>)
 800e4c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	22ff      	movs	r2, #255	; 0xff
 800e4d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4e0:	78fb      	ldrb	r3, [r7, #3]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	4b31      	ldr	r3, [pc, #196]	; (800e5b0 <xPortStartScheduler+0x130>)
 800e4ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4ee:	4b31      	ldr	r3, [pc, #196]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e4f0:	2207      	movs	r2, #7
 800e4f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4f4:	e009      	b.n	800e50a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e4f6:	4b2f      	ldr	r3, [pc, #188]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	4a2d      	ldr	r2, [pc, #180]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e4fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	b2db      	uxtb	r3, r3
 800e508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e50a:	78fb      	ldrb	r3, [r7, #3]
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e512:	2b80      	cmp	r3, #128	; 0x80
 800e514:	d0ef      	beq.n	800e4f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e516:	4b27      	ldr	r3, [pc, #156]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f1c3 0307 	rsb	r3, r3, #7
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d00a      	beq.n	800e538 <xPortStartScheduler+0xb8>
	__asm volatile
 800e522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	60bb      	str	r3, [r7, #8]
}
 800e534:	bf00      	nop
 800e536:	e7fe      	b.n	800e536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e538:	4b1e      	ldr	r3, [pc, #120]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	4a1d      	ldr	r2, [pc, #116]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e542:	4b1c      	ldr	r3, [pc, #112]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e54a:	4a1a      	ldr	r2, [pc, #104]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e54c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	b2da      	uxtb	r2, r3
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e556:	4b18      	ldr	r3, [pc, #96]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a17      	ldr	r2, [pc, #92]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e55c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e562:	4b15      	ldr	r3, [pc, #84]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a14      	ldr	r2, [pc, #80]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e56c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e56e:	f000 f8dd 	bl	800e72c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e572:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <xPortStartScheduler+0x13c>)
 800e574:	2200      	movs	r2, #0
 800e576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e578:	f000 f8fc 	bl	800e774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e57c:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <xPortStartScheduler+0x140>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a0f      	ldr	r2, [pc, #60]	; (800e5c0 <xPortStartScheduler+0x140>)
 800e582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e588:	f7ff ff66 	bl	800e458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e58c:	f7ff f84a 	bl	800d624 <vTaskSwitchContext>
	prvTaskExitError();
 800e590:	f7ff ff20 	bl	800e3d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	e000ed00 	.word	0xe000ed00
 800e5a4:	410fc271 	.word	0x410fc271
 800e5a8:	410fc270 	.word	0x410fc270
 800e5ac:	e000e400 	.word	0xe000e400
 800e5b0:	24001f68 	.word	0x24001f68
 800e5b4:	24001f6c 	.word	0x24001f6c
 800e5b8:	e000ed20 	.word	0xe000ed20
 800e5bc:	24000010 	.word	0x24000010
 800e5c0:	e000ef34 	.word	0xe000ef34

0800e5c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	607b      	str	r3, [r7, #4]
}
 800e5dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5de:	4b0f      	ldr	r3, [pc, #60]	; (800e61c <vPortEnterCritical+0x58>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	4a0d      	ldr	r2, [pc, #52]	; (800e61c <vPortEnterCritical+0x58>)
 800e5e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5e8:	4b0c      	ldr	r3, [pc, #48]	; (800e61c <vPortEnterCritical+0x58>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d10f      	bne.n	800e610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5f0:	4b0b      	ldr	r3, [pc, #44]	; (800e620 <vPortEnterCritical+0x5c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <vPortEnterCritical+0x4c>
	__asm volatile
 800e5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fe:	f383 8811 	msr	BASEPRI, r3
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	603b      	str	r3, [r7, #0]
}
 800e60c:	bf00      	nop
 800e60e:	e7fe      	b.n	800e60e <vPortEnterCritical+0x4a>
	}
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	24000010 	.word	0x24000010
 800e620:	e000ed04 	.word	0xe000ed04

0800e624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e62a:	4b12      	ldr	r3, [pc, #72]	; (800e674 <vPortExitCritical+0x50>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10a      	bne.n	800e648 <vPortExitCritical+0x24>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	607b      	str	r3, [r7, #4]
}
 800e644:	bf00      	nop
 800e646:	e7fe      	b.n	800e646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e648:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <vPortExitCritical+0x50>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	4a09      	ldr	r2, [pc, #36]	; (800e674 <vPortExitCritical+0x50>)
 800e650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <vPortExitCritical+0x50>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d105      	bne.n	800e666 <vPortExitCritical+0x42>
 800e65a:	2300      	movs	r3, #0
 800e65c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	f383 8811 	msr	BASEPRI, r3
}
 800e664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e666:	bf00      	nop
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop
 800e674:	24000010 	.word	0x24000010
	...

0800e680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e680:	f3ef 8009 	mrs	r0, PSP
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <pxCurrentTCBConst>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	f01e 0f10 	tst.w	lr, #16
 800e690:	bf08      	it	eq
 800e692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69a:	6010      	str	r0, [r2, #0]
 800e69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6a4:	f380 8811 	msr	BASEPRI, r0
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f7fe ffb8 	bl	800d624 <vTaskSwitchContext>
 800e6b4:	f04f 0000 	mov.w	r0, #0
 800e6b8:	f380 8811 	msr	BASEPRI, r0
 800e6bc:	bc09      	pop	{r0, r3}
 800e6be:	6819      	ldr	r1, [r3, #0]
 800e6c0:	6808      	ldr	r0, [r1, #0]
 800e6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c6:	f01e 0f10 	tst.w	lr, #16
 800e6ca:	bf08      	it	eq
 800e6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6d0:	f380 8809 	msr	PSP, r0
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	f3af 8000 	nop.w

0800e6e0 <pxCurrentTCBConst>:
 800e6e0:	2400193c 	.word	0x2400193c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop

0800e6e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	607b      	str	r3, [r7, #4]
}
 800e700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e702:	f7fe fed5 	bl	800d4b0 <xTaskIncrementTick>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d003      	beq.n	800e714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e70c:	4b06      	ldr	r3, [pc, #24]	; (800e728 <xPortSysTickHandler+0x40>)
 800e70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	2300      	movs	r3, #0
 800e716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	f383 8811 	msr	BASEPRI, r3
}
 800e71e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	e000ed04 	.word	0xe000ed04

0800e72c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <vPortSetupTimerInterrupt+0x34>)
 800e732:	2200      	movs	r2, #0
 800e734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e736:	4b0b      	ldr	r3, [pc, #44]	; (800e764 <vPortSetupTimerInterrupt+0x38>)
 800e738:	2200      	movs	r2, #0
 800e73a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e73c:	4b0a      	ldr	r3, [pc, #40]	; (800e768 <vPortSetupTimerInterrupt+0x3c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a0a      	ldr	r2, [pc, #40]	; (800e76c <vPortSetupTimerInterrupt+0x40>)
 800e742:	fba2 2303 	umull	r2, r3, r2, r3
 800e746:	099b      	lsrs	r3, r3, #6
 800e748:	4a09      	ldr	r2, [pc, #36]	; (800e770 <vPortSetupTimerInterrupt+0x44>)
 800e74a:	3b01      	subs	r3, #1
 800e74c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e74e:	4b04      	ldr	r3, [pc, #16]	; (800e760 <vPortSetupTimerInterrupt+0x34>)
 800e750:	2207      	movs	r2, #7
 800e752:	601a      	str	r2, [r3, #0]
}
 800e754:	bf00      	nop
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	e000e010 	.word	0xe000e010
 800e764:	e000e018 	.word	0xe000e018
 800e768:	24000000 	.word	0x24000000
 800e76c:	10624dd3 	.word	0x10624dd3
 800e770:	e000e014 	.word	0xe000e014

0800e774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e784 <vPortEnableVFP+0x10>
 800e778:	6801      	ldr	r1, [r0, #0]
 800e77a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e77e:	6001      	str	r1, [r0, #0]
 800e780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e782:	bf00      	nop
 800e784:	e000ed88 	.word	0xe000ed88

0800e788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e78e:	f3ef 8305 	mrs	r3, IPSR
 800e792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b0f      	cmp	r3, #15
 800e798:	d914      	bls.n	800e7c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e79a:	4a17      	ldr	r2, [pc, #92]	; (800e7f8 <vPortValidateInterruptPriority+0x70>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	4413      	add	r3, r2
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7a4:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <vPortValidateInterruptPriority+0x74>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	7afa      	ldrb	r2, [r7, #11]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d20a      	bcs.n	800e7c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	607b      	str	r3, [r7, #4]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7c4:	4b0e      	ldr	r3, [pc, #56]	; (800e800 <vPortValidateInterruptPriority+0x78>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7cc:	4b0d      	ldr	r3, [pc, #52]	; (800e804 <vPortValidateInterruptPriority+0x7c>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d90a      	bls.n	800e7ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	603b      	str	r3, [r7, #0]
}
 800e7e6:	bf00      	nop
 800e7e8:	e7fe      	b.n	800e7e8 <vPortValidateInterruptPriority+0x60>
	}
 800e7ea:	bf00      	nop
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	e000e3f0 	.word	0xe000e3f0
 800e7fc:	24001f68 	.word	0x24001f68
 800e800:	e000ed0c 	.word	0xe000ed0c
 800e804:	24001f6c 	.word	0x24001f6c

0800e808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08a      	sub	sp, #40	; 0x28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e810:	2300      	movs	r3, #0
 800e812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e814:	f7fe fd90 	bl	800d338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e818:	4b5b      	ldr	r3, [pc, #364]	; (800e988 <pvPortMalloc+0x180>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e820:	f000 f920 	bl	800ea64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e824:	4b59      	ldr	r3, [pc, #356]	; (800e98c <pvPortMalloc+0x184>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4013      	ands	r3, r2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f040 8093 	bne.w	800e958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01d      	beq.n	800e874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e838:	2208      	movs	r2, #8
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4413      	add	r3, r2
 800e83e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f003 0307 	and.w	r3, r3, #7
 800e846:	2b00      	cmp	r3, #0
 800e848:	d014      	beq.n	800e874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f023 0307 	bic.w	r3, r3, #7
 800e850:	3308      	adds	r3, #8
 800e852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f003 0307 	and.w	r3, r3, #7
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00a      	beq.n	800e874 <pvPortMalloc+0x6c>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	617b      	str	r3, [r7, #20]
}
 800e870:	bf00      	nop
 800e872:	e7fe      	b.n	800e872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d06e      	beq.n	800e958 <pvPortMalloc+0x150>
 800e87a:	4b45      	ldr	r3, [pc, #276]	; (800e990 <pvPortMalloc+0x188>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d869      	bhi.n	800e958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e884:	4b43      	ldr	r3, [pc, #268]	; (800e994 <pvPortMalloc+0x18c>)
 800e886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e888:	4b42      	ldr	r3, [pc, #264]	; (800e994 <pvPortMalloc+0x18c>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e88e:	e004      	b.n	800e89a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d903      	bls.n	800e8ac <pvPortMalloc+0xa4>
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1f1      	bne.n	800e890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8ac:	4b36      	ldr	r3, [pc, #216]	; (800e988 <pvPortMalloc+0x180>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d050      	beq.n	800e958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2208      	movs	r2, #8
 800e8bc:	4413      	add	r3, r2
 800e8be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	1ad2      	subs	r2, r2, r3
 800e8d0:	2308      	movs	r3, #8
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d91f      	bls.n	800e918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4413      	add	r3, r2
 800e8de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	f003 0307 	and.w	r3, r3, #7
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00a      	beq.n	800e900 <pvPortMalloc+0xf8>
	__asm volatile
 800e8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	613b      	str	r3, [r7, #16]
}
 800e8fc:	bf00      	nop
 800e8fe:	e7fe      	b.n	800e8fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	1ad2      	subs	r2, r2, r3
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e912:	69b8      	ldr	r0, [r7, #24]
 800e914:	f000 f908 	bl	800eb28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e918:	4b1d      	ldr	r3, [pc, #116]	; (800e990 <pvPortMalloc+0x188>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	4a1b      	ldr	r2, [pc, #108]	; (800e990 <pvPortMalloc+0x188>)
 800e924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e926:	4b1a      	ldr	r3, [pc, #104]	; (800e990 <pvPortMalloc+0x188>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	4b1b      	ldr	r3, [pc, #108]	; (800e998 <pvPortMalloc+0x190>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d203      	bcs.n	800e93a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e932:	4b17      	ldr	r3, [pc, #92]	; (800e990 <pvPortMalloc+0x188>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a18      	ldr	r2, [pc, #96]	; (800e998 <pvPortMalloc+0x190>)
 800e938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	685a      	ldr	r2, [r3, #4]
 800e93e:	4b13      	ldr	r3, [pc, #76]	; (800e98c <pvPortMalloc+0x184>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	431a      	orrs	r2, r3
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	2200      	movs	r2, #0
 800e94c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <pvPortMalloc+0x194>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3301      	adds	r3, #1
 800e954:	4a11      	ldr	r2, [pc, #68]	; (800e99c <pvPortMalloc+0x194>)
 800e956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e958:	f7fe fcfc 	bl	800d354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <pvPortMalloc+0x174>
	__asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	60fb      	str	r3, [r7, #12]
}
 800e978:	bf00      	nop
 800e97a:	e7fe      	b.n	800e97a <pvPortMalloc+0x172>
	return pvReturn;
 800e97c:	69fb      	ldr	r3, [r7, #28]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3728      	adds	r7, #40	; 0x28
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	24005b78 	.word	0x24005b78
 800e98c:	24005b8c 	.word	0x24005b8c
 800e990:	24005b7c 	.word	0x24005b7c
 800e994:	24005b70 	.word	0x24005b70
 800e998:	24005b80 	.word	0x24005b80
 800e99c:	24005b84 	.word	0x24005b84

0800e9a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d04d      	beq.n	800ea4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9b2:	2308      	movs	r3, #8
 800e9b4:	425b      	negs	r3, r3
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	4b24      	ldr	r3, [pc, #144]	; (800ea58 <vPortFree+0xb8>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10a      	bne.n	800e9e4 <vPortFree+0x44>
	__asm volatile
 800e9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d2:	f383 8811 	msr	BASEPRI, r3
 800e9d6:	f3bf 8f6f 	isb	sy
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	60fb      	str	r3, [r7, #12]
}
 800e9e0:	bf00      	nop
 800e9e2:	e7fe      	b.n	800e9e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00a      	beq.n	800ea02 <vPortFree+0x62>
	__asm volatile
 800e9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f0:	f383 8811 	msr	BASEPRI, r3
 800e9f4:	f3bf 8f6f 	isb	sy
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	60bb      	str	r3, [r7, #8]
}
 800e9fe:	bf00      	nop
 800ea00:	e7fe      	b.n	800ea00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	685a      	ldr	r2, [r3, #4]
 800ea06:	4b14      	ldr	r3, [pc, #80]	; (800ea58 <vPortFree+0xb8>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4013      	ands	r3, r2
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d01e      	beq.n	800ea4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d11a      	bne.n	800ea4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	4b0e      	ldr	r3, [pc, #56]	; (800ea58 <vPortFree+0xb8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	43db      	mvns	r3, r3
 800ea22:	401a      	ands	r2, r3
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea28:	f7fe fc86 	bl	800d338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	685a      	ldr	r2, [r3, #4]
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <vPortFree+0xbc>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4413      	add	r3, r2
 800ea36:	4a09      	ldr	r2, [pc, #36]	; (800ea5c <vPortFree+0xbc>)
 800ea38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea3a:	6938      	ldr	r0, [r7, #16]
 800ea3c:	f000 f874 	bl	800eb28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea40:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <vPortFree+0xc0>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	4a06      	ldr	r2, [pc, #24]	; (800ea60 <vPortFree+0xc0>)
 800ea48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea4a:	f7fe fc83 	bl	800d354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea4e:	bf00      	nop
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	24005b8c 	.word	0x24005b8c
 800ea5c:	24005b7c 	.word	0x24005b7c
 800ea60:	24005b88 	.word	0x24005b88

0800ea64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea70:	4b27      	ldr	r3, [pc, #156]	; (800eb10 <prvHeapInit+0xac>)
 800ea72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f003 0307 	and.w	r3, r3, #7
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00c      	beq.n	800ea98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3307      	adds	r3, #7
 800ea82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f023 0307 	bic.w	r3, r3, #7
 800ea8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	4a1f      	ldr	r2, [pc, #124]	; (800eb10 <prvHeapInit+0xac>)
 800ea94:	4413      	add	r3, r2
 800ea96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea9c:	4a1d      	ldr	r2, [pc, #116]	; (800eb14 <prvHeapInit+0xb0>)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eaa2:	4b1c      	ldr	r3, [pc, #112]	; (800eb14 <prvHeapInit+0xb0>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	4413      	add	r3, r2
 800eaae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eab0:	2208      	movs	r2, #8
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	1a9b      	subs	r3, r3, r2
 800eab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f023 0307 	bic.w	r3, r3, #7
 800eabe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	4a15      	ldr	r2, [pc, #84]	; (800eb18 <prvHeapInit+0xb4>)
 800eac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eac6:	4b14      	ldr	r3, [pc, #80]	; (800eb18 <prvHeapInit+0xb4>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2200      	movs	r2, #0
 800eacc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eace:	4b12      	ldr	r3, [pc, #72]	; (800eb18 <prvHeapInit+0xb4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	1ad2      	subs	r2, r2, r3
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eae4:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <prvHeapInit+0xb4>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	4a0a      	ldr	r2, [pc, #40]	; (800eb1c <prvHeapInit+0xb8>)
 800eaf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	4a09      	ldr	r2, [pc, #36]	; (800eb20 <prvHeapInit+0xbc>)
 800eafa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eafc:	4b09      	ldr	r3, [pc, #36]	; (800eb24 <prvHeapInit+0xc0>)
 800eafe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb02:	601a      	str	r2, [r3, #0]
}
 800eb04:	bf00      	nop
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	24001f70 	.word	0x24001f70
 800eb14:	24005b70 	.word	0x24005b70
 800eb18:	24005b78 	.word	0x24005b78
 800eb1c:	24005b80 	.word	0x24005b80
 800eb20:	24005b7c 	.word	0x24005b7c
 800eb24:	24005b8c 	.word	0x24005b8c

0800eb28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb30:	4b28      	ldr	r3, [pc, #160]	; (800ebd4 <prvInsertBlockIntoFreeList+0xac>)
 800eb32:	60fb      	str	r3, [r7, #12]
 800eb34:	e002      	b.n	800eb3c <prvInsertBlockIntoFreeList+0x14>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d8f7      	bhi.n	800eb36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	68ba      	ldr	r2, [r7, #8]
 800eb50:	4413      	add	r3, r2
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d108      	bne.n	800eb6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	441a      	add	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	441a      	add	r2, r3
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d118      	bne.n	800ebb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d00d      	beq.n	800eba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685a      	ldr	r2, [r3, #4]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	441a      	add	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	e008      	b.n	800ebb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eba6:	4b0c      	ldr	r3, [pc, #48]	; (800ebd8 <prvInsertBlockIntoFreeList+0xb0>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	e003      	b.n	800ebb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d002      	beq.n	800ebc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebc6:	bf00      	nop
 800ebc8:	3714      	adds	r7, #20
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	24005b70 	.word	0x24005b70
 800ebd8:	24005b78 	.word	0x24005b78

0800ebdc <__errno>:
 800ebdc:	4b01      	ldr	r3, [pc, #4]	; (800ebe4 <__errno+0x8>)
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	24000014 	.word	0x24000014

0800ebe8 <std>:
 800ebe8:	2300      	movs	r3, #0
 800ebea:	b510      	push	{r4, lr}
 800ebec:	4604      	mov	r4, r0
 800ebee:	e9c0 3300 	strd	r3, r3, [r0]
 800ebf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebf6:	6083      	str	r3, [r0, #8]
 800ebf8:	8181      	strh	r1, [r0, #12]
 800ebfa:	6643      	str	r3, [r0, #100]	; 0x64
 800ebfc:	81c2      	strh	r2, [r0, #14]
 800ebfe:	6183      	str	r3, [r0, #24]
 800ec00:	4619      	mov	r1, r3
 800ec02:	2208      	movs	r2, #8
 800ec04:	305c      	adds	r0, #92	; 0x5c
 800ec06:	f000 f91a 	bl	800ee3e <memset>
 800ec0a:	4b05      	ldr	r3, [pc, #20]	; (800ec20 <std+0x38>)
 800ec0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ec0e:	4b05      	ldr	r3, [pc, #20]	; (800ec24 <std+0x3c>)
 800ec10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec12:	4b05      	ldr	r3, [pc, #20]	; (800ec28 <std+0x40>)
 800ec14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec16:	4b05      	ldr	r3, [pc, #20]	; (800ec2c <std+0x44>)
 800ec18:	6224      	str	r4, [r4, #32]
 800ec1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ec1c:	bd10      	pop	{r4, pc}
 800ec1e:	bf00      	nop
 800ec20:	0800f09d 	.word	0x0800f09d
 800ec24:	0800f0bf 	.word	0x0800f0bf
 800ec28:	0800f0f7 	.word	0x0800f0f7
 800ec2c:	0800f11b 	.word	0x0800f11b

0800ec30 <_cleanup_r>:
 800ec30:	4901      	ldr	r1, [pc, #4]	; (800ec38 <_cleanup_r+0x8>)
 800ec32:	f000 b8af 	b.w	800ed94 <_fwalk_reent>
 800ec36:	bf00      	nop
 800ec38:	0800f275 	.word	0x0800f275

0800ec3c <__sfmoreglue>:
 800ec3c:	b570      	push	{r4, r5, r6, lr}
 800ec3e:	2268      	movs	r2, #104	; 0x68
 800ec40:	1e4d      	subs	r5, r1, #1
 800ec42:	4355      	muls	r5, r2
 800ec44:	460e      	mov	r6, r1
 800ec46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec4a:	f000 f921 	bl	800ee90 <_malloc_r>
 800ec4e:	4604      	mov	r4, r0
 800ec50:	b140      	cbz	r0, 800ec64 <__sfmoreglue+0x28>
 800ec52:	2100      	movs	r1, #0
 800ec54:	e9c0 1600 	strd	r1, r6, [r0]
 800ec58:	300c      	adds	r0, #12
 800ec5a:	60a0      	str	r0, [r4, #8]
 800ec5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec60:	f000 f8ed 	bl	800ee3e <memset>
 800ec64:	4620      	mov	r0, r4
 800ec66:	bd70      	pop	{r4, r5, r6, pc}

0800ec68 <__sfp_lock_acquire>:
 800ec68:	4801      	ldr	r0, [pc, #4]	; (800ec70 <__sfp_lock_acquire+0x8>)
 800ec6a:	f000 b8d8 	b.w	800ee1e <__retarget_lock_acquire_recursive>
 800ec6e:	bf00      	nop
 800ec70:	24005b91 	.word	0x24005b91

0800ec74 <__sfp_lock_release>:
 800ec74:	4801      	ldr	r0, [pc, #4]	; (800ec7c <__sfp_lock_release+0x8>)
 800ec76:	f000 b8d3 	b.w	800ee20 <__retarget_lock_release_recursive>
 800ec7a:	bf00      	nop
 800ec7c:	24005b91 	.word	0x24005b91

0800ec80 <__sinit_lock_acquire>:
 800ec80:	4801      	ldr	r0, [pc, #4]	; (800ec88 <__sinit_lock_acquire+0x8>)
 800ec82:	f000 b8cc 	b.w	800ee1e <__retarget_lock_acquire_recursive>
 800ec86:	bf00      	nop
 800ec88:	24005b92 	.word	0x24005b92

0800ec8c <__sinit_lock_release>:
 800ec8c:	4801      	ldr	r0, [pc, #4]	; (800ec94 <__sinit_lock_release+0x8>)
 800ec8e:	f000 b8c7 	b.w	800ee20 <__retarget_lock_release_recursive>
 800ec92:	bf00      	nop
 800ec94:	24005b92 	.word	0x24005b92

0800ec98 <__sinit>:
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	f7ff fff0 	bl	800ec80 <__sinit_lock_acquire>
 800eca0:	69a3      	ldr	r3, [r4, #24]
 800eca2:	b11b      	cbz	r3, 800ecac <__sinit+0x14>
 800eca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca8:	f7ff bff0 	b.w	800ec8c <__sinit_lock_release>
 800ecac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ecb0:	6523      	str	r3, [r4, #80]	; 0x50
 800ecb2:	4b13      	ldr	r3, [pc, #76]	; (800ed00 <__sinit+0x68>)
 800ecb4:	4a13      	ldr	r2, [pc, #76]	; (800ed04 <__sinit+0x6c>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecba:	42a3      	cmp	r3, r4
 800ecbc:	bf04      	itt	eq
 800ecbe:	2301      	moveq	r3, #1
 800ecc0:	61a3      	streq	r3, [r4, #24]
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f000 f820 	bl	800ed08 <__sfp>
 800ecc8:	6060      	str	r0, [r4, #4]
 800ecca:	4620      	mov	r0, r4
 800eccc:	f000 f81c 	bl	800ed08 <__sfp>
 800ecd0:	60a0      	str	r0, [r4, #8]
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f000 f818 	bl	800ed08 <__sfp>
 800ecd8:	2200      	movs	r2, #0
 800ecda:	60e0      	str	r0, [r4, #12]
 800ecdc:	2104      	movs	r1, #4
 800ecde:	6860      	ldr	r0, [r4, #4]
 800ece0:	f7ff ff82 	bl	800ebe8 <std>
 800ece4:	68a0      	ldr	r0, [r4, #8]
 800ece6:	2201      	movs	r2, #1
 800ece8:	2109      	movs	r1, #9
 800ecea:	f7ff ff7d 	bl	800ebe8 <std>
 800ecee:	68e0      	ldr	r0, [r4, #12]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	2112      	movs	r1, #18
 800ecf4:	f7ff ff78 	bl	800ebe8 <std>
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	61a3      	str	r3, [r4, #24]
 800ecfc:	e7d2      	b.n	800eca4 <__sinit+0xc>
 800ecfe:	bf00      	nop
 800ed00:	0800fd70 	.word	0x0800fd70
 800ed04:	0800ec31 	.word	0x0800ec31

0800ed08 <__sfp>:
 800ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0a:	4607      	mov	r7, r0
 800ed0c:	f7ff ffac 	bl	800ec68 <__sfp_lock_acquire>
 800ed10:	4b1e      	ldr	r3, [pc, #120]	; (800ed8c <__sfp+0x84>)
 800ed12:	681e      	ldr	r6, [r3, #0]
 800ed14:	69b3      	ldr	r3, [r6, #24]
 800ed16:	b913      	cbnz	r3, 800ed1e <__sfp+0x16>
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f7ff ffbd 	bl	800ec98 <__sinit>
 800ed1e:	3648      	adds	r6, #72	; 0x48
 800ed20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	d503      	bpl.n	800ed30 <__sfp+0x28>
 800ed28:	6833      	ldr	r3, [r6, #0]
 800ed2a:	b30b      	cbz	r3, 800ed70 <__sfp+0x68>
 800ed2c:	6836      	ldr	r6, [r6, #0]
 800ed2e:	e7f7      	b.n	800ed20 <__sfp+0x18>
 800ed30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed34:	b9d5      	cbnz	r5, 800ed6c <__sfp+0x64>
 800ed36:	4b16      	ldr	r3, [pc, #88]	; (800ed90 <__sfp+0x88>)
 800ed38:	60e3      	str	r3, [r4, #12]
 800ed3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed3e:	6665      	str	r5, [r4, #100]	; 0x64
 800ed40:	f000 f86c 	bl	800ee1c <__retarget_lock_init_recursive>
 800ed44:	f7ff ff96 	bl	800ec74 <__sfp_lock_release>
 800ed48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed50:	6025      	str	r5, [r4, #0]
 800ed52:	61a5      	str	r5, [r4, #24]
 800ed54:	2208      	movs	r2, #8
 800ed56:	4629      	mov	r1, r5
 800ed58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed5c:	f000 f86f 	bl	800ee3e <memset>
 800ed60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed68:	4620      	mov	r0, r4
 800ed6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed6c:	3468      	adds	r4, #104	; 0x68
 800ed6e:	e7d9      	b.n	800ed24 <__sfp+0x1c>
 800ed70:	2104      	movs	r1, #4
 800ed72:	4638      	mov	r0, r7
 800ed74:	f7ff ff62 	bl	800ec3c <__sfmoreglue>
 800ed78:	4604      	mov	r4, r0
 800ed7a:	6030      	str	r0, [r6, #0]
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d1d5      	bne.n	800ed2c <__sfp+0x24>
 800ed80:	f7ff ff78 	bl	800ec74 <__sfp_lock_release>
 800ed84:	230c      	movs	r3, #12
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	e7ee      	b.n	800ed68 <__sfp+0x60>
 800ed8a:	bf00      	nop
 800ed8c:	0800fd70 	.word	0x0800fd70
 800ed90:	ffff0001 	.word	0xffff0001

0800ed94 <_fwalk_reent>:
 800ed94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed98:	4606      	mov	r6, r0
 800ed9a:	4688      	mov	r8, r1
 800ed9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eda0:	2700      	movs	r7, #0
 800eda2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eda6:	f1b9 0901 	subs.w	r9, r9, #1
 800edaa:	d505      	bpl.n	800edb8 <_fwalk_reent+0x24>
 800edac:	6824      	ldr	r4, [r4, #0]
 800edae:	2c00      	cmp	r4, #0
 800edb0:	d1f7      	bne.n	800eda2 <_fwalk_reent+0xe>
 800edb2:	4638      	mov	r0, r7
 800edb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb8:	89ab      	ldrh	r3, [r5, #12]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d907      	bls.n	800edce <_fwalk_reent+0x3a>
 800edbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edc2:	3301      	adds	r3, #1
 800edc4:	d003      	beq.n	800edce <_fwalk_reent+0x3a>
 800edc6:	4629      	mov	r1, r5
 800edc8:	4630      	mov	r0, r6
 800edca:	47c0      	blx	r8
 800edcc:	4307      	orrs	r7, r0
 800edce:	3568      	adds	r5, #104	; 0x68
 800edd0:	e7e9      	b.n	800eda6 <_fwalk_reent+0x12>
	...

0800edd4 <__libc_init_array>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	4d0d      	ldr	r5, [pc, #52]	; (800ee0c <__libc_init_array+0x38>)
 800edd8:	4c0d      	ldr	r4, [pc, #52]	; (800ee10 <__libc_init_array+0x3c>)
 800edda:	1b64      	subs	r4, r4, r5
 800eddc:	10a4      	asrs	r4, r4, #2
 800edde:	2600      	movs	r6, #0
 800ede0:	42a6      	cmp	r6, r4
 800ede2:	d109      	bne.n	800edf8 <__libc_init_array+0x24>
 800ede4:	4d0b      	ldr	r5, [pc, #44]	; (800ee14 <__libc_init_array+0x40>)
 800ede6:	4c0c      	ldr	r4, [pc, #48]	; (800ee18 <__libc_init_array+0x44>)
 800ede8:	f000 ff32 	bl	800fc50 <_init>
 800edec:	1b64      	subs	r4, r4, r5
 800edee:	10a4      	asrs	r4, r4, #2
 800edf0:	2600      	movs	r6, #0
 800edf2:	42a6      	cmp	r6, r4
 800edf4:	d105      	bne.n	800ee02 <__libc_init_array+0x2e>
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800edfc:	4798      	blx	r3
 800edfe:	3601      	adds	r6, #1
 800ee00:	e7ee      	b.n	800ede0 <__libc_init_array+0xc>
 800ee02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee06:	4798      	blx	r3
 800ee08:	3601      	adds	r6, #1
 800ee0a:	e7f2      	b.n	800edf2 <__libc_init_array+0x1e>
 800ee0c:	0800fdb0 	.word	0x0800fdb0
 800ee10:	0800fdb0 	.word	0x0800fdb0
 800ee14:	0800fdb0 	.word	0x0800fdb0
 800ee18:	0800fdb4 	.word	0x0800fdb4

0800ee1c <__retarget_lock_init_recursive>:
 800ee1c:	4770      	bx	lr

0800ee1e <__retarget_lock_acquire_recursive>:
 800ee1e:	4770      	bx	lr

0800ee20 <__retarget_lock_release_recursive>:
 800ee20:	4770      	bx	lr

0800ee22 <memcpy>:
 800ee22:	440a      	add	r2, r1
 800ee24:	4291      	cmp	r1, r2
 800ee26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ee2a:	d100      	bne.n	800ee2e <memcpy+0xc>
 800ee2c:	4770      	bx	lr
 800ee2e:	b510      	push	{r4, lr}
 800ee30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee38:	4291      	cmp	r1, r2
 800ee3a:	d1f9      	bne.n	800ee30 <memcpy+0xe>
 800ee3c:	bd10      	pop	{r4, pc}

0800ee3e <memset>:
 800ee3e:	4402      	add	r2, r0
 800ee40:	4603      	mov	r3, r0
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d100      	bne.n	800ee48 <memset+0xa>
 800ee46:	4770      	bx	lr
 800ee48:	f803 1b01 	strb.w	r1, [r3], #1
 800ee4c:	e7f9      	b.n	800ee42 <memset+0x4>
	...

0800ee50 <sbrk_aligned>:
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	4e0e      	ldr	r6, [pc, #56]	; (800ee8c <sbrk_aligned+0x3c>)
 800ee54:	460c      	mov	r4, r1
 800ee56:	6831      	ldr	r1, [r6, #0]
 800ee58:	4605      	mov	r5, r0
 800ee5a:	b911      	cbnz	r1, 800ee62 <sbrk_aligned+0x12>
 800ee5c:	f000 f90e 	bl	800f07c <_sbrk_r>
 800ee60:	6030      	str	r0, [r6, #0]
 800ee62:	4621      	mov	r1, r4
 800ee64:	4628      	mov	r0, r5
 800ee66:	f000 f909 	bl	800f07c <_sbrk_r>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d00a      	beq.n	800ee84 <sbrk_aligned+0x34>
 800ee6e:	1cc4      	adds	r4, r0, #3
 800ee70:	f024 0403 	bic.w	r4, r4, #3
 800ee74:	42a0      	cmp	r0, r4
 800ee76:	d007      	beq.n	800ee88 <sbrk_aligned+0x38>
 800ee78:	1a21      	subs	r1, r4, r0
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f000 f8fe 	bl	800f07c <_sbrk_r>
 800ee80:	3001      	adds	r0, #1
 800ee82:	d101      	bne.n	800ee88 <sbrk_aligned+0x38>
 800ee84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee88:	4620      	mov	r0, r4
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
 800ee8c:	24005b98 	.word	0x24005b98

0800ee90 <_malloc_r>:
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	1ccd      	adds	r5, r1, #3
 800ee96:	f025 0503 	bic.w	r5, r5, #3
 800ee9a:	3508      	adds	r5, #8
 800ee9c:	2d0c      	cmp	r5, #12
 800ee9e:	bf38      	it	cc
 800eea0:	250c      	movcc	r5, #12
 800eea2:	2d00      	cmp	r5, #0
 800eea4:	4607      	mov	r7, r0
 800eea6:	db01      	blt.n	800eeac <_malloc_r+0x1c>
 800eea8:	42a9      	cmp	r1, r5
 800eeaa:	d905      	bls.n	800eeb8 <_malloc_r+0x28>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	4e2e      	ldr	r6, [pc, #184]	; (800ef74 <_malloc_r+0xe4>)
 800eeba:	f000 fa29 	bl	800f310 <__malloc_lock>
 800eebe:	6833      	ldr	r3, [r6, #0]
 800eec0:	461c      	mov	r4, r3
 800eec2:	bb34      	cbnz	r4, 800ef12 <_malloc_r+0x82>
 800eec4:	4629      	mov	r1, r5
 800eec6:	4638      	mov	r0, r7
 800eec8:	f7ff ffc2 	bl	800ee50 <sbrk_aligned>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	4604      	mov	r4, r0
 800eed0:	d14d      	bne.n	800ef6e <_malloc_r+0xde>
 800eed2:	6834      	ldr	r4, [r6, #0]
 800eed4:	4626      	mov	r6, r4
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d140      	bne.n	800ef5c <_malloc_r+0xcc>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	4631      	mov	r1, r6
 800eede:	4638      	mov	r0, r7
 800eee0:	eb04 0803 	add.w	r8, r4, r3
 800eee4:	f000 f8ca 	bl	800f07c <_sbrk_r>
 800eee8:	4580      	cmp	r8, r0
 800eeea:	d13a      	bne.n	800ef62 <_malloc_r+0xd2>
 800eeec:	6821      	ldr	r1, [r4, #0]
 800eeee:	3503      	adds	r5, #3
 800eef0:	1a6d      	subs	r5, r5, r1
 800eef2:	f025 0503 	bic.w	r5, r5, #3
 800eef6:	3508      	adds	r5, #8
 800eef8:	2d0c      	cmp	r5, #12
 800eefa:	bf38      	it	cc
 800eefc:	250c      	movcc	r5, #12
 800eefe:	4629      	mov	r1, r5
 800ef00:	4638      	mov	r0, r7
 800ef02:	f7ff ffa5 	bl	800ee50 <sbrk_aligned>
 800ef06:	3001      	adds	r0, #1
 800ef08:	d02b      	beq.n	800ef62 <_malloc_r+0xd2>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	442b      	add	r3, r5
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	e00e      	b.n	800ef30 <_malloc_r+0xa0>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	1b52      	subs	r2, r2, r5
 800ef16:	d41e      	bmi.n	800ef56 <_malloc_r+0xc6>
 800ef18:	2a0b      	cmp	r2, #11
 800ef1a:	d916      	bls.n	800ef4a <_malloc_r+0xba>
 800ef1c:	1961      	adds	r1, r4, r5
 800ef1e:	42a3      	cmp	r3, r4
 800ef20:	6025      	str	r5, [r4, #0]
 800ef22:	bf18      	it	ne
 800ef24:	6059      	strne	r1, [r3, #4]
 800ef26:	6863      	ldr	r3, [r4, #4]
 800ef28:	bf08      	it	eq
 800ef2a:	6031      	streq	r1, [r6, #0]
 800ef2c:	5162      	str	r2, [r4, r5]
 800ef2e:	604b      	str	r3, [r1, #4]
 800ef30:	4638      	mov	r0, r7
 800ef32:	f104 060b 	add.w	r6, r4, #11
 800ef36:	f000 f9f1 	bl	800f31c <__malloc_unlock>
 800ef3a:	f026 0607 	bic.w	r6, r6, #7
 800ef3e:	1d23      	adds	r3, r4, #4
 800ef40:	1af2      	subs	r2, r6, r3
 800ef42:	d0b6      	beq.n	800eeb2 <_malloc_r+0x22>
 800ef44:	1b9b      	subs	r3, r3, r6
 800ef46:	50a3      	str	r3, [r4, r2]
 800ef48:	e7b3      	b.n	800eeb2 <_malloc_r+0x22>
 800ef4a:	6862      	ldr	r2, [r4, #4]
 800ef4c:	42a3      	cmp	r3, r4
 800ef4e:	bf0c      	ite	eq
 800ef50:	6032      	streq	r2, [r6, #0]
 800ef52:	605a      	strne	r2, [r3, #4]
 800ef54:	e7ec      	b.n	800ef30 <_malloc_r+0xa0>
 800ef56:	4623      	mov	r3, r4
 800ef58:	6864      	ldr	r4, [r4, #4]
 800ef5a:	e7b2      	b.n	800eec2 <_malloc_r+0x32>
 800ef5c:	4634      	mov	r4, r6
 800ef5e:	6876      	ldr	r6, [r6, #4]
 800ef60:	e7b9      	b.n	800eed6 <_malloc_r+0x46>
 800ef62:	230c      	movs	r3, #12
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	4638      	mov	r0, r7
 800ef68:	f000 f9d8 	bl	800f31c <__malloc_unlock>
 800ef6c:	e7a1      	b.n	800eeb2 <_malloc_r+0x22>
 800ef6e:	6025      	str	r5, [r4, #0]
 800ef70:	e7de      	b.n	800ef30 <_malloc_r+0xa0>
 800ef72:	bf00      	nop
 800ef74:	24005b94 	.word	0x24005b94

0800ef78 <iprintf>:
 800ef78:	b40f      	push	{r0, r1, r2, r3}
 800ef7a:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <iprintf+0x2c>)
 800ef7c:	b513      	push	{r0, r1, r4, lr}
 800ef7e:	681c      	ldr	r4, [r3, #0]
 800ef80:	b124      	cbz	r4, 800ef8c <iprintf+0x14>
 800ef82:	69a3      	ldr	r3, [r4, #24]
 800ef84:	b913      	cbnz	r3, 800ef8c <iprintf+0x14>
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7ff fe86 	bl	800ec98 <__sinit>
 800ef8c:	ab05      	add	r3, sp, #20
 800ef8e:	9a04      	ldr	r2, [sp, #16]
 800ef90:	68a1      	ldr	r1, [r4, #8]
 800ef92:	9301      	str	r3, [sp, #4]
 800ef94:	4620      	mov	r0, r4
 800ef96:	f000 fa3d 	bl	800f414 <_vfiprintf_r>
 800ef9a:	b002      	add	sp, #8
 800ef9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efa0:	b004      	add	sp, #16
 800efa2:	4770      	bx	lr
 800efa4:	24000014 	.word	0x24000014

0800efa8 <cleanup_glue>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	460c      	mov	r4, r1
 800efac:	6809      	ldr	r1, [r1, #0]
 800efae:	4605      	mov	r5, r0
 800efb0:	b109      	cbz	r1, 800efb6 <cleanup_glue+0xe>
 800efb2:	f7ff fff9 	bl	800efa8 <cleanup_glue>
 800efb6:	4621      	mov	r1, r4
 800efb8:	4628      	mov	r0, r5
 800efba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efbe:	f000 b9b3 	b.w	800f328 <_free_r>
	...

0800efc4 <_reclaim_reent>:
 800efc4:	4b2c      	ldr	r3, [pc, #176]	; (800f078 <_reclaim_reent+0xb4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4283      	cmp	r3, r0
 800efca:	b570      	push	{r4, r5, r6, lr}
 800efcc:	4604      	mov	r4, r0
 800efce:	d051      	beq.n	800f074 <_reclaim_reent+0xb0>
 800efd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800efd2:	b143      	cbz	r3, 800efe6 <_reclaim_reent+0x22>
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d14a      	bne.n	800f070 <_reclaim_reent+0xac>
 800efda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efdc:	6819      	ldr	r1, [r3, #0]
 800efde:	b111      	cbz	r1, 800efe6 <_reclaim_reent+0x22>
 800efe0:	4620      	mov	r0, r4
 800efe2:	f000 f9a1 	bl	800f328 <_free_r>
 800efe6:	6961      	ldr	r1, [r4, #20]
 800efe8:	b111      	cbz	r1, 800eff0 <_reclaim_reent+0x2c>
 800efea:	4620      	mov	r0, r4
 800efec:	f000 f99c 	bl	800f328 <_free_r>
 800eff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eff2:	b111      	cbz	r1, 800effa <_reclaim_reent+0x36>
 800eff4:	4620      	mov	r0, r4
 800eff6:	f000 f997 	bl	800f328 <_free_r>
 800effa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800effc:	b111      	cbz	r1, 800f004 <_reclaim_reent+0x40>
 800effe:	4620      	mov	r0, r4
 800f000:	f000 f992 	bl	800f328 <_free_r>
 800f004:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f006:	b111      	cbz	r1, 800f00e <_reclaim_reent+0x4a>
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f98d 	bl	800f328 <_free_r>
 800f00e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f010:	b111      	cbz	r1, 800f018 <_reclaim_reent+0x54>
 800f012:	4620      	mov	r0, r4
 800f014:	f000 f988 	bl	800f328 <_free_r>
 800f018:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f01a:	b111      	cbz	r1, 800f022 <_reclaim_reent+0x5e>
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 f983 	bl	800f328 <_free_r>
 800f022:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f024:	b111      	cbz	r1, 800f02c <_reclaim_reent+0x68>
 800f026:	4620      	mov	r0, r4
 800f028:	f000 f97e 	bl	800f328 <_free_r>
 800f02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f02e:	b111      	cbz	r1, 800f036 <_reclaim_reent+0x72>
 800f030:	4620      	mov	r0, r4
 800f032:	f000 f979 	bl	800f328 <_free_r>
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	b1e3      	cbz	r3, 800f074 <_reclaim_reent+0xb0>
 800f03a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f03c:	4620      	mov	r0, r4
 800f03e:	4798      	blx	r3
 800f040:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f042:	b1b9      	cbz	r1, 800f074 <_reclaim_reent+0xb0>
 800f044:	4620      	mov	r0, r4
 800f046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f04a:	f7ff bfad 	b.w	800efa8 <cleanup_glue>
 800f04e:	5949      	ldr	r1, [r1, r5]
 800f050:	b941      	cbnz	r1, 800f064 <_reclaim_reent+0xa0>
 800f052:	3504      	adds	r5, #4
 800f054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f056:	2d80      	cmp	r5, #128	; 0x80
 800f058:	68d9      	ldr	r1, [r3, #12]
 800f05a:	d1f8      	bne.n	800f04e <_reclaim_reent+0x8a>
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 f963 	bl	800f328 <_free_r>
 800f062:	e7ba      	b.n	800efda <_reclaim_reent+0x16>
 800f064:	680e      	ldr	r6, [r1, #0]
 800f066:	4620      	mov	r0, r4
 800f068:	f000 f95e 	bl	800f328 <_free_r>
 800f06c:	4631      	mov	r1, r6
 800f06e:	e7ef      	b.n	800f050 <_reclaim_reent+0x8c>
 800f070:	2500      	movs	r5, #0
 800f072:	e7ef      	b.n	800f054 <_reclaim_reent+0x90>
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	bf00      	nop
 800f078:	24000014 	.word	0x24000014

0800f07c <_sbrk_r>:
 800f07c:	b538      	push	{r3, r4, r5, lr}
 800f07e:	4d06      	ldr	r5, [pc, #24]	; (800f098 <_sbrk_r+0x1c>)
 800f080:	2300      	movs	r3, #0
 800f082:	4604      	mov	r4, r0
 800f084:	4608      	mov	r0, r1
 800f086:	602b      	str	r3, [r5, #0]
 800f088:	f7f3 fad4 	bl	8002634 <_sbrk>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	d102      	bne.n	800f096 <_sbrk_r+0x1a>
 800f090:	682b      	ldr	r3, [r5, #0]
 800f092:	b103      	cbz	r3, 800f096 <_sbrk_r+0x1a>
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	bd38      	pop	{r3, r4, r5, pc}
 800f098:	24005b9c 	.word	0x24005b9c

0800f09c <__sread>:
 800f09c:	b510      	push	{r4, lr}
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a4:	f000 fc7a 	bl	800f99c <_read_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	bfab      	itete	ge
 800f0ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f0b0:	181b      	addge	r3, r3, r0
 800f0b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0b6:	bfac      	ite	ge
 800f0b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0ba:	81a3      	strhlt	r3, [r4, #12]
 800f0bc:	bd10      	pop	{r4, pc}

0800f0be <__swrite>:
 800f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	461f      	mov	r7, r3
 800f0c4:	898b      	ldrh	r3, [r1, #12]
 800f0c6:	05db      	lsls	r3, r3, #23
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	d505      	bpl.n	800f0dc <__swrite+0x1e>
 800f0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f000 f908 	bl	800f2ec <_lseek_r>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	463b      	mov	r3, r7
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f2:	f000 b817 	b.w	800f124 <_write_r>

0800f0f6 <__sseek>:
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fe:	f000 f8f5 	bl	800f2ec <_lseek_r>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	bf15      	itete	ne
 800f108:	6560      	strne	r0, [r4, #84]	; 0x54
 800f10a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f10e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f112:	81a3      	strheq	r3, [r4, #12]
 800f114:	bf18      	it	ne
 800f116:	81a3      	strhne	r3, [r4, #12]
 800f118:	bd10      	pop	{r4, pc}

0800f11a <__sclose>:
 800f11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11e:	f000 b813 	b.w	800f148 <_close_r>
	...

0800f124 <_write_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4d07      	ldr	r5, [pc, #28]	; (800f144 <_write_r+0x20>)
 800f128:	4604      	mov	r4, r0
 800f12a:	4608      	mov	r0, r1
 800f12c:	4611      	mov	r1, r2
 800f12e:	2200      	movs	r2, #0
 800f130:	602a      	str	r2, [r5, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	f7f3 fa2d 	bl	8002592 <_write>
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	d102      	bne.n	800f142 <_write_r+0x1e>
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	b103      	cbz	r3, 800f142 <_write_r+0x1e>
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	24005b9c 	.word	0x24005b9c

0800f148 <_close_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	4d06      	ldr	r5, [pc, #24]	; (800f164 <_close_r+0x1c>)
 800f14c:	2300      	movs	r3, #0
 800f14e:	4604      	mov	r4, r0
 800f150:	4608      	mov	r0, r1
 800f152:	602b      	str	r3, [r5, #0]
 800f154:	f7f3 fa39 	bl	80025ca <_close>
 800f158:	1c43      	adds	r3, r0, #1
 800f15a:	d102      	bne.n	800f162 <_close_r+0x1a>
 800f15c:	682b      	ldr	r3, [r5, #0]
 800f15e:	b103      	cbz	r3, 800f162 <_close_r+0x1a>
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	bd38      	pop	{r3, r4, r5, pc}
 800f164:	24005b9c 	.word	0x24005b9c

0800f168 <__sflush_r>:
 800f168:	898a      	ldrh	r2, [r1, #12]
 800f16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16e:	4605      	mov	r5, r0
 800f170:	0710      	lsls	r0, r2, #28
 800f172:	460c      	mov	r4, r1
 800f174:	d458      	bmi.n	800f228 <__sflush_r+0xc0>
 800f176:	684b      	ldr	r3, [r1, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	dc05      	bgt.n	800f188 <__sflush_r+0x20>
 800f17c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f17e:	2b00      	cmp	r3, #0
 800f180:	dc02      	bgt.n	800f188 <__sflush_r+0x20>
 800f182:	2000      	movs	r0, #0
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f18a:	2e00      	cmp	r6, #0
 800f18c:	d0f9      	beq.n	800f182 <__sflush_r+0x1a>
 800f18e:	2300      	movs	r3, #0
 800f190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f194:	682f      	ldr	r7, [r5, #0]
 800f196:	602b      	str	r3, [r5, #0]
 800f198:	d032      	beq.n	800f200 <__sflush_r+0x98>
 800f19a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	075a      	lsls	r2, r3, #29
 800f1a0:	d505      	bpl.n	800f1ae <__sflush_r+0x46>
 800f1a2:	6863      	ldr	r3, [r4, #4]
 800f1a4:	1ac0      	subs	r0, r0, r3
 800f1a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1a8:	b10b      	cbz	r3, 800f1ae <__sflush_r+0x46>
 800f1aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1ac:	1ac0      	subs	r0, r0, r3
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1b4:	6a21      	ldr	r1, [r4, #32]
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	47b0      	blx	r6
 800f1ba:	1c43      	adds	r3, r0, #1
 800f1bc:	89a3      	ldrh	r3, [r4, #12]
 800f1be:	d106      	bne.n	800f1ce <__sflush_r+0x66>
 800f1c0:	6829      	ldr	r1, [r5, #0]
 800f1c2:	291d      	cmp	r1, #29
 800f1c4:	d82c      	bhi.n	800f220 <__sflush_r+0xb8>
 800f1c6:	4a2a      	ldr	r2, [pc, #168]	; (800f270 <__sflush_r+0x108>)
 800f1c8:	40ca      	lsrs	r2, r1
 800f1ca:	07d6      	lsls	r6, r2, #31
 800f1cc:	d528      	bpl.n	800f220 <__sflush_r+0xb8>
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	6062      	str	r2, [r4, #4]
 800f1d2:	04d9      	lsls	r1, r3, #19
 800f1d4:	6922      	ldr	r2, [r4, #16]
 800f1d6:	6022      	str	r2, [r4, #0]
 800f1d8:	d504      	bpl.n	800f1e4 <__sflush_r+0x7c>
 800f1da:	1c42      	adds	r2, r0, #1
 800f1dc:	d101      	bne.n	800f1e2 <__sflush_r+0x7a>
 800f1de:	682b      	ldr	r3, [r5, #0]
 800f1e0:	b903      	cbnz	r3, 800f1e4 <__sflush_r+0x7c>
 800f1e2:	6560      	str	r0, [r4, #84]	; 0x54
 800f1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1e6:	602f      	str	r7, [r5, #0]
 800f1e8:	2900      	cmp	r1, #0
 800f1ea:	d0ca      	beq.n	800f182 <__sflush_r+0x1a>
 800f1ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d002      	beq.n	800f1fa <__sflush_r+0x92>
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f000 f897 	bl	800f328 <_free_r>
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	6360      	str	r0, [r4, #52]	; 0x34
 800f1fe:	e7c1      	b.n	800f184 <__sflush_r+0x1c>
 800f200:	6a21      	ldr	r1, [r4, #32]
 800f202:	2301      	movs	r3, #1
 800f204:	4628      	mov	r0, r5
 800f206:	47b0      	blx	r6
 800f208:	1c41      	adds	r1, r0, #1
 800f20a:	d1c7      	bne.n	800f19c <__sflush_r+0x34>
 800f20c:	682b      	ldr	r3, [r5, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d0c4      	beq.n	800f19c <__sflush_r+0x34>
 800f212:	2b1d      	cmp	r3, #29
 800f214:	d001      	beq.n	800f21a <__sflush_r+0xb2>
 800f216:	2b16      	cmp	r3, #22
 800f218:	d101      	bne.n	800f21e <__sflush_r+0xb6>
 800f21a:	602f      	str	r7, [r5, #0]
 800f21c:	e7b1      	b.n	800f182 <__sflush_r+0x1a>
 800f21e:	89a3      	ldrh	r3, [r4, #12]
 800f220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f224:	81a3      	strh	r3, [r4, #12]
 800f226:	e7ad      	b.n	800f184 <__sflush_r+0x1c>
 800f228:	690f      	ldr	r7, [r1, #16]
 800f22a:	2f00      	cmp	r7, #0
 800f22c:	d0a9      	beq.n	800f182 <__sflush_r+0x1a>
 800f22e:	0793      	lsls	r3, r2, #30
 800f230:	680e      	ldr	r6, [r1, #0]
 800f232:	bf08      	it	eq
 800f234:	694b      	ldreq	r3, [r1, #20]
 800f236:	600f      	str	r7, [r1, #0]
 800f238:	bf18      	it	ne
 800f23a:	2300      	movne	r3, #0
 800f23c:	eba6 0807 	sub.w	r8, r6, r7
 800f240:	608b      	str	r3, [r1, #8]
 800f242:	f1b8 0f00 	cmp.w	r8, #0
 800f246:	dd9c      	ble.n	800f182 <__sflush_r+0x1a>
 800f248:	6a21      	ldr	r1, [r4, #32]
 800f24a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f24c:	4643      	mov	r3, r8
 800f24e:	463a      	mov	r2, r7
 800f250:	4628      	mov	r0, r5
 800f252:	47b0      	blx	r6
 800f254:	2800      	cmp	r0, #0
 800f256:	dc06      	bgt.n	800f266 <__sflush_r+0xfe>
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f25e:	81a3      	strh	r3, [r4, #12]
 800f260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f264:	e78e      	b.n	800f184 <__sflush_r+0x1c>
 800f266:	4407      	add	r7, r0
 800f268:	eba8 0800 	sub.w	r8, r8, r0
 800f26c:	e7e9      	b.n	800f242 <__sflush_r+0xda>
 800f26e:	bf00      	nop
 800f270:	20400001 	.word	0x20400001

0800f274 <_fflush_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	690b      	ldr	r3, [r1, #16]
 800f278:	4605      	mov	r5, r0
 800f27a:	460c      	mov	r4, r1
 800f27c:	b913      	cbnz	r3, 800f284 <_fflush_r+0x10>
 800f27e:	2500      	movs	r5, #0
 800f280:	4628      	mov	r0, r5
 800f282:	bd38      	pop	{r3, r4, r5, pc}
 800f284:	b118      	cbz	r0, 800f28e <_fflush_r+0x1a>
 800f286:	6983      	ldr	r3, [r0, #24]
 800f288:	b90b      	cbnz	r3, 800f28e <_fflush_r+0x1a>
 800f28a:	f7ff fd05 	bl	800ec98 <__sinit>
 800f28e:	4b14      	ldr	r3, [pc, #80]	; (800f2e0 <_fflush_r+0x6c>)
 800f290:	429c      	cmp	r4, r3
 800f292:	d11b      	bne.n	800f2cc <_fflush_r+0x58>
 800f294:	686c      	ldr	r4, [r5, #4]
 800f296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0ef      	beq.n	800f27e <_fflush_r+0xa>
 800f29e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2a0:	07d0      	lsls	r0, r2, #31
 800f2a2:	d404      	bmi.n	800f2ae <_fflush_r+0x3a>
 800f2a4:	0599      	lsls	r1, r3, #22
 800f2a6:	d402      	bmi.n	800f2ae <_fflush_r+0x3a>
 800f2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2aa:	f7ff fdb8 	bl	800ee1e <__retarget_lock_acquire_recursive>
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	f7ff ff59 	bl	800f168 <__sflush_r>
 800f2b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2b8:	07da      	lsls	r2, r3, #31
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	d4e0      	bmi.n	800f280 <_fflush_r+0xc>
 800f2be:	89a3      	ldrh	r3, [r4, #12]
 800f2c0:	059b      	lsls	r3, r3, #22
 800f2c2:	d4dd      	bmi.n	800f280 <_fflush_r+0xc>
 800f2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2c6:	f7ff fdab 	bl	800ee20 <__retarget_lock_release_recursive>
 800f2ca:	e7d9      	b.n	800f280 <_fflush_r+0xc>
 800f2cc:	4b05      	ldr	r3, [pc, #20]	; (800f2e4 <_fflush_r+0x70>)
 800f2ce:	429c      	cmp	r4, r3
 800f2d0:	d101      	bne.n	800f2d6 <_fflush_r+0x62>
 800f2d2:	68ac      	ldr	r4, [r5, #8]
 800f2d4:	e7df      	b.n	800f296 <_fflush_r+0x22>
 800f2d6:	4b04      	ldr	r3, [pc, #16]	; (800f2e8 <_fflush_r+0x74>)
 800f2d8:	429c      	cmp	r4, r3
 800f2da:	bf08      	it	eq
 800f2dc:	68ec      	ldreq	r4, [r5, #12]
 800f2de:	e7da      	b.n	800f296 <_fflush_r+0x22>
 800f2e0:	0800fd30 	.word	0x0800fd30
 800f2e4:	0800fd50 	.word	0x0800fd50
 800f2e8:	0800fd10 	.word	0x0800fd10

0800f2ec <_lseek_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d07      	ldr	r5, [pc, #28]	; (800f30c <_lseek_r+0x20>)
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f7f3 f98c 	bl	8002618 <_lseek>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_lseek_r+0x1e>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_lseek_r+0x1e>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	24005b9c 	.word	0x24005b9c

0800f310 <__malloc_lock>:
 800f310:	4801      	ldr	r0, [pc, #4]	; (800f318 <__malloc_lock+0x8>)
 800f312:	f7ff bd84 	b.w	800ee1e <__retarget_lock_acquire_recursive>
 800f316:	bf00      	nop
 800f318:	24005b90 	.word	0x24005b90

0800f31c <__malloc_unlock>:
 800f31c:	4801      	ldr	r0, [pc, #4]	; (800f324 <__malloc_unlock+0x8>)
 800f31e:	f7ff bd7f 	b.w	800ee20 <__retarget_lock_release_recursive>
 800f322:	bf00      	nop
 800f324:	24005b90 	.word	0x24005b90

0800f328 <_free_r>:
 800f328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f32a:	2900      	cmp	r1, #0
 800f32c:	d044      	beq.n	800f3b8 <_free_r+0x90>
 800f32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f332:	9001      	str	r0, [sp, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	f1a1 0404 	sub.w	r4, r1, #4
 800f33a:	bfb8      	it	lt
 800f33c:	18e4      	addlt	r4, r4, r3
 800f33e:	f7ff ffe7 	bl	800f310 <__malloc_lock>
 800f342:	4a1e      	ldr	r2, [pc, #120]	; (800f3bc <_free_r+0x94>)
 800f344:	9801      	ldr	r0, [sp, #4]
 800f346:	6813      	ldr	r3, [r2, #0]
 800f348:	b933      	cbnz	r3, 800f358 <_free_r+0x30>
 800f34a:	6063      	str	r3, [r4, #4]
 800f34c:	6014      	str	r4, [r2, #0]
 800f34e:	b003      	add	sp, #12
 800f350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f354:	f7ff bfe2 	b.w	800f31c <__malloc_unlock>
 800f358:	42a3      	cmp	r3, r4
 800f35a:	d908      	bls.n	800f36e <_free_r+0x46>
 800f35c:	6825      	ldr	r5, [r4, #0]
 800f35e:	1961      	adds	r1, r4, r5
 800f360:	428b      	cmp	r3, r1
 800f362:	bf01      	itttt	eq
 800f364:	6819      	ldreq	r1, [r3, #0]
 800f366:	685b      	ldreq	r3, [r3, #4]
 800f368:	1949      	addeq	r1, r1, r5
 800f36a:	6021      	streq	r1, [r4, #0]
 800f36c:	e7ed      	b.n	800f34a <_free_r+0x22>
 800f36e:	461a      	mov	r2, r3
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	b10b      	cbz	r3, 800f378 <_free_r+0x50>
 800f374:	42a3      	cmp	r3, r4
 800f376:	d9fa      	bls.n	800f36e <_free_r+0x46>
 800f378:	6811      	ldr	r1, [r2, #0]
 800f37a:	1855      	adds	r5, r2, r1
 800f37c:	42a5      	cmp	r5, r4
 800f37e:	d10b      	bne.n	800f398 <_free_r+0x70>
 800f380:	6824      	ldr	r4, [r4, #0]
 800f382:	4421      	add	r1, r4
 800f384:	1854      	adds	r4, r2, r1
 800f386:	42a3      	cmp	r3, r4
 800f388:	6011      	str	r1, [r2, #0]
 800f38a:	d1e0      	bne.n	800f34e <_free_r+0x26>
 800f38c:	681c      	ldr	r4, [r3, #0]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	6053      	str	r3, [r2, #4]
 800f392:	4421      	add	r1, r4
 800f394:	6011      	str	r1, [r2, #0]
 800f396:	e7da      	b.n	800f34e <_free_r+0x26>
 800f398:	d902      	bls.n	800f3a0 <_free_r+0x78>
 800f39a:	230c      	movs	r3, #12
 800f39c:	6003      	str	r3, [r0, #0]
 800f39e:	e7d6      	b.n	800f34e <_free_r+0x26>
 800f3a0:	6825      	ldr	r5, [r4, #0]
 800f3a2:	1961      	adds	r1, r4, r5
 800f3a4:	428b      	cmp	r3, r1
 800f3a6:	bf04      	itt	eq
 800f3a8:	6819      	ldreq	r1, [r3, #0]
 800f3aa:	685b      	ldreq	r3, [r3, #4]
 800f3ac:	6063      	str	r3, [r4, #4]
 800f3ae:	bf04      	itt	eq
 800f3b0:	1949      	addeq	r1, r1, r5
 800f3b2:	6021      	streq	r1, [r4, #0]
 800f3b4:	6054      	str	r4, [r2, #4]
 800f3b6:	e7ca      	b.n	800f34e <_free_r+0x26>
 800f3b8:	b003      	add	sp, #12
 800f3ba:	bd30      	pop	{r4, r5, pc}
 800f3bc:	24005b94 	.word	0x24005b94

0800f3c0 <__sfputc_r>:
 800f3c0:	6893      	ldr	r3, [r2, #8]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	b410      	push	{r4}
 800f3c8:	6093      	str	r3, [r2, #8]
 800f3ca:	da08      	bge.n	800f3de <__sfputc_r+0x1e>
 800f3cc:	6994      	ldr	r4, [r2, #24]
 800f3ce:	42a3      	cmp	r3, r4
 800f3d0:	db01      	blt.n	800f3d6 <__sfputc_r+0x16>
 800f3d2:	290a      	cmp	r1, #10
 800f3d4:	d103      	bne.n	800f3de <__sfputc_r+0x1e>
 800f3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3da:	f000 baf1 	b.w	800f9c0 <__swbuf_r>
 800f3de:	6813      	ldr	r3, [r2, #0]
 800f3e0:	1c58      	adds	r0, r3, #1
 800f3e2:	6010      	str	r0, [r2, #0]
 800f3e4:	7019      	strb	r1, [r3, #0]
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <__sfputs_r>:
 800f3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	460f      	mov	r7, r1
 800f3f4:	4614      	mov	r4, r2
 800f3f6:	18d5      	adds	r5, r2, r3
 800f3f8:	42ac      	cmp	r4, r5
 800f3fa:	d101      	bne.n	800f400 <__sfputs_r+0x12>
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e007      	b.n	800f410 <__sfputs_r+0x22>
 800f400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f404:	463a      	mov	r2, r7
 800f406:	4630      	mov	r0, r6
 800f408:	f7ff ffda 	bl	800f3c0 <__sfputc_r>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	d1f3      	bne.n	800f3f8 <__sfputs_r+0xa>
 800f410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f414 <_vfiprintf_r>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	460d      	mov	r5, r1
 800f41a:	b09d      	sub	sp, #116	; 0x74
 800f41c:	4614      	mov	r4, r2
 800f41e:	4698      	mov	r8, r3
 800f420:	4606      	mov	r6, r0
 800f422:	b118      	cbz	r0, 800f42c <_vfiprintf_r+0x18>
 800f424:	6983      	ldr	r3, [r0, #24]
 800f426:	b90b      	cbnz	r3, 800f42c <_vfiprintf_r+0x18>
 800f428:	f7ff fc36 	bl	800ec98 <__sinit>
 800f42c:	4b89      	ldr	r3, [pc, #548]	; (800f654 <_vfiprintf_r+0x240>)
 800f42e:	429d      	cmp	r5, r3
 800f430:	d11b      	bne.n	800f46a <_vfiprintf_r+0x56>
 800f432:	6875      	ldr	r5, [r6, #4]
 800f434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f436:	07d9      	lsls	r1, r3, #31
 800f438:	d405      	bmi.n	800f446 <_vfiprintf_r+0x32>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	059a      	lsls	r2, r3, #22
 800f43e:	d402      	bmi.n	800f446 <_vfiprintf_r+0x32>
 800f440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f442:	f7ff fcec 	bl	800ee1e <__retarget_lock_acquire_recursive>
 800f446:	89ab      	ldrh	r3, [r5, #12]
 800f448:	071b      	lsls	r3, r3, #28
 800f44a:	d501      	bpl.n	800f450 <_vfiprintf_r+0x3c>
 800f44c:	692b      	ldr	r3, [r5, #16]
 800f44e:	b9eb      	cbnz	r3, 800f48c <_vfiprintf_r+0x78>
 800f450:	4629      	mov	r1, r5
 800f452:	4630      	mov	r0, r6
 800f454:	f000 fb06 	bl	800fa64 <__swsetup_r>
 800f458:	b1c0      	cbz	r0, 800f48c <_vfiprintf_r+0x78>
 800f45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f45c:	07dc      	lsls	r4, r3, #31
 800f45e:	d50e      	bpl.n	800f47e <_vfiprintf_r+0x6a>
 800f460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f464:	b01d      	add	sp, #116	; 0x74
 800f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46a:	4b7b      	ldr	r3, [pc, #492]	; (800f658 <_vfiprintf_r+0x244>)
 800f46c:	429d      	cmp	r5, r3
 800f46e:	d101      	bne.n	800f474 <_vfiprintf_r+0x60>
 800f470:	68b5      	ldr	r5, [r6, #8]
 800f472:	e7df      	b.n	800f434 <_vfiprintf_r+0x20>
 800f474:	4b79      	ldr	r3, [pc, #484]	; (800f65c <_vfiprintf_r+0x248>)
 800f476:	429d      	cmp	r5, r3
 800f478:	bf08      	it	eq
 800f47a:	68f5      	ldreq	r5, [r6, #12]
 800f47c:	e7da      	b.n	800f434 <_vfiprintf_r+0x20>
 800f47e:	89ab      	ldrh	r3, [r5, #12]
 800f480:	0598      	lsls	r0, r3, #22
 800f482:	d4ed      	bmi.n	800f460 <_vfiprintf_r+0x4c>
 800f484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f486:	f7ff fccb 	bl	800ee20 <__retarget_lock_release_recursive>
 800f48a:	e7e9      	b.n	800f460 <_vfiprintf_r+0x4c>
 800f48c:	2300      	movs	r3, #0
 800f48e:	9309      	str	r3, [sp, #36]	; 0x24
 800f490:	2320      	movs	r3, #32
 800f492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f496:	f8cd 800c 	str.w	r8, [sp, #12]
 800f49a:	2330      	movs	r3, #48	; 0x30
 800f49c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f660 <_vfiprintf_r+0x24c>
 800f4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4a4:	f04f 0901 	mov.w	r9, #1
 800f4a8:	4623      	mov	r3, r4
 800f4aa:	469a      	mov	sl, r3
 800f4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4b0:	b10a      	cbz	r2, 800f4b6 <_vfiprintf_r+0xa2>
 800f4b2:	2a25      	cmp	r2, #37	; 0x25
 800f4b4:	d1f9      	bne.n	800f4aa <_vfiprintf_r+0x96>
 800f4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800f4ba:	d00b      	beq.n	800f4d4 <_vfiprintf_r+0xc0>
 800f4bc:	465b      	mov	r3, fp
 800f4be:	4622      	mov	r2, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f7ff ff93 	bl	800f3ee <__sfputs_r>
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	f000 80aa 	beq.w	800f622 <_vfiprintf_r+0x20e>
 800f4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4d0:	445a      	add	r2, fp
 800f4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f000 80a2 	beq.w	800f622 <_vfiprintf_r+0x20e>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4e8:	f10a 0a01 	add.w	sl, sl, #1
 800f4ec:	9304      	str	r3, [sp, #16]
 800f4ee:	9307      	str	r3, [sp, #28]
 800f4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800f4f6:	4654      	mov	r4, sl
 800f4f8:	2205      	movs	r2, #5
 800f4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4fe:	4858      	ldr	r0, [pc, #352]	; (800f660 <_vfiprintf_r+0x24c>)
 800f500:	f7f0 feee 	bl	80002e0 <memchr>
 800f504:	9a04      	ldr	r2, [sp, #16]
 800f506:	b9d8      	cbnz	r0, 800f540 <_vfiprintf_r+0x12c>
 800f508:	06d1      	lsls	r1, r2, #27
 800f50a:	bf44      	itt	mi
 800f50c:	2320      	movmi	r3, #32
 800f50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f512:	0713      	lsls	r3, r2, #28
 800f514:	bf44      	itt	mi
 800f516:	232b      	movmi	r3, #43	; 0x2b
 800f518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f51c:	f89a 3000 	ldrb.w	r3, [sl]
 800f520:	2b2a      	cmp	r3, #42	; 0x2a
 800f522:	d015      	beq.n	800f550 <_vfiprintf_r+0x13c>
 800f524:	9a07      	ldr	r2, [sp, #28]
 800f526:	4654      	mov	r4, sl
 800f528:	2000      	movs	r0, #0
 800f52a:	f04f 0c0a 	mov.w	ip, #10
 800f52e:	4621      	mov	r1, r4
 800f530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f534:	3b30      	subs	r3, #48	; 0x30
 800f536:	2b09      	cmp	r3, #9
 800f538:	d94e      	bls.n	800f5d8 <_vfiprintf_r+0x1c4>
 800f53a:	b1b0      	cbz	r0, 800f56a <_vfiprintf_r+0x156>
 800f53c:	9207      	str	r2, [sp, #28]
 800f53e:	e014      	b.n	800f56a <_vfiprintf_r+0x156>
 800f540:	eba0 0308 	sub.w	r3, r0, r8
 800f544:	fa09 f303 	lsl.w	r3, r9, r3
 800f548:	4313      	orrs	r3, r2
 800f54a:	9304      	str	r3, [sp, #16]
 800f54c:	46a2      	mov	sl, r4
 800f54e:	e7d2      	b.n	800f4f6 <_vfiprintf_r+0xe2>
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	1d19      	adds	r1, r3, #4
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	9103      	str	r1, [sp, #12]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	bfbb      	ittet	lt
 800f55c:	425b      	neglt	r3, r3
 800f55e:	f042 0202 	orrlt.w	r2, r2, #2
 800f562:	9307      	strge	r3, [sp, #28]
 800f564:	9307      	strlt	r3, [sp, #28]
 800f566:	bfb8      	it	lt
 800f568:	9204      	strlt	r2, [sp, #16]
 800f56a:	7823      	ldrb	r3, [r4, #0]
 800f56c:	2b2e      	cmp	r3, #46	; 0x2e
 800f56e:	d10c      	bne.n	800f58a <_vfiprintf_r+0x176>
 800f570:	7863      	ldrb	r3, [r4, #1]
 800f572:	2b2a      	cmp	r3, #42	; 0x2a
 800f574:	d135      	bne.n	800f5e2 <_vfiprintf_r+0x1ce>
 800f576:	9b03      	ldr	r3, [sp, #12]
 800f578:	1d1a      	adds	r2, r3, #4
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	9203      	str	r2, [sp, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	bfb8      	it	lt
 800f582:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f586:	3402      	adds	r4, #2
 800f588:	9305      	str	r3, [sp, #20]
 800f58a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f670 <_vfiprintf_r+0x25c>
 800f58e:	7821      	ldrb	r1, [r4, #0]
 800f590:	2203      	movs	r2, #3
 800f592:	4650      	mov	r0, sl
 800f594:	f7f0 fea4 	bl	80002e0 <memchr>
 800f598:	b140      	cbz	r0, 800f5ac <_vfiprintf_r+0x198>
 800f59a:	2340      	movs	r3, #64	; 0x40
 800f59c:	eba0 000a 	sub.w	r0, r0, sl
 800f5a0:	fa03 f000 	lsl.w	r0, r3, r0
 800f5a4:	9b04      	ldr	r3, [sp, #16]
 800f5a6:	4303      	orrs	r3, r0
 800f5a8:	3401      	adds	r4, #1
 800f5aa:	9304      	str	r3, [sp, #16]
 800f5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b0:	482c      	ldr	r0, [pc, #176]	; (800f664 <_vfiprintf_r+0x250>)
 800f5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5b6:	2206      	movs	r2, #6
 800f5b8:	f7f0 fe92 	bl	80002e0 <memchr>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d03f      	beq.n	800f640 <_vfiprintf_r+0x22c>
 800f5c0:	4b29      	ldr	r3, [pc, #164]	; (800f668 <_vfiprintf_r+0x254>)
 800f5c2:	bb1b      	cbnz	r3, 800f60c <_vfiprintf_r+0x1f8>
 800f5c4:	9b03      	ldr	r3, [sp, #12]
 800f5c6:	3307      	adds	r3, #7
 800f5c8:	f023 0307 	bic.w	r3, r3, #7
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d2:	443b      	add	r3, r7
 800f5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d6:	e767      	b.n	800f4a8 <_vfiprintf_r+0x94>
 800f5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5dc:	460c      	mov	r4, r1
 800f5de:	2001      	movs	r0, #1
 800f5e0:	e7a5      	b.n	800f52e <_vfiprintf_r+0x11a>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	3401      	adds	r4, #1
 800f5e6:	9305      	str	r3, [sp, #20]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	f04f 0c0a 	mov.w	ip, #10
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f4:	3a30      	subs	r2, #48	; 0x30
 800f5f6:	2a09      	cmp	r2, #9
 800f5f8:	d903      	bls.n	800f602 <_vfiprintf_r+0x1ee>
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d0c5      	beq.n	800f58a <_vfiprintf_r+0x176>
 800f5fe:	9105      	str	r1, [sp, #20]
 800f600:	e7c3      	b.n	800f58a <_vfiprintf_r+0x176>
 800f602:	fb0c 2101 	mla	r1, ip, r1, r2
 800f606:	4604      	mov	r4, r0
 800f608:	2301      	movs	r3, #1
 800f60a:	e7f0      	b.n	800f5ee <_vfiprintf_r+0x1da>
 800f60c:	ab03      	add	r3, sp, #12
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	462a      	mov	r2, r5
 800f612:	4b16      	ldr	r3, [pc, #88]	; (800f66c <_vfiprintf_r+0x258>)
 800f614:	a904      	add	r1, sp, #16
 800f616:	4630      	mov	r0, r6
 800f618:	f3af 8000 	nop.w
 800f61c:	4607      	mov	r7, r0
 800f61e:	1c78      	adds	r0, r7, #1
 800f620:	d1d6      	bne.n	800f5d0 <_vfiprintf_r+0x1bc>
 800f622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f624:	07d9      	lsls	r1, r3, #31
 800f626:	d405      	bmi.n	800f634 <_vfiprintf_r+0x220>
 800f628:	89ab      	ldrh	r3, [r5, #12]
 800f62a:	059a      	lsls	r2, r3, #22
 800f62c:	d402      	bmi.n	800f634 <_vfiprintf_r+0x220>
 800f62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f630:	f7ff fbf6 	bl	800ee20 <__retarget_lock_release_recursive>
 800f634:	89ab      	ldrh	r3, [r5, #12]
 800f636:	065b      	lsls	r3, r3, #25
 800f638:	f53f af12 	bmi.w	800f460 <_vfiprintf_r+0x4c>
 800f63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f63e:	e711      	b.n	800f464 <_vfiprintf_r+0x50>
 800f640:	ab03      	add	r3, sp, #12
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	462a      	mov	r2, r5
 800f646:	4b09      	ldr	r3, [pc, #36]	; (800f66c <_vfiprintf_r+0x258>)
 800f648:	a904      	add	r1, sp, #16
 800f64a:	4630      	mov	r0, r6
 800f64c:	f000 f880 	bl	800f750 <_printf_i>
 800f650:	e7e4      	b.n	800f61c <_vfiprintf_r+0x208>
 800f652:	bf00      	nop
 800f654:	0800fd30 	.word	0x0800fd30
 800f658:	0800fd50 	.word	0x0800fd50
 800f65c:	0800fd10 	.word	0x0800fd10
 800f660:	0800fd74 	.word	0x0800fd74
 800f664:	0800fd7e 	.word	0x0800fd7e
 800f668:	00000000 	.word	0x00000000
 800f66c:	0800f3ef 	.word	0x0800f3ef
 800f670:	0800fd7a 	.word	0x0800fd7a

0800f674 <_printf_common>:
 800f674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f678:	4616      	mov	r6, r2
 800f67a:	4699      	mov	r9, r3
 800f67c:	688a      	ldr	r2, [r1, #8]
 800f67e:	690b      	ldr	r3, [r1, #16]
 800f680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f684:	4293      	cmp	r3, r2
 800f686:	bfb8      	it	lt
 800f688:	4613      	movlt	r3, r2
 800f68a:	6033      	str	r3, [r6, #0]
 800f68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f690:	4607      	mov	r7, r0
 800f692:	460c      	mov	r4, r1
 800f694:	b10a      	cbz	r2, 800f69a <_printf_common+0x26>
 800f696:	3301      	adds	r3, #1
 800f698:	6033      	str	r3, [r6, #0]
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	0699      	lsls	r1, r3, #26
 800f69e:	bf42      	ittt	mi
 800f6a0:	6833      	ldrmi	r3, [r6, #0]
 800f6a2:	3302      	addmi	r3, #2
 800f6a4:	6033      	strmi	r3, [r6, #0]
 800f6a6:	6825      	ldr	r5, [r4, #0]
 800f6a8:	f015 0506 	ands.w	r5, r5, #6
 800f6ac:	d106      	bne.n	800f6bc <_printf_common+0x48>
 800f6ae:	f104 0a19 	add.w	sl, r4, #25
 800f6b2:	68e3      	ldr	r3, [r4, #12]
 800f6b4:	6832      	ldr	r2, [r6, #0]
 800f6b6:	1a9b      	subs	r3, r3, r2
 800f6b8:	42ab      	cmp	r3, r5
 800f6ba:	dc26      	bgt.n	800f70a <_printf_common+0x96>
 800f6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f6c0:	1e13      	subs	r3, r2, #0
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	bf18      	it	ne
 800f6c6:	2301      	movne	r3, #1
 800f6c8:	0692      	lsls	r2, r2, #26
 800f6ca:	d42b      	bmi.n	800f724 <_printf_common+0xb0>
 800f6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	47c0      	blx	r8
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	d01e      	beq.n	800f718 <_printf_common+0xa4>
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	68e5      	ldr	r5, [r4, #12]
 800f6de:	6832      	ldr	r2, [r6, #0]
 800f6e0:	f003 0306 	and.w	r3, r3, #6
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	bf08      	it	eq
 800f6e8:	1aad      	subeq	r5, r5, r2
 800f6ea:	68a3      	ldr	r3, [r4, #8]
 800f6ec:	6922      	ldr	r2, [r4, #16]
 800f6ee:	bf0c      	ite	eq
 800f6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6f4:	2500      	movne	r5, #0
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	bfc4      	itt	gt
 800f6fa:	1a9b      	subgt	r3, r3, r2
 800f6fc:	18ed      	addgt	r5, r5, r3
 800f6fe:	2600      	movs	r6, #0
 800f700:	341a      	adds	r4, #26
 800f702:	42b5      	cmp	r5, r6
 800f704:	d11a      	bne.n	800f73c <_printf_common+0xc8>
 800f706:	2000      	movs	r0, #0
 800f708:	e008      	b.n	800f71c <_printf_common+0xa8>
 800f70a:	2301      	movs	r3, #1
 800f70c:	4652      	mov	r2, sl
 800f70e:	4649      	mov	r1, r9
 800f710:	4638      	mov	r0, r7
 800f712:	47c0      	blx	r8
 800f714:	3001      	adds	r0, #1
 800f716:	d103      	bne.n	800f720 <_printf_common+0xac>
 800f718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f720:	3501      	adds	r5, #1
 800f722:	e7c6      	b.n	800f6b2 <_printf_common+0x3e>
 800f724:	18e1      	adds	r1, r4, r3
 800f726:	1c5a      	adds	r2, r3, #1
 800f728:	2030      	movs	r0, #48	; 0x30
 800f72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f72e:	4422      	add	r2, r4
 800f730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f738:	3302      	adds	r3, #2
 800f73a:	e7c7      	b.n	800f6cc <_printf_common+0x58>
 800f73c:	2301      	movs	r3, #1
 800f73e:	4622      	mov	r2, r4
 800f740:	4649      	mov	r1, r9
 800f742:	4638      	mov	r0, r7
 800f744:	47c0      	blx	r8
 800f746:	3001      	adds	r0, #1
 800f748:	d0e6      	beq.n	800f718 <_printf_common+0xa4>
 800f74a:	3601      	adds	r6, #1
 800f74c:	e7d9      	b.n	800f702 <_printf_common+0x8e>
	...

0800f750 <_printf_i>:
 800f750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f754:	7e0f      	ldrb	r7, [r1, #24]
 800f756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f758:	2f78      	cmp	r7, #120	; 0x78
 800f75a:	4691      	mov	r9, r2
 800f75c:	4680      	mov	r8, r0
 800f75e:	460c      	mov	r4, r1
 800f760:	469a      	mov	sl, r3
 800f762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f766:	d807      	bhi.n	800f778 <_printf_i+0x28>
 800f768:	2f62      	cmp	r7, #98	; 0x62
 800f76a:	d80a      	bhi.n	800f782 <_printf_i+0x32>
 800f76c:	2f00      	cmp	r7, #0
 800f76e:	f000 80d8 	beq.w	800f922 <_printf_i+0x1d2>
 800f772:	2f58      	cmp	r7, #88	; 0x58
 800f774:	f000 80a3 	beq.w	800f8be <_printf_i+0x16e>
 800f778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f780:	e03a      	b.n	800f7f8 <_printf_i+0xa8>
 800f782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f786:	2b15      	cmp	r3, #21
 800f788:	d8f6      	bhi.n	800f778 <_printf_i+0x28>
 800f78a:	a101      	add	r1, pc, #4	; (adr r1, 800f790 <_printf_i+0x40>)
 800f78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f790:	0800f7e9 	.word	0x0800f7e9
 800f794:	0800f7fd 	.word	0x0800f7fd
 800f798:	0800f779 	.word	0x0800f779
 800f79c:	0800f779 	.word	0x0800f779
 800f7a0:	0800f779 	.word	0x0800f779
 800f7a4:	0800f779 	.word	0x0800f779
 800f7a8:	0800f7fd 	.word	0x0800f7fd
 800f7ac:	0800f779 	.word	0x0800f779
 800f7b0:	0800f779 	.word	0x0800f779
 800f7b4:	0800f779 	.word	0x0800f779
 800f7b8:	0800f779 	.word	0x0800f779
 800f7bc:	0800f909 	.word	0x0800f909
 800f7c0:	0800f82d 	.word	0x0800f82d
 800f7c4:	0800f8eb 	.word	0x0800f8eb
 800f7c8:	0800f779 	.word	0x0800f779
 800f7cc:	0800f779 	.word	0x0800f779
 800f7d0:	0800f92b 	.word	0x0800f92b
 800f7d4:	0800f779 	.word	0x0800f779
 800f7d8:	0800f82d 	.word	0x0800f82d
 800f7dc:	0800f779 	.word	0x0800f779
 800f7e0:	0800f779 	.word	0x0800f779
 800f7e4:	0800f8f3 	.word	0x0800f8f3
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	1d1a      	adds	r2, r3, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	602a      	str	r2, [r5, #0]
 800f7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e0a3      	b.n	800f944 <_printf_i+0x1f4>
 800f7fc:	6820      	ldr	r0, [r4, #0]
 800f7fe:	6829      	ldr	r1, [r5, #0]
 800f800:	0606      	lsls	r6, r0, #24
 800f802:	f101 0304 	add.w	r3, r1, #4
 800f806:	d50a      	bpl.n	800f81e <_printf_i+0xce>
 800f808:	680e      	ldr	r6, [r1, #0]
 800f80a:	602b      	str	r3, [r5, #0]
 800f80c:	2e00      	cmp	r6, #0
 800f80e:	da03      	bge.n	800f818 <_printf_i+0xc8>
 800f810:	232d      	movs	r3, #45	; 0x2d
 800f812:	4276      	negs	r6, r6
 800f814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f818:	485e      	ldr	r0, [pc, #376]	; (800f994 <_printf_i+0x244>)
 800f81a:	230a      	movs	r3, #10
 800f81c:	e019      	b.n	800f852 <_printf_i+0x102>
 800f81e:	680e      	ldr	r6, [r1, #0]
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f826:	bf18      	it	ne
 800f828:	b236      	sxthne	r6, r6
 800f82a:	e7ef      	b.n	800f80c <_printf_i+0xbc>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	6820      	ldr	r0, [r4, #0]
 800f830:	1d19      	adds	r1, r3, #4
 800f832:	6029      	str	r1, [r5, #0]
 800f834:	0601      	lsls	r1, r0, #24
 800f836:	d501      	bpl.n	800f83c <_printf_i+0xec>
 800f838:	681e      	ldr	r6, [r3, #0]
 800f83a:	e002      	b.n	800f842 <_printf_i+0xf2>
 800f83c:	0646      	lsls	r6, r0, #25
 800f83e:	d5fb      	bpl.n	800f838 <_printf_i+0xe8>
 800f840:	881e      	ldrh	r6, [r3, #0]
 800f842:	4854      	ldr	r0, [pc, #336]	; (800f994 <_printf_i+0x244>)
 800f844:	2f6f      	cmp	r7, #111	; 0x6f
 800f846:	bf0c      	ite	eq
 800f848:	2308      	moveq	r3, #8
 800f84a:	230a      	movne	r3, #10
 800f84c:	2100      	movs	r1, #0
 800f84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f852:	6865      	ldr	r5, [r4, #4]
 800f854:	60a5      	str	r5, [r4, #8]
 800f856:	2d00      	cmp	r5, #0
 800f858:	bfa2      	ittt	ge
 800f85a:	6821      	ldrge	r1, [r4, #0]
 800f85c:	f021 0104 	bicge.w	r1, r1, #4
 800f860:	6021      	strge	r1, [r4, #0]
 800f862:	b90e      	cbnz	r6, 800f868 <_printf_i+0x118>
 800f864:	2d00      	cmp	r5, #0
 800f866:	d04d      	beq.n	800f904 <_printf_i+0x1b4>
 800f868:	4615      	mov	r5, r2
 800f86a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f86e:	fb03 6711 	mls	r7, r3, r1, r6
 800f872:	5dc7      	ldrb	r7, [r0, r7]
 800f874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f878:	4637      	mov	r7, r6
 800f87a:	42bb      	cmp	r3, r7
 800f87c:	460e      	mov	r6, r1
 800f87e:	d9f4      	bls.n	800f86a <_printf_i+0x11a>
 800f880:	2b08      	cmp	r3, #8
 800f882:	d10b      	bne.n	800f89c <_printf_i+0x14c>
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	07de      	lsls	r6, r3, #31
 800f888:	d508      	bpl.n	800f89c <_printf_i+0x14c>
 800f88a:	6923      	ldr	r3, [r4, #16]
 800f88c:	6861      	ldr	r1, [r4, #4]
 800f88e:	4299      	cmp	r1, r3
 800f890:	bfde      	ittt	le
 800f892:	2330      	movle	r3, #48	; 0x30
 800f894:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f898:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f89c:	1b52      	subs	r2, r2, r5
 800f89e:	6122      	str	r2, [r4, #16]
 800f8a0:	f8cd a000 	str.w	sl, [sp]
 800f8a4:	464b      	mov	r3, r9
 800f8a6:	aa03      	add	r2, sp, #12
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4640      	mov	r0, r8
 800f8ac:	f7ff fee2 	bl	800f674 <_printf_common>
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d14c      	bne.n	800f94e <_printf_i+0x1fe>
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8b8:	b004      	add	sp, #16
 800f8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8be:	4835      	ldr	r0, [pc, #212]	; (800f994 <_printf_i+0x244>)
 800f8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f8c4:	6829      	ldr	r1, [r5, #0]
 800f8c6:	6823      	ldr	r3, [r4, #0]
 800f8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f8cc:	6029      	str	r1, [r5, #0]
 800f8ce:	061d      	lsls	r5, r3, #24
 800f8d0:	d514      	bpl.n	800f8fc <_printf_i+0x1ac>
 800f8d2:	07df      	lsls	r7, r3, #31
 800f8d4:	bf44      	itt	mi
 800f8d6:	f043 0320 	orrmi.w	r3, r3, #32
 800f8da:	6023      	strmi	r3, [r4, #0]
 800f8dc:	b91e      	cbnz	r6, 800f8e6 <_printf_i+0x196>
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	f023 0320 	bic.w	r3, r3, #32
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	2310      	movs	r3, #16
 800f8e8:	e7b0      	b.n	800f84c <_printf_i+0xfc>
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	f043 0320 	orr.w	r3, r3, #32
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	2378      	movs	r3, #120	; 0x78
 800f8f4:	4828      	ldr	r0, [pc, #160]	; (800f998 <_printf_i+0x248>)
 800f8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f8fa:	e7e3      	b.n	800f8c4 <_printf_i+0x174>
 800f8fc:	0659      	lsls	r1, r3, #25
 800f8fe:	bf48      	it	mi
 800f900:	b2b6      	uxthmi	r6, r6
 800f902:	e7e6      	b.n	800f8d2 <_printf_i+0x182>
 800f904:	4615      	mov	r5, r2
 800f906:	e7bb      	b.n	800f880 <_printf_i+0x130>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	6826      	ldr	r6, [r4, #0]
 800f90c:	6961      	ldr	r1, [r4, #20]
 800f90e:	1d18      	adds	r0, r3, #4
 800f910:	6028      	str	r0, [r5, #0]
 800f912:	0635      	lsls	r5, r6, #24
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	d501      	bpl.n	800f91c <_printf_i+0x1cc>
 800f918:	6019      	str	r1, [r3, #0]
 800f91a:	e002      	b.n	800f922 <_printf_i+0x1d2>
 800f91c:	0670      	lsls	r0, r6, #25
 800f91e:	d5fb      	bpl.n	800f918 <_printf_i+0x1c8>
 800f920:	8019      	strh	r1, [r3, #0]
 800f922:	2300      	movs	r3, #0
 800f924:	6123      	str	r3, [r4, #16]
 800f926:	4615      	mov	r5, r2
 800f928:	e7ba      	b.n	800f8a0 <_printf_i+0x150>
 800f92a:	682b      	ldr	r3, [r5, #0]
 800f92c:	1d1a      	adds	r2, r3, #4
 800f92e:	602a      	str	r2, [r5, #0]
 800f930:	681d      	ldr	r5, [r3, #0]
 800f932:	6862      	ldr	r2, [r4, #4]
 800f934:	2100      	movs	r1, #0
 800f936:	4628      	mov	r0, r5
 800f938:	f7f0 fcd2 	bl	80002e0 <memchr>
 800f93c:	b108      	cbz	r0, 800f942 <_printf_i+0x1f2>
 800f93e:	1b40      	subs	r0, r0, r5
 800f940:	6060      	str	r0, [r4, #4]
 800f942:	6863      	ldr	r3, [r4, #4]
 800f944:	6123      	str	r3, [r4, #16]
 800f946:	2300      	movs	r3, #0
 800f948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f94c:	e7a8      	b.n	800f8a0 <_printf_i+0x150>
 800f94e:	6923      	ldr	r3, [r4, #16]
 800f950:	462a      	mov	r2, r5
 800f952:	4649      	mov	r1, r9
 800f954:	4640      	mov	r0, r8
 800f956:	47d0      	blx	sl
 800f958:	3001      	adds	r0, #1
 800f95a:	d0ab      	beq.n	800f8b4 <_printf_i+0x164>
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	079b      	lsls	r3, r3, #30
 800f960:	d413      	bmi.n	800f98a <_printf_i+0x23a>
 800f962:	68e0      	ldr	r0, [r4, #12]
 800f964:	9b03      	ldr	r3, [sp, #12]
 800f966:	4298      	cmp	r0, r3
 800f968:	bfb8      	it	lt
 800f96a:	4618      	movlt	r0, r3
 800f96c:	e7a4      	b.n	800f8b8 <_printf_i+0x168>
 800f96e:	2301      	movs	r3, #1
 800f970:	4632      	mov	r2, r6
 800f972:	4649      	mov	r1, r9
 800f974:	4640      	mov	r0, r8
 800f976:	47d0      	blx	sl
 800f978:	3001      	adds	r0, #1
 800f97a:	d09b      	beq.n	800f8b4 <_printf_i+0x164>
 800f97c:	3501      	adds	r5, #1
 800f97e:	68e3      	ldr	r3, [r4, #12]
 800f980:	9903      	ldr	r1, [sp, #12]
 800f982:	1a5b      	subs	r3, r3, r1
 800f984:	42ab      	cmp	r3, r5
 800f986:	dcf2      	bgt.n	800f96e <_printf_i+0x21e>
 800f988:	e7eb      	b.n	800f962 <_printf_i+0x212>
 800f98a:	2500      	movs	r5, #0
 800f98c:	f104 0619 	add.w	r6, r4, #25
 800f990:	e7f5      	b.n	800f97e <_printf_i+0x22e>
 800f992:	bf00      	nop
 800f994:	0800fd85 	.word	0x0800fd85
 800f998:	0800fd96 	.word	0x0800fd96

0800f99c <_read_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d07      	ldr	r5, [pc, #28]	; (800f9bc <_read_r+0x20>)
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	4608      	mov	r0, r1
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	602a      	str	r2, [r5, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f7f2 fdd4 	bl	8002558 <_read>
 800f9b0:	1c43      	adds	r3, r0, #1
 800f9b2:	d102      	bne.n	800f9ba <_read_r+0x1e>
 800f9b4:	682b      	ldr	r3, [r5, #0]
 800f9b6:	b103      	cbz	r3, 800f9ba <_read_r+0x1e>
 800f9b8:	6023      	str	r3, [r4, #0]
 800f9ba:	bd38      	pop	{r3, r4, r5, pc}
 800f9bc:	24005b9c 	.word	0x24005b9c

0800f9c0 <__swbuf_r>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	460e      	mov	r6, r1
 800f9c4:	4614      	mov	r4, r2
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	b118      	cbz	r0, 800f9d2 <__swbuf_r+0x12>
 800f9ca:	6983      	ldr	r3, [r0, #24]
 800f9cc:	b90b      	cbnz	r3, 800f9d2 <__swbuf_r+0x12>
 800f9ce:	f7ff f963 	bl	800ec98 <__sinit>
 800f9d2:	4b21      	ldr	r3, [pc, #132]	; (800fa58 <__swbuf_r+0x98>)
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	d12b      	bne.n	800fa30 <__swbuf_r+0x70>
 800f9d8:	686c      	ldr	r4, [r5, #4]
 800f9da:	69a3      	ldr	r3, [r4, #24]
 800f9dc:	60a3      	str	r3, [r4, #8]
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	071a      	lsls	r2, r3, #28
 800f9e2:	d52f      	bpl.n	800fa44 <__swbuf_r+0x84>
 800f9e4:	6923      	ldr	r3, [r4, #16]
 800f9e6:	b36b      	cbz	r3, 800fa44 <__swbuf_r+0x84>
 800f9e8:	6923      	ldr	r3, [r4, #16]
 800f9ea:	6820      	ldr	r0, [r4, #0]
 800f9ec:	1ac0      	subs	r0, r0, r3
 800f9ee:	6963      	ldr	r3, [r4, #20]
 800f9f0:	b2f6      	uxtb	r6, r6
 800f9f2:	4283      	cmp	r3, r0
 800f9f4:	4637      	mov	r7, r6
 800f9f6:	dc04      	bgt.n	800fa02 <__swbuf_r+0x42>
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f7ff fc3a 	bl	800f274 <_fflush_r>
 800fa00:	bb30      	cbnz	r0, 800fa50 <__swbuf_r+0x90>
 800fa02:	68a3      	ldr	r3, [r4, #8]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	60a3      	str	r3, [r4, #8]
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	1c5a      	adds	r2, r3, #1
 800fa0c:	6022      	str	r2, [r4, #0]
 800fa0e:	701e      	strb	r6, [r3, #0]
 800fa10:	6963      	ldr	r3, [r4, #20]
 800fa12:	3001      	adds	r0, #1
 800fa14:	4283      	cmp	r3, r0
 800fa16:	d004      	beq.n	800fa22 <__swbuf_r+0x62>
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	07db      	lsls	r3, r3, #31
 800fa1c:	d506      	bpl.n	800fa2c <__swbuf_r+0x6c>
 800fa1e:	2e0a      	cmp	r6, #10
 800fa20:	d104      	bne.n	800fa2c <__swbuf_r+0x6c>
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7ff fc25 	bl	800f274 <_fflush_r>
 800fa2a:	b988      	cbnz	r0, 800fa50 <__swbuf_r+0x90>
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa30:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <__swbuf_r+0x9c>)
 800fa32:	429c      	cmp	r4, r3
 800fa34:	d101      	bne.n	800fa3a <__swbuf_r+0x7a>
 800fa36:	68ac      	ldr	r4, [r5, #8]
 800fa38:	e7cf      	b.n	800f9da <__swbuf_r+0x1a>
 800fa3a:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <__swbuf_r+0xa0>)
 800fa3c:	429c      	cmp	r4, r3
 800fa3e:	bf08      	it	eq
 800fa40:	68ec      	ldreq	r4, [r5, #12]
 800fa42:	e7ca      	b.n	800f9da <__swbuf_r+0x1a>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4628      	mov	r0, r5
 800fa48:	f000 f80c 	bl	800fa64 <__swsetup_r>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d0cb      	beq.n	800f9e8 <__swbuf_r+0x28>
 800fa50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa54:	e7ea      	b.n	800fa2c <__swbuf_r+0x6c>
 800fa56:	bf00      	nop
 800fa58:	0800fd30 	.word	0x0800fd30
 800fa5c:	0800fd50 	.word	0x0800fd50
 800fa60:	0800fd10 	.word	0x0800fd10

0800fa64 <__swsetup_r>:
 800fa64:	4b32      	ldr	r3, [pc, #200]	; (800fb30 <__swsetup_r+0xcc>)
 800fa66:	b570      	push	{r4, r5, r6, lr}
 800fa68:	681d      	ldr	r5, [r3, #0]
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	b125      	cbz	r5, 800fa7a <__swsetup_r+0x16>
 800fa70:	69ab      	ldr	r3, [r5, #24]
 800fa72:	b913      	cbnz	r3, 800fa7a <__swsetup_r+0x16>
 800fa74:	4628      	mov	r0, r5
 800fa76:	f7ff f90f 	bl	800ec98 <__sinit>
 800fa7a:	4b2e      	ldr	r3, [pc, #184]	; (800fb34 <__swsetup_r+0xd0>)
 800fa7c:	429c      	cmp	r4, r3
 800fa7e:	d10f      	bne.n	800faa0 <__swsetup_r+0x3c>
 800fa80:	686c      	ldr	r4, [r5, #4]
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa88:	0719      	lsls	r1, r3, #28
 800fa8a:	d42c      	bmi.n	800fae6 <__swsetup_r+0x82>
 800fa8c:	06dd      	lsls	r5, r3, #27
 800fa8e:	d411      	bmi.n	800fab4 <__swsetup_r+0x50>
 800fa90:	2309      	movs	r3, #9
 800fa92:	6033      	str	r3, [r6, #0]
 800fa94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa9e:	e03e      	b.n	800fb1e <__swsetup_r+0xba>
 800faa0:	4b25      	ldr	r3, [pc, #148]	; (800fb38 <__swsetup_r+0xd4>)
 800faa2:	429c      	cmp	r4, r3
 800faa4:	d101      	bne.n	800faaa <__swsetup_r+0x46>
 800faa6:	68ac      	ldr	r4, [r5, #8]
 800faa8:	e7eb      	b.n	800fa82 <__swsetup_r+0x1e>
 800faaa:	4b24      	ldr	r3, [pc, #144]	; (800fb3c <__swsetup_r+0xd8>)
 800faac:	429c      	cmp	r4, r3
 800faae:	bf08      	it	eq
 800fab0:	68ec      	ldreq	r4, [r5, #12]
 800fab2:	e7e6      	b.n	800fa82 <__swsetup_r+0x1e>
 800fab4:	0758      	lsls	r0, r3, #29
 800fab6:	d512      	bpl.n	800fade <__swsetup_r+0x7a>
 800fab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faba:	b141      	cbz	r1, 800face <__swsetup_r+0x6a>
 800fabc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fac0:	4299      	cmp	r1, r3
 800fac2:	d002      	beq.n	800faca <__swsetup_r+0x66>
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7ff fc2f 	bl	800f328 <_free_r>
 800faca:	2300      	movs	r3, #0
 800facc:	6363      	str	r3, [r4, #52]	; 0x34
 800face:	89a3      	ldrh	r3, [r4, #12]
 800fad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fad4:	81a3      	strh	r3, [r4, #12]
 800fad6:	2300      	movs	r3, #0
 800fad8:	6063      	str	r3, [r4, #4]
 800fada:	6923      	ldr	r3, [r4, #16]
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	89a3      	ldrh	r3, [r4, #12]
 800fae0:	f043 0308 	orr.w	r3, r3, #8
 800fae4:	81a3      	strh	r3, [r4, #12]
 800fae6:	6923      	ldr	r3, [r4, #16]
 800fae8:	b94b      	cbnz	r3, 800fafe <__swsetup_r+0x9a>
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800faf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faf4:	d003      	beq.n	800fafe <__swsetup_r+0x9a>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4630      	mov	r0, r6
 800fafa:	f000 f847 	bl	800fb8c <__smakebuf_r>
 800fafe:	89a0      	ldrh	r0, [r4, #12]
 800fb00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb04:	f010 0301 	ands.w	r3, r0, #1
 800fb08:	d00a      	beq.n	800fb20 <__swsetup_r+0xbc>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	60a3      	str	r3, [r4, #8]
 800fb0e:	6963      	ldr	r3, [r4, #20]
 800fb10:	425b      	negs	r3, r3
 800fb12:	61a3      	str	r3, [r4, #24]
 800fb14:	6923      	ldr	r3, [r4, #16]
 800fb16:	b943      	cbnz	r3, 800fb2a <__swsetup_r+0xc6>
 800fb18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb1c:	d1ba      	bne.n	800fa94 <__swsetup_r+0x30>
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	0781      	lsls	r1, r0, #30
 800fb22:	bf58      	it	pl
 800fb24:	6963      	ldrpl	r3, [r4, #20]
 800fb26:	60a3      	str	r3, [r4, #8]
 800fb28:	e7f4      	b.n	800fb14 <__swsetup_r+0xb0>
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	e7f7      	b.n	800fb1e <__swsetup_r+0xba>
 800fb2e:	bf00      	nop
 800fb30:	24000014 	.word	0x24000014
 800fb34:	0800fd30 	.word	0x0800fd30
 800fb38:	0800fd50 	.word	0x0800fd50
 800fb3c:	0800fd10 	.word	0x0800fd10

0800fb40 <__swhatbuf_r>:
 800fb40:	b570      	push	{r4, r5, r6, lr}
 800fb42:	460e      	mov	r6, r1
 800fb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb48:	2900      	cmp	r1, #0
 800fb4a:	b096      	sub	sp, #88	; 0x58
 800fb4c:	4614      	mov	r4, r2
 800fb4e:	461d      	mov	r5, r3
 800fb50:	da08      	bge.n	800fb64 <__swhatbuf_r+0x24>
 800fb52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	602a      	str	r2, [r5, #0]
 800fb5a:	061a      	lsls	r2, r3, #24
 800fb5c:	d410      	bmi.n	800fb80 <__swhatbuf_r+0x40>
 800fb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb62:	e00e      	b.n	800fb82 <__swhatbuf_r+0x42>
 800fb64:	466a      	mov	r2, sp
 800fb66:	f000 f851 	bl	800fc0c <_fstat_r>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	dbf1      	blt.n	800fb52 <__swhatbuf_r+0x12>
 800fb6e:	9a01      	ldr	r2, [sp, #4]
 800fb70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb78:	425a      	negs	r2, r3
 800fb7a:	415a      	adcs	r2, r3
 800fb7c:	602a      	str	r2, [r5, #0]
 800fb7e:	e7ee      	b.n	800fb5e <__swhatbuf_r+0x1e>
 800fb80:	2340      	movs	r3, #64	; 0x40
 800fb82:	2000      	movs	r0, #0
 800fb84:	6023      	str	r3, [r4, #0]
 800fb86:	b016      	add	sp, #88	; 0x58
 800fb88:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb8c <__smakebuf_r>:
 800fb8c:	898b      	ldrh	r3, [r1, #12]
 800fb8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb90:	079d      	lsls	r5, r3, #30
 800fb92:	4606      	mov	r6, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	d507      	bpl.n	800fba8 <__smakebuf_r+0x1c>
 800fb98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	6123      	str	r3, [r4, #16]
 800fba0:	2301      	movs	r3, #1
 800fba2:	6163      	str	r3, [r4, #20]
 800fba4:	b002      	add	sp, #8
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	ab01      	add	r3, sp, #4
 800fbaa:	466a      	mov	r2, sp
 800fbac:	f7ff ffc8 	bl	800fb40 <__swhatbuf_r>
 800fbb0:	9900      	ldr	r1, [sp, #0]
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f7ff f96b 	bl	800ee90 <_malloc_r>
 800fbba:	b948      	cbnz	r0, 800fbd0 <__smakebuf_r+0x44>
 800fbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc0:	059a      	lsls	r2, r3, #22
 800fbc2:	d4ef      	bmi.n	800fba4 <__smakebuf_r+0x18>
 800fbc4:	f023 0303 	bic.w	r3, r3, #3
 800fbc8:	f043 0302 	orr.w	r3, r3, #2
 800fbcc:	81a3      	strh	r3, [r4, #12]
 800fbce:	e7e3      	b.n	800fb98 <__smakebuf_r+0xc>
 800fbd0:	4b0d      	ldr	r3, [pc, #52]	; (800fc08 <__smakebuf_r+0x7c>)
 800fbd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	6020      	str	r0, [r4, #0]
 800fbd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbdc:	81a3      	strh	r3, [r4, #12]
 800fbde:	9b00      	ldr	r3, [sp, #0]
 800fbe0:	6163      	str	r3, [r4, #20]
 800fbe2:	9b01      	ldr	r3, [sp, #4]
 800fbe4:	6120      	str	r0, [r4, #16]
 800fbe6:	b15b      	cbz	r3, 800fc00 <__smakebuf_r+0x74>
 800fbe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbec:	4630      	mov	r0, r6
 800fbee:	f000 f81f 	bl	800fc30 <_isatty_r>
 800fbf2:	b128      	cbz	r0, 800fc00 <__smakebuf_r+0x74>
 800fbf4:	89a3      	ldrh	r3, [r4, #12]
 800fbf6:	f023 0303 	bic.w	r3, r3, #3
 800fbfa:	f043 0301 	orr.w	r3, r3, #1
 800fbfe:	81a3      	strh	r3, [r4, #12]
 800fc00:	89a0      	ldrh	r0, [r4, #12]
 800fc02:	4305      	orrs	r5, r0
 800fc04:	81a5      	strh	r5, [r4, #12]
 800fc06:	e7cd      	b.n	800fba4 <__smakebuf_r+0x18>
 800fc08:	0800ec31 	.word	0x0800ec31

0800fc0c <_fstat_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4d07      	ldr	r5, [pc, #28]	; (800fc2c <_fstat_r+0x20>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	4611      	mov	r1, r2
 800fc18:	602b      	str	r3, [r5, #0]
 800fc1a:	f7f2 fce2 	bl	80025e2 <_fstat>
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	d102      	bne.n	800fc28 <_fstat_r+0x1c>
 800fc22:	682b      	ldr	r3, [r5, #0]
 800fc24:	b103      	cbz	r3, 800fc28 <_fstat_r+0x1c>
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	bd38      	pop	{r3, r4, r5, pc}
 800fc2a:	bf00      	nop
 800fc2c:	24005b9c 	.word	0x24005b9c

0800fc30 <_isatty_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d06      	ldr	r5, [pc, #24]	; (800fc4c <_isatty_r+0x1c>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	602b      	str	r3, [r5, #0]
 800fc3c:	f7f2 fce1 	bl	8002602 <_isatty>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_isatty_r+0x1a>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_isatty_r+0x1a>
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	24005b9c 	.word	0x24005b9c

0800fc50 <_init>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	bf00      	nop
 800fc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc56:	bc08      	pop	{r3}
 800fc58:	469e      	mov	lr, r3
 800fc5a:	4770      	bx	lr

0800fc5c <_fini>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	bf00      	nop
 800fc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc62:	bc08      	pop	{r3}
 800fc64:	469e      	mov	lr, r3
 800fc66:	4770      	bx	lr
